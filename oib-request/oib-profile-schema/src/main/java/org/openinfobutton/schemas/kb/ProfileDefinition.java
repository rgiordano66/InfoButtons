//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.10.09 at 12:58:47 PM CDT 
//


package org.openinfobutton.schemas.kb;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;


/**
 * <p>Java class for profileDefinition complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="profileDefinition"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="authorizedOrganizations"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="authorizedOrganization" maxOccurs="unbounded"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;extension base="{}Id"&gt;
 *                           &lt;sequence&gt;
 *                             &lt;element ref="{}knowledgeRequestServiceLocation" minOccurs="0"/&gt;
 *                             &lt;element name="accessMethod" maxOccurs="unbounded" minOccurs="0"&gt;
 *                               &lt;complexType&gt;
 *                                 &lt;complexContent&gt;
 *                                   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                                     &lt;sequence&gt;
 *                                       &lt;element name="networkAccessMethod" type="{}CD" minOccurs="0"/&gt;
 *                                       &lt;element name="authenticationMethod"&gt;
 *                                         &lt;complexType&gt;
 *                                           &lt;complexContent&gt;
 *                                             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                                               &lt;choice&gt;
 *                                                 &lt;element name="ip"&gt;
 *                                                   &lt;complexType&gt;
 *                                                     &lt;complexContent&gt;
 *                                                       &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                                                         &lt;sequence&gt;
 *                                                           &lt;element name="ipRange" type="{http://www.w3.org/2001/XMLSchema}anyType" maxOccurs="unbounded"/&gt;
 *                                                         &lt;/sequence&gt;
 *                                                       &lt;/restriction&gt;
 *                                                     &lt;/complexContent&gt;
 *                                                   &lt;/complexType&gt;
 *                                                 &lt;/element&gt;
 *                                                 &lt;element name="usrPwd"&gt;
 *                                                   &lt;complexType&gt;
 *                                                     &lt;complexContent&gt;
 *                                                       &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                                                         &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                                                         &lt;attribute name="certificateText" use="required" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                                                       &lt;/restriction&gt;
 *                                                     &lt;/complexContent&gt;
 *                                                   &lt;/complexType&gt;
 *                                                 &lt;/element&gt;
 *                                               &lt;/choice&gt;
 *                                             &lt;/restriction&gt;
 *                                           &lt;/complexContent&gt;
 *                                         &lt;/complexType&gt;
 *                                       &lt;/element&gt;
 *                                     &lt;/sequence&gt;
 *                                   &lt;/restriction&gt;
 *                                 &lt;/complexContent&gt;
 *                               &lt;/complexType&gt;
 *                             &lt;/element&gt;
 *                           &lt;/sequence&gt;
 *                           &lt;attribute name="usesAssignedAuthorizedPerson" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *                         &lt;/extension&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="supportedTerminologies" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="supportedTerminology" type="{}Id" maxOccurs="unbounded"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="contexts"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="context" type="{}Context" maxOccurs="unbounded"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="hl7URLCompliant" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="hl7KnowledgeResponseCompliant" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="urlStyle"&gt;
 *         &lt;simpleType&gt;
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *             &lt;enumeration value="DIRTY"/&gt;
 *             &lt;enumeration value="CLEAN"/&gt;
 *           &lt;/restriction&gt;
 *         &lt;/simpleType&gt;
 *       &lt;/attribute&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "profileDefinition", propOrder = {
    "authorizedOrganizations",
    "supportedTerminologies",
    "contexts"
})
public class ProfileDefinition {

    @XmlElement(required = true)
    protected ProfileDefinition.AuthorizedOrganizations authorizedOrganizations;
    protected ProfileDefinition.SupportedTerminologies supportedTerminologies;
    @XmlElement(required = true)
    protected ProfileDefinition.Contexts contexts;
    @XmlAttribute(name = "hl7URLCompliant", required = true)
    protected boolean hl7URLCompliant;
    @XmlAttribute(name = "hl7KnowledgeResponseCompliant", required = true)
    protected boolean hl7KnowledgeResponseCompliant;
    @XmlAttribute(name = "urlStyle")
    protected String urlStyle;

    /**
     * Gets the value of the authorizedOrganizations property.
     * 
     * @return
     *     possible object is
     *     {@link ProfileDefinition.AuthorizedOrganizations }
     *     
     */
    public ProfileDefinition.AuthorizedOrganizations getAuthorizedOrganizations() {
        return authorizedOrganizations;
    }

    /**
     * Sets the value of the authorizedOrganizations property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProfileDefinition.AuthorizedOrganizations }
     *     
     */
    public void setAuthorizedOrganizations(ProfileDefinition.AuthorizedOrganizations value) {
        this.authorizedOrganizations = value;
    }

    /**
     * Gets the value of the supportedTerminologies property.
     * 
     * @return
     *     possible object is
     *     {@link ProfileDefinition.SupportedTerminologies }
     *     
     */
    public ProfileDefinition.SupportedTerminologies getSupportedTerminologies() {
        return supportedTerminologies;
    }

    /**
     * Sets the value of the supportedTerminologies property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProfileDefinition.SupportedTerminologies }
     *     
     */
    public void setSupportedTerminologies(ProfileDefinition.SupportedTerminologies value) {
        this.supportedTerminologies = value;
    }

    /**
     * Gets the value of the contexts property.
     * 
     * @return
     *     possible object is
     *     {@link ProfileDefinition.Contexts }
     *     
     */
    public ProfileDefinition.Contexts getContexts() {
        return contexts;
    }

    /**
     * Sets the value of the contexts property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProfileDefinition.Contexts }
     *     
     */
    public void setContexts(ProfileDefinition.Contexts value) {
        this.contexts = value;
    }

    /**
     * Gets the value of the hl7URLCompliant property.
     * 
     */
    public boolean isHl7URLCompliant() {
        return hl7URLCompliant;
    }

    /**
     * Sets the value of the hl7URLCompliant property.
     * 
     */
    public void setHl7URLCompliant(boolean value) {
        this.hl7URLCompliant = value;
    }

    /**
     * Gets the value of the hl7KnowledgeResponseCompliant property.
     * 
     */
    public boolean isHl7KnowledgeResponseCompliant() {
        return hl7KnowledgeResponseCompliant;
    }

    /**
     * Sets the value of the hl7KnowledgeResponseCompliant property.
     * 
     */
    public void setHl7KnowledgeResponseCompliant(boolean value) {
        this.hl7KnowledgeResponseCompliant = value;
    }

    /**
     * Gets the value of the urlStyle property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUrlStyle() {
        return urlStyle;
    }

    /**
     * Sets the value of the urlStyle property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUrlStyle(String value) {
        this.urlStyle = value;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final ProfileDefinition.Builder<_B> _other) {
        _other.authorizedOrganizations = ((this.authorizedOrganizations == null)?null:this.authorizedOrganizations.newCopyBuilder(_other));
        _other.supportedTerminologies = ((this.supportedTerminologies == null)?null:this.supportedTerminologies.newCopyBuilder(_other));
        _other.contexts = ((this.contexts == null)?null:this.contexts.newCopyBuilder(_other));
        _other.hl7URLCompliant = this.hl7URLCompliant;
        _other.hl7KnowledgeResponseCompliant = this.hl7KnowledgeResponseCompliant;
        _other.urlStyle = this.urlStyle;
    }

    public<_B >ProfileDefinition.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new ProfileDefinition.Builder<_B>(_parentBuilder, this, true);
    }

    public ProfileDefinition.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static ProfileDefinition.Builder<Void> builder() {
        return new ProfileDefinition.Builder<Void>(null, null, false);
    }

    public static<_B >ProfileDefinition.Builder<_B> copyOf(final ProfileDefinition _other) {
        final ProfileDefinition.Builder<_B> _newBuilder = new ProfileDefinition.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final ProfileDefinition.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree authorizedOrganizationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("authorizedOrganizations"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(authorizedOrganizationsPropertyTree!= null):((authorizedOrganizationsPropertyTree == null)||(!authorizedOrganizationsPropertyTree.isLeaf())))) {
            _other.authorizedOrganizations = ((this.authorizedOrganizations == null)?null:this.authorizedOrganizations.newCopyBuilder(_other, authorizedOrganizationsPropertyTree, _propertyTreeUse));
        }
        final PropertyTree supportedTerminologiesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("supportedTerminologies"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(supportedTerminologiesPropertyTree!= null):((supportedTerminologiesPropertyTree == null)||(!supportedTerminologiesPropertyTree.isLeaf())))) {
            _other.supportedTerminologies = ((this.supportedTerminologies == null)?null:this.supportedTerminologies.newCopyBuilder(_other, supportedTerminologiesPropertyTree, _propertyTreeUse));
        }
        final PropertyTree contextsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contexts"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contextsPropertyTree!= null):((contextsPropertyTree == null)||(!contextsPropertyTree.isLeaf())))) {
            _other.contexts = ((this.contexts == null)?null:this.contexts.newCopyBuilder(_other, contextsPropertyTree, _propertyTreeUse));
        }
        final PropertyTree hl7URLCompliantPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("hl7URLCompliant"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hl7URLCompliantPropertyTree!= null):((hl7URLCompliantPropertyTree == null)||(!hl7URLCompliantPropertyTree.isLeaf())))) {
            _other.hl7URLCompliant = this.hl7URLCompliant;
        }
        final PropertyTree hl7KnowledgeResponseCompliantPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("hl7KnowledgeResponseCompliant"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hl7KnowledgeResponseCompliantPropertyTree!= null):((hl7KnowledgeResponseCompliantPropertyTree == null)||(!hl7KnowledgeResponseCompliantPropertyTree.isLeaf())))) {
            _other.hl7KnowledgeResponseCompliant = this.hl7KnowledgeResponseCompliant;
        }
        final PropertyTree urlStylePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("urlStyle"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(urlStylePropertyTree!= null):((urlStylePropertyTree == null)||(!urlStylePropertyTree.isLeaf())))) {
            _other.urlStyle = this.urlStyle;
        }
    }

    public<_B >ProfileDefinition.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new ProfileDefinition.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public ProfileDefinition.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >ProfileDefinition.Builder<_B> copyOf(final ProfileDefinition _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final ProfileDefinition.Builder<_B> _newBuilder = new ProfileDefinition.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static ProfileDefinition.Builder<Void> copyExcept(final ProfileDefinition _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static ProfileDefinition.Builder<Void> copyOnly(final ProfileDefinition _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="authorizedOrganization" maxOccurs="unbounded"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;extension base="{}Id"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element ref="{}knowledgeRequestServiceLocation" minOccurs="0"/&gt;
     *                   &lt;element name="accessMethod" maxOccurs="unbounded" minOccurs="0"&gt;
     *                     &lt;complexType&gt;
     *                       &lt;complexContent&gt;
     *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                           &lt;sequence&gt;
     *                             &lt;element name="networkAccessMethod" type="{}CD" minOccurs="0"/&gt;
     *                             &lt;element name="authenticationMethod"&gt;
     *                               &lt;complexType&gt;
     *                                 &lt;complexContent&gt;
     *                                   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                                     &lt;choice&gt;
     *                                       &lt;element name="ip"&gt;
     *                                         &lt;complexType&gt;
     *                                           &lt;complexContent&gt;
     *                                             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                                               &lt;sequence&gt;
     *                                                 &lt;element name="ipRange" type="{http://www.w3.org/2001/XMLSchema}anyType" maxOccurs="unbounded"/&gt;
     *                                               &lt;/sequence&gt;
     *                                             &lt;/restriction&gt;
     *                                           &lt;/complexContent&gt;
     *                                         &lt;/complexType&gt;
     *                                       &lt;/element&gt;
     *                                       &lt;element name="usrPwd"&gt;
     *                                         &lt;complexType&gt;
     *                                           &lt;complexContent&gt;
     *                                             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                                               &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *                                               &lt;attribute name="certificateText" use="required" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *                                             &lt;/restriction&gt;
     *                                           &lt;/complexContent&gt;
     *                                         &lt;/complexType&gt;
     *                                       &lt;/element&gt;
     *                                     &lt;/choice&gt;
     *                                   &lt;/restriction&gt;
     *                                 &lt;/complexContent&gt;
     *                               &lt;/complexType&gt;
     *                             &lt;/element&gt;
     *                           &lt;/sequence&gt;
     *                         &lt;/restriction&gt;
     *                       &lt;/complexContent&gt;
     *                     &lt;/complexType&gt;
     *                   &lt;/element&gt;
     *                 &lt;/sequence&gt;
     *                 &lt;attribute name="usesAssignedAuthorizedPerson" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *               &lt;/extension&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "authorizedOrganization"
    })
    public static class AuthorizedOrganizations {

        @XmlElement(required = true)
        protected List<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization> authorizedOrganization;

        /**
         * Gets the value of the authorizedOrganization property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the authorizedOrganization property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getAuthorizedOrganization().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization }
         * 
         * 
         */
        public List<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization> getAuthorizedOrganization() {
            if (authorizedOrganization == null) {
                authorizedOrganization = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization>();
            }
            return this.authorizedOrganization;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final ProfileDefinition.AuthorizedOrganizations.Builder<_B> _other) {
            if (this.authorizedOrganization == null) {
                _other.authorizedOrganization = null;
            } else {
                _other.authorizedOrganization = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<ProfileDefinition.AuthorizedOrganizations.Builder<_B>>>();
                for (ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization _item: this.authorizedOrganization) {
                    _other.authorizedOrganization.add(((_item == null)?null:_item.newCopyBuilder(_other)));
                }
            }
        }

        public<_B >ProfileDefinition.AuthorizedOrganizations.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
            return new ProfileDefinition.AuthorizedOrganizations.Builder<_B>(_parentBuilder, this, true);
        }

        public ProfileDefinition.AuthorizedOrganizations.Builder<Void> newCopyBuilder() {
            return newCopyBuilder(null);
        }

        public static ProfileDefinition.AuthorizedOrganizations.Builder<Void> builder() {
            return new ProfileDefinition.AuthorizedOrganizations.Builder<Void>(null, null, false);
        }

        public static<_B >ProfileDefinition.AuthorizedOrganizations.Builder<_B> copyOf(final ProfileDefinition.AuthorizedOrganizations _other) {
            final ProfileDefinition.AuthorizedOrganizations.Builder<_B> _newBuilder = new ProfileDefinition.AuthorizedOrganizations.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder);
            return _newBuilder;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final ProfileDefinition.AuthorizedOrganizations.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final PropertyTree authorizedOrganizationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("authorizedOrganization"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(authorizedOrganizationPropertyTree!= null):((authorizedOrganizationPropertyTree == null)||(!authorizedOrganizationPropertyTree.isLeaf())))) {
                if (this.authorizedOrganization == null) {
                    _other.authorizedOrganization = null;
                } else {
                    _other.authorizedOrganization = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<ProfileDefinition.AuthorizedOrganizations.Builder<_B>>>();
                    for (ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization _item: this.authorizedOrganization) {
                        _other.authorizedOrganization.add(((_item == null)?null:_item.newCopyBuilder(_other, authorizedOrganizationPropertyTree, _propertyTreeUse)));
                    }
                }
            }
        }

        public<_B >ProfileDefinition.AuthorizedOrganizations.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return new ProfileDefinition.AuthorizedOrganizations.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
        }

        public ProfileDefinition.AuthorizedOrganizations.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
        }

        public static<_B >ProfileDefinition.AuthorizedOrganizations.Builder<_B> copyOf(final ProfileDefinition.AuthorizedOrganizations _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final ProfileDefinition.AuthorizedOrganizations.Builder<_B> _newBuilder = new ProfileDefinition.AuthorizedOrganizations.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
            return _newBuilder;
        }

        public static ProfileDefinition.AuthorizedOrganizations.Builder<Void> copyExcept(final ProfileDefinition.AuthorizedOrganizations _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
        }

        public static ProfileDefinition.AuthorizedOrganizations.Builder<Void> copyOnly(final ProfileDefinition.AuthorizedOrganizations _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;extension base="{}Id"&gt;
         *       &lt;sequence&gt;
         *         &lt;element ref="{}knowledgeRequestServiceLocation" minOccurs="0"/&gt;
         *         &lt;element name="accessMethod" maxOccurs="unbounded" minOccurs="0"&gt;
         *           &lt;complexType&gt;
         *             &lt;complexContent&gt;
         *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *                 &lt;sequence&gt;
         *                   &lt;element name="networkAccessMethod" type="{}CD" minOccurs="0"/&gt;
         *                   &lt;element name="authenticationMethod"&gt;
         *                     &lt;complexType&gt;
         *                       &lt;complexContent&gt;
         *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *                           &lt;choice&gt;
         *                             &lt;element name="ip"&gt;
         *                               &lt;complexType&gt;
         *                                 &lt;complexContent&gt;
         *                                   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *                                     &lt;sequence&gt;
         *                                       &lt;element name="ipRange" type="{http://www.w3.org/2001/XMLSchema}anyType" maxOccurs="unbounded"/&gt;
         *                                     &lt;/sequence&gt;
         *                                   &lt;/restriction&gt;
         *                                 &lt;/complexContent&gt;
         *                               &lt;/complexType&gt;
         *                             &lt;/element&gt;
         *                             &lt;element name="usrPwd"&gt;
         *                               &lt;complexType&gt;
         *                                 &lt;complexContent&gt;
         *                                   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *                                     &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
         *                                     &lt;attribute name="certificateText" use="required" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
         *                                   &lt;/restriction&gt;
         *                                 &lt;/complexContent&gt;
         *                               &lt;/complexType&gt;
         *                             &lt;/element&gt;
         *                           &lt;/choice&gt;
         *                         &lt;/restriction&gt;
         *                       &lt;/complexContent&gt;
         *                     &lt;/complexType&gt;
         *                   &lt;/element&gt;
         *                 &lt;/sequence&gt;
         *               &lt;/restriction&gt;
         *             &lt;/complexContent&gt;
         *           &lt;/complexType&gt;
         *         &lt;/element&gt;
         *       &lt;/sequence&gt;
         *       &lt;attribute name="usesAssignedAuthorizedPerson" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
         *     &lt;/extension&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "knowledgeRequestServiceLocation",
            "accessMethod"
        })
        public static class AuthorizedOrganization
            extends Id
        {

            protected KnowledgeRequestServiceLocation knowledgeRequestServiceLocation;
            protected List<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod> accessMethod;
            @XmlAttribute(name = "usesAssignedAuthorizedPerson")
            protected Boolean usesAssignedAuthorizedPerson;

            /**
             * Gets the value of the knowledgeRequestServiceLocation property.
             * 
             * @return
             *     possible object is
             *     {@link KnowledgeRequestServiceLocation }
             *     
             */
            public KnowledgeRequestServiceLocation getKnowledgeRequestServiceLocation() {
                return knowledgeRequestServiceLocation;
            }

            /**
             * Sets the value of the knowledgeRequestServiceLocation property.
             * 
             * @param value
             *     allowed object is
             *     {@link KnowledgeRequestServiceLocation }
             *     
             */
            public void setKnowledgeRequestServiceLocation(KnowledgeRequestServiceLocation value) {
                this.knowledgeRequestServiceLocation = value;
            }

            /**
             * Gets the value of the accessMethod property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the accessMethod property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getAccessMethod().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod }
             * 
             * 
             */
            public List<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod> getAccessMethod() {
                if (accessMethod == null) {
                    accessMethod = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod>();
                }
                return this.accessMethod;
            }

            /**
             * Gets the value of the usesAssignedAuthorizedPerson property.
             * 
             * @return
             *     possible object is
             *     {@link Boolean }
             *     
             */
            public Boolean isUsesAssignedAuthorizedPerson() {
                return usesAssignedAuthorizedPerson;
            }

            /**
             * Sets the value of the usesAssignedAuthorizedPerson property.
             * 
             * @param value
             *     allowed object is
             *     {@link Boolean }
             *     
             */
            public void setUsesAssignedAuthorizedPerson(Boolean value) {
                this.usesAssignedAuthorizedPerson = value;
            }

            /**
             * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
             * 
             * @param _other
             *     A builder instance to which the state of this object will be copied.
             */
            public<_B >void copyTo(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> _other) {
                super.copyTo(_other);
                _other.knowledgeRequestServiceLocation = ((this.knowledgeRequestServiceLocation == null)?null:this.knowledgeRequestServiceLocation.newCopyBuilder(_other));
                if (this.accessMethod == null) {
                    _other.accessMethod = null;
                } else {
                    _other.accessMethod = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>>>();
                    for (ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod _item: this.accessMethod) {
                        _other.accessMethod.add(((_item == null)?null:_item.newCopyBuilder(_other)));
                    }
                }
                _other.usesAssignedAuthorizedPerson = this.usesAssignedAuthorizedPerson;
            }

            @Override
            public<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
                return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>(_parentBuilder, this, true);
            }

            @Override
            public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<Void> newCopyBuilder() {
                return newCopyBuilder(null);
            }

            public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<Void> builder() {
                return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<Void>(null, null, false);
            }

            public static<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> copyOf(final Id _other) {
                final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> _newBuilder = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>(null, null, false);
                _other.copyTo(_newBuilder);
                return _newBuilder;
            }

            public static<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> copyOf(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization _other) {
                final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> _newBuilder = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>(null, null, false);
                _other.copyTo(_newBuilder);
                return _newBuilder;
            }

            /**
             * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
             * 
             * @param _other
             *     A builder instance to which the state of this object will be copied.
             */
            public<_B >void copyTo(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                super.copyTo(_other, _propertyTree, _propertyTreeUse);
                final PropertyTree knowledgeRequestServiceLocationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("knowledgeRequestServiceLocation"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(knowledgeRequestServiceLocationPropertyTree!= null):((knowledgeRequestServiceLocationPropertyTree == null)||(!knowledgeRequestServiceLocationPropertyTree.isLeaf())))) {
                    _other.knowledgeRequestServiceLocation = ((this.knowledgeRequestServiceLocation == null)?null:this.knowledgeRequestServiceLocation.newCopyBuilder(_other, knowledgeRequestServiceLocationPropertyTree, _propertyTreeUse));
                }
                final PropertyTree accessMethodPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("accessMethod"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(accessMethodPropertyTree!= null):((accessMethodPropertyTree == null)||(!accessMethodPropertyTree.isLeaf())))) {
                    if (this.accessMethod == null) {
                        _other.accessMethod = null;
                    } else {
                        _other.accessMethod = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>>>();
                        for (ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod _item: this.accessMethod) {
                            _other.accessMethod.add(((_item == null)?null:_item.newCopyBuilder(_other, accessMethodPropertyTree, _propertyTreeUse)));
                        }
                    }
                }
                final PropertyTree usesAssignedAuthorizedPersonPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("usesAssignedAuthorizedPerson"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(usesAssignedAuthorizedPersonPropertyTree!= null):((usesAssignedAuthorizedPersonPropertyTree == null)||(!usesAssignedAuthorizedPersonPropertyTree.isLeaf())))) {
                    _other.usesAssignedAuthorizedPerson = this.usesAssignedAuthorizedPerson;
                }
            }

            @Override
            public<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
            }

            @Override
            public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
            }

            public static<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> copyOf(final Id _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> _newBuilder = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>(null, null, false);
                _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
                return _newBuilder;
            }

            public static<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> copyOf(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> _newBuilder = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>(null, null, false);
                _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
                return _newBuilder;
            }

            public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<Void> copyExcept(final Id _other, final PropertyTree _propertyTree) {
                return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
            }

            public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<Void> copyExcept(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization _other, final PropertyTree _propertyTree) {
                return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
            }

            public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<Void> copyOnly(final Id _other, final PropertyTree _propertyTree) {
                return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
            }

            public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<Void> copyOnly(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization _other, final PropertyTree _propertyTree) {
                return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
            }


            /**
             * <p>Java class for anonymous complex type.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.
             * 
             * <pre>
             * &lt;complexType&gt;
             *   &lt;complexContent&gt;
             *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
             *       &lt;sequence&gt;
             *         &lt;element name="networkAccessMethod" type="{}CD" minOccurs="0"/&gt;
             *         &lt;element name="authenticationMethod"&gt;
             *           &lt;complexType&gt;
             *             &lt;complexContent&gt;
             *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
             *                 &lt;choice&gt;
             *                   &lt;element name="ip"&gt;
             *                     &lt;complexType&gt;
             *                       &lt;complexContent&gt;
             *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
             *                           &lt;sequence&gt;
             *                             &lt;element name="ipRange" type="{http://www.w3.org/2001/XMLSchema}anyType" maxOccurs="unbounded"/&gt;
             *                           &lt;/sequence&gt;
             *                         &lt;/restriction&gt;
             *                       &lt;/complexContent&gt;
             *                     &lt;/complexType&gt;
             *                   &lt;/element&gt;
             *                   &lt;element name="usrPwd"&gt;
             *                     &lt;complexType&gt;
             *                       &lt;complexContent&gt;
             *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
             *                           &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
             *                           &lt;attribute name="certificateText" use="required" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
             *                         &lt;/restriction&gt;
             *                       &lt;/complexContent&gt;
             *                     &lt;/complexType&gt;
             *                   &lt;/element&gt;
             *                 &lt;/choice&gt;
             *               &lt;/restriction&gt;
             *             &lt;/complexContent&gt;
             *           &lt;/complexType&gt;
             *         &lt;/element&gt;
             *       &lt;/sequence&gt;
             *     &lt;/restriction&gt;
             *   &lt;/complexContent&gt;
             * &lt;/complexType&gt;
             * </pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "networkAccessMethod",
                "authenticationMethod"
            })
            public static class AccessMethod {

                protected CD networkAccessMethod;
                @XmlElement(required = true)
                protected ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod authenticationMethod;

                /**
                 * Gets the value of the networkAccessMethod property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link CD }
                 *     
                 */
                public CD getNetworkAccessMethod() {
                    return networkAccessMethod;
                }

                /**
                 * Sets the value of the networkAccessMethod property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link CD }
                 *     
                 */
                public void setNetworkAccessMethod(CD value) {
                    this.networkAccessMethod = value;
                }

                /**
                 * Gets the value of the authenticationMethod property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod }
                 *     
                 */
                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod getAuthenticationMethod() {
                    return authenticationMethod;
                }

                /**
                 * Sets the value of the authenticationMethod property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod }
                 *     
                 */
                public void setAuthenticationMethod(ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod value) {
                    this.authenticationMethod = value;
                }

                /**
                 * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
                 * 
                 * @param _other
                 *     A builder instance to which the state of this object will be copied.
                 */
                public<_B >void copyTo(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B> _other) {
                    _other.networkAccessMethod = ((this.networkAccessMethod == null)?null:this.networkAccessMethod.newCopyBuilder(_other));
                    _other.authenticationMethod = ((this.authenticationMethod == null)?null:this.authenticationMethod.newCopyBuilder(_other));
                }

                public<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
                    return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B>(_parentBuilder, this, true);
                }

                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<Void> newCopyBuilder() {
                    return newCopyBuilder(null);
                }

                public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<Void> builder() {
                    return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<Void>(null, null, false);
                }

                public static<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B> copyOf(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod _other) {
                    final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B> _newBuilder = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B>(null, null, false);
                    _other.copyTo(_newBuilder);
                    return _newBuilder;
                }

                /**
                 * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
                 * 
                 * @param _other
                 *     A builder instance to which the state of this object will be copied.
                 */
                public<_B >void copyTo(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                    final PropertyTree networkAccessMethodPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("networkAccessMethod"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(networkAccessMethodPropertyTree!= null):((networkAccessMethodPropertyTree == null)||(!networkAccessMethodPropertyTree.isLeaf())))) {
                        _other.networkAccessMethod = ((this.networkAccessMethod == null)?null:this.networkAccessMethod.newCopyBuilder(_other, networkAccessMethodPropertyTree, _propertyTreeUse));
                    }
                    final PropertyTree authenticationMethodPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("authenticationMethod"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(authenticationMethodPropertyTree!= null):((authenticationMethodPropertyTree == null)||(!authenticationMethodPropertyTree.isLeaf())))) {
                        _other.authenticationMethod = ((this.authenticationMethod == null)?null:this.authenticationMethod.newCopyBuilder(_other, authenticationMethodPropertyTree, _propertyTreeUse));
                    }
                }

                public<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                    return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
                }

                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                    return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
                }

                public static<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B> copyOf(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                    final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B> _newBuilder = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B>(null, null, false);
                    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
                    return _newBuilder;
                }

                public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<Void> copyExcept(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod _other, final PropertyTree _propertyTree) {
                    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
                }

                public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<Void> copyOnly(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod _other, final PropertyTree _propertyTree) {
                    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
                }


                /**
                 * <p>Java class for anonymous complex type.
                 * 
                 * <p>The following schema fragment specifies the expected content contained within this class.
                 * 
                 * <pre>
                 * &lt;complexType&gt;
                 *   &lt;complexContent&gt;
                 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
                 *       &lt;choice&gt;
                 *         &lt;element name="ip"&gt;
                 *           &lt;complexType&gt;
                 *             &lt;complexContent&gt;
                 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
                 *                 &lt;sequence&gt;
                 *                   &lt;element name="ipRange" type="{http://www.w3.org/2001/XMLSchema}anyType" maxOccurs="unbounded"/&gt;
                 *                 &lt;/sequence&gt;
                 *               &lt;/restriction&gt;
                 *             &lt;/complexContent&gt;
                 *           &lt;/complexType&gt;
                 *         &lt;/element&gt;
                 *         &lt;element name="usrPwd"&gt;
                 *           &lt;complexType&gt;
                 *             &lt;complexContent&gt;
                 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
                 *                 &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
                 *                 &lt;attribute name="certificateText" use="required" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
                 *               &lt;/restriction&gt;
                 *             &lt;/complexContent&gt;
                 *           &lt;/complexType&gt;
                 *         &lt;/element&gt;
                 *       &lt;/choice&gt;
                 *     &lt;/restriction&gt;
                 *   &lt;/complexContent&gt;
                 * &lt;/complexType&gt;
                 * </pre>
                 * 
                 * 
                 */
                @XmlAccessorType(XmlAccessType.FIELD)
                @XmlType(name = "", propOrder = {
                    "ip",
                    "usrPwd"
                })
                public static class AuthenticationMethod {

                    protected ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip ip;
                    protected ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd usrPwd;

                    /**
                     * Gets the value of the ip property.
                     * 
                     * @return
                     *     possible object is
                     *     {@link ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip }
                     *     
                     */
                    public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip getIp() {
                        return ip;
                    }

                    /**
                     * Sets the value of the ip property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip }
                     *     
                     */
                    public void setIp(ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip value) {
                        this.ip = value;
                    }

                    /**
                     * Gets the value of the usrPwd property.
                     * 
                     * @return
                     *     possible object is
                     *     {@link ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd }
                     *     
                     */
                    public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd getUsrPwd() {
                        return usrPwd;
                    }

                    /**
                     * Sets the value of the usrPwd property.
                     * 
                     * @param value
                     *     allowed object is
                     *     {@link ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd }
                     *     
                     */
                    public void setUsrPwd(ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd value) {
                        this.usrPwd = value;
                    }

                    /**
                     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
                     * 
                     * @param _other
                     *     A builder instance to which the state of this object will be copied.
                     */
                    public<_B >void copyTo(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B> _other) {
                        _other.ip = ((this.ip == null)?null:this.ip.newCopyBuilder(_other));
                        _other.usrPwd = ((this.usrPwd == null)?null:this.usrPwd.newCopyBuilder(_other));
                    }

                    public<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
                        return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B>(_parentBuilder, this, true);
                    }

                    public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<Void> newCopyBuilder() {
                        return newCopyBuilder(null);
                    }

                    public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<Void> builder() {
                        return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<Void>(null, null, false);
                    }

                    public static<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B> copyOf(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod _other) {
                        final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B> _newBuilder = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B>(null, null, false);
                        _other.copyTo(_newBuilder);
                        return _newBuilder;
                    }

                    /**
                     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
                     * 
                     * @param _other
                     *     A builder instance to which the state of this object will be copied.
                     */
                    public<_B >void copyTo(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                        final PropertyTree ipPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("ip"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(ipPropertyTree!= null):((ipPropertyTree == null)||(!ipPropertyTree.isLeaf())))) {
                            _other.ip = ((this.ip == null)?null:this.ip.newCopyBuilder(_other, ipPropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree usrPwdPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("usrPwd"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(usrPwdPropertyTree!= null):((usrPwdPropertyTree == null)||(!usrPwdPropertyTree.isLeaf())))) {
                            _other.usrPwd = ((this.usrPwd == null)?null:this.usrPwd.newCopyBuilder(_other, usrPwdPropertyTree, _propertyTreeUse));
                        }
                    }

                    public<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                        return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
                    }

                    public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
                    }

                    public static<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B> copyOf(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                        final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B> _newBuilder = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B>(null, null, false);
                        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
                        return _newBuilder;
                    }

                    public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<Void> copyExcept(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod _other, final PropertyTree _propertyTree) {
                        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
                    }

                    public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<Void> copyOnly(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod _other, final PropertyTree _propertyTree) {
                        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
                    }

                    public static class Builder<_B >implements Buildable
                    {

                        protected final _B _parentBuilder;
                        protected final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod _storedValue;
                        private ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B>> ip;
                        private ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B>> usrPwd;

                        public Builder(final _B _parentBuilder, final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod _other, final boolean _copy) {
                            this._parentBuilder = _parentBuilder;
                            if (_other!= null) {
                                if (_copy) {
                                    _storedValue = null;
                                    this.ip = ((_other.ip == null)?null:_other.ip.newCopyBuilder(this));
                                    this.usrPwd = ((_other.usrPwd == null)?null:_other.usrPwd.newCopyBuilder(this));
                                } else {
                                    _storedValue = _other;
                                }
                            } else {
                                _storedValue = null;
                            }
                        }

                        public Builder(final _B _parentBuilder, final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                            this._parentBuilder = _parentBuilder;
                            if (_other!= null) {
                                if (_copy) {
                                    _storedValue = null;
                                    final PropertyTree ipPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("ip"));
                                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(ipPropertyTree!= null):((ipPropertyTree == null)||(!ipPropertyTree.isLeaf())))) {
                                        this.ip = ((_other.ip == null)?null:_other.ip.newCopyBuilder(this, ipPropertyTree, _propertyTreeUse));
                                    }
                                    final PropertyTree usrPwdPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("usrPwd"));
                                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(usrPwdPropertyTree!= null):((usrPwdPropertyTree == null)||(!usrPwdPropertyTree.isLeaf())))) {
                                        this.usrPwd = ((_other.usrPwd == null)?null:_other.usrPwd.newCopyBuilder(this, usrPwdPropertyTree, _propertyTreeUse));
                                    }
                                } else {
                                    _storedValue = _other;
                                }
                            } else {
                                _storedValue = null;
                            }
                        }

                        public _B end() {
                            return this._parentBuilder;
                        }

                        protected<_P extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod >_P init(final _P _product) {
                            _product.ip = ((this.ip == null)?null:this.ip.build());
                            _product.usrPwd = ((this.usrPwd == null)?null:this.usrPwd.build());
                            return _product;
                        }

                        /**
                         * Sets the new value of "ip" (any previous value will be replaced)
                         * 
                         * @param ip
                         *     New value of the "ip" property.
                         */
                        public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B> withIp(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip ip) {
                            this.ip = ((ip == null)?null:new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B>>(this, ip, false));
                            return this;
                        }

                        /**
                         * Returns a new builder to build the value of the "ip" property (replacing previous value).
                         * Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder#end()} to return to the current builder.
                         * 
                         * @return
                         *     A new builder to build the value of the "ip" property.
                         *     Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder#end()} to return to the current builder.
                         */
                        public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<? extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B>> withIp() {
                            return this.ip = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B>>(this, null, false);
                        }

                        /**
                         * Sets the new value of "usrPwd" (any previous value will be replaced)
                         * 
                         * @param usrPwd
                         *     New value of the "usrPwd" property.
                         */
                        public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B> withUsrPwd(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd usrPwd) {
                            this.usrPwd = ((usrPwd == null)?null:new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B>>(this, usrPwd, false));
                            return this;
                        }

                        /**
                         * Returns a new builder to build the value of the "usrPwd" property (replacing previous value).
                         * Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder#end()} to return to the current builder.
                         * 
                         * @return
                         *     A new builder to build the value of the "usrPwd" property.
                         *     Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder#end()} to return to the current builder.
                         */
                        public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<? extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B>> withUsrPwd() {
                            return this.usrPwd = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<_B>>(this, null, false);
                        }

                        @Override
                        public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod build() {
                            if (_storedValue == null) {
                                return this.init(new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod());
                            } else {
                                return ((ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod) _storedValue);
                            }
                        }

                    }


                    /**
                     * <p>Java class for anonymous complex type.
                     * 
                     * <p>The following schema fragment specifies the expected content contained within this class.
                     * 
                     * <pre>
                     * &lt;complexType&gt;
                     *   &lt;complexContent&gt;
                     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
                     *       &lt;sequence&gt;
                     *         &lt;element name="ipRange" type="{http://www.w3.org/2001/XMLSchema}anyType" maxOccurs="unbounded"/&gt;
                     *       &lt;/sequence&gt;
                     *     &lt;/restriction&gt;
                     *   &lt;/complexContent&gt;
                     * &lt;/complexType&gt;
                     * </pre>
                     * 
                     * 
                     */
                    @XmlAccessorType(XmlAccessType.FIELD)
                    @XmlType(name = "", propOrder = {
                        "ipRange"
                    })
                    public static class Ip {

                        @XmlElement(required = true)
                        protected List<Object> ipRange;

                        /**
                         * Gets the value of the ipRange property.
                         * 
                         * <p>
                         * This accessor method returns a reference to the live list,
                         * not a snapshot. Therefore any modification you make to the
                         * returned list will be present inside the JAXB object.
                         * This is why there is not a <CODE>set</CODE> method for the ipRange property.
                         * 
                         * <p>
                         * For example, to add a new item, do as follows:
                         * <pre>
                         *    getIpRange().add(newItem);
                         * </pre>
                         * 
                         * 
                         * <p>
                         * Objects of the following type(s) are allowed in the list
                         * {@link Object }
                         * 
                         * 
                         */
                        public List<Object> getIpRange() {
                            if (ipRange == null) {
                                ipRange = new ArrayList<Object>();
                            }
                            return this.ipRange;
                        }

                        /**
                         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
                         * 
                         * @param _other
                         *     A builder instance to which the state of this object will be copied.
                         */
                        public<_B >void copyTo(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B> _other) {
                            if (this.ipRange == null) {
                                _other.ipRange = null;
                            } else {
                                _other.ipRange = new ArrayList<Buildable>();
                                for (Object _item: this.ipRange) {
                                    _other.ipRange.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                                }
                            }
                        }

                        public<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
                            return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B>(_parentBuilder, this, true);
                        }

                        public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<Void> newCopyBuilder() {
                            return newCopyBuilder(null);
                        }

                        public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<Void> builder() {
                            return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<Void>(null, null, false);
                        }

                        public static<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B> copyOf(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip _other) {
                            final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B> _newBuilder = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B>(null, null, false);
                            _other.copyTo(_newBuilder);
                            return _newBuilder;
                        }

                        /**
                         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
                         * 
                         * @param _other
                         *     A builder instance to which the state of this object will be copied.
                         */
                        public<_B >void copyTo(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                            final PropertyTree ipRangePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("ipRange"));
                            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(ipRangePropertyTree!= null):((ipRangePropertyTree == null)||(!ipRangePropertyTree.isLeaf())))) {
                                if (this.ipRange == null) {
                                    _other.ipRange = null;
                                } else {
                                    _other.ipRange = new ArrayList<Buildable>();
                                    for (Object _item: this.ipRange) {
                                        _other.ipRange.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                                    }
                                }
                            }
                        }

                        public<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                            return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
                        }

                        public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                            return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
                        }

                        public static<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B> copyOf(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                            final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B> _newBuilder = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B>(null, null, false);
                            _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
                            return _newBuilder;
                        }

                        public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<Void> copyExcept(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip _other, final PropertyTree _propertyTree) {
                            return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
                        }

                        public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<Void> copyOnly(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip _other, final PropertyTree _propertyTree) {
                            return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
                        }

                        public static class Builder<_B >implements Buildable
                        {

                            protected final _B _parentBuilder;
                            protected final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip _storedValue;
                            private List<Buildable> ipRange;

                            public Builder(final _B _parentBuilder, final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip _other, final boolean _copy) {
                                this._parentBuilder = _parentBuilder;
                                if (_other!= null) {
                                    if (_copy) {
                                        _storedValue = null;
                                        if (_other.ipRange == null) {
                                            this.ipRange = null;
                                        } else {
                                            this.ipRange = new ArrayList<Buildable>();
                                            for (Object _item: _other.ipRange) {
                                                this.ipRange.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                                            }
                                        }
                                    } else {
                                        _storedValue = _other;
                                    }
                                } else {
                                    _storedValue = null;
                                }
                            }

                            public Builder(final _B _parentBuilder, final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                                this._parentBuilder = _parentBuilder;
                                if (_other!= null) {
                                    if (_copy) {
                                        _storedValue = null;
                                        final PropertyTree ipRangePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("ipRange"));
                                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(ipRangePropertyTree!= null):((ipRangePropertyTree == null)||(!ipRangePropertyTree.isLeaf())))) {
                                            if (_other.ipRange == null) {
                                                this.ipRange = null;
                                            } else {
                                                this.ipRange = new ArrayList<Buildable>();
                                                for (Object _item: _other.ipRange) {
                                                    this.ipRange.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                                                }
                                            }
                                        }
                                    } else {
                                        _storedValue = _other;
                                    }
                                } else {
                                    _storedValue = null;
                                }
                            }

                            public _B end() {
                                return this._parentBuilder;
                            }

                            protected<_P extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip >_P init(final _P _product) {
                                if (this.ipRange!= null) {
                                    final List<Object> ipRange = new ArrayList<Object>(this.ipRange.size());
                                    for (Buildable _item: this.ipRange) {
                                        ipRange.add(((Object) _item.build()));
                                    }
                                    _product.ipRange = ipRange;
                                }
                                return _product;
                            }

                            /**
                             * Adds the given items to the value of "ipRange"
                             * 
                             * @param ipRange
                             *     Items to add to the value of the "ipRange" property
                             */
                            public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B> addIpRange(final Iterable<?> ipRange) {
                                if (ipRange!= null) {
                                    if (this.ipRange == null) {
                                        this.ipRange = new ArrayList<Buildable>();
                                    }
                                    for (Object _item: ipRange) {
                                        this.ipRange.add(new Buildable.PrimitiveBuildable(_item));
                                    }
                                }
                                return this;
                            }

                            /**
                             * Sets the new value of "ipRange" (any previous value will be replaced)
                             * 
                             * @param ipRange
                             *     New value of the "ipRange" property.
                             */
                            public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B> withIpRange(final Iterable<?> ipRange) {
                                if (this.ipRange!= null) {
                                    this.ipRange.clear();
                                }
                                return addIpRange(ipRange);
                            }

                            /**
                             * Adds the given items to the value of "ipRange"
                             * 
                             * @param ipRange
                             *     Items to add to the value of the "ipRange" property
                             */
                            public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B> addIpRange(Object... ipRange) {
                                addIpRange(Arrays.asList(ipRange));
                                return this;
                            }

                            /**
                             * Sets the new value of "ipRange" (any previous value will be replaced)
                             * 
                             * @param ipRange
                             *     New value of the "ipRange" property.
                             */
                            public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Builder<_B> withIpRange(Object... ipRange) {
                                withIpRange(Arrays.asList(ipRange));
                                return this;
                            }

                            @Override
                            public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip build() {
                                if (_storedValue == null) {
                                    return this.init(new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip());
                                } else {
                                    return ((ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip) _storedValue);
                                }
                            }

                        }

                        public static class Select
                            extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Selector<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Select, Void>
                        {


                            Select() {
                                super(null, null, null);
                            }

                            public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Select _root() {
                                return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Select();
                            }

                        }

                        public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
                            extends com.kscs.util.jaxb.Selector<TRoot, TParent>
                        {

                            private com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Selector<TRoot, TParent>> ipRange = null;

                            public Selector(final TRoot root, final TParent parent, final String propertyName) {
                                super(root, parent, propertyName);
                            }

                            @Override
                            public Map<String, PropertyTree> buildChildren() {
                                final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                                products.putAll(super.buildChildren());
                                if (this.ipRange!= null) {
                                    products.put("ipRange", this.ipRange.init());
                                }
                                return products;
                            }

                            public com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Selector<TRoot, TParent>> ipRange() {
                                return ((this.ipRange == null)?this.ipRange = new com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Selector<TRoot, TParent>>(this._root, this, "ipRange"):this.ipRange);
                            }

                        }

                    }

                    public static class Select
                        extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Selector<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Select, Void>
                    {


                        Select() {
                            super(null, null, null);
                        }

                        public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Select _root() {
                            return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Select();
                        }

                    }

                    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
                        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
                    {

                        private ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Selector<TRoot, TParent>> ip = null;
                        private ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Selector<TRoot, TParent>> usrPwd = null;

                        public Selector(final TRoot root, final TParent parent, final String propertyName) {
                            super(root, parent, propertyName);
                        }

                        @Override
                        public Map<String, PropertyTree> buildChildren() {
                            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                            products.putAll(super.buildChildren());
                            if (this.ip!= null) {
                                products.put("ip", this.ip.init());
                            }
                            if (this.usrPwd!= null) {
                                products.put("usrPwd", this.usrPwd.init());
                            }
                            return products;
                        }

                        public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Selector<TRoot, TParent>> ip() {
                            return ((this.ip == null)?this.ip = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Ip.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Selector<TRoot, TParent>>(this._root, this, "ip"):this.ip);
                        }

                        public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Selector<TRoot, TParent>> usrPwd() {
                            return ((this.usrPwd == null)?this.usrPwd = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Selector<TRoot, TParent>>(this._root, this, "usrPwd"):this.usrPwd);
                        }

                    }


                    /**
                     * <p>Java class for anonymous complex type.
                     * 
                     * <p>The following schema fragment specifies the expected content contained within this class.
                     * 
                     * <pre>
                     * &lt;complexType&gt;
                     *   &lt;complexContent&gt;
                     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
                     *       &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
                     *       &lt;attribute name="certificateText" use="required" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
                     *     &lt;/restriction&gt;
                     *   &lt;/complexContent&gt;
                     * &lt;/complexType&gt;
                     * </pre>
                     * 
                     * 
                     */
                    @XmlAccessorType(XmlAccessType.FIELD)
                    @XmlType(name = "")
                    public static class UsrPwd {

                        @XmlAttribute(name = "name", required = true)
                        @XmlSchemaType(name = "anySimpleType")
                        protected String name;
                        @XmlAttribute(name = "certificateText", required = true)
                        @XmlSchemaType(name = "anySimpleType")
                        protected String certificateText;

                        /**
                         * Gets the value of the name property.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getName() {
                            return name;
                        }

                        /**
                         * Sets the value of the name property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         */
                        public void setName(String value) {
                            this.name = value;
                        }

                        /**
                         * Gets the value of the certificateText property.
                         * 
                         * @return
                         *     possible object is
                         *     {@link String }
                         *     
                         */
                        public String getCertificateText() {
                            return certificateText;
                        }

                        /**
                         * Sets the value of the certificateText property.
                         * 
                         * @param value
                         *     allowed object is
                         *     {@link String }
                         *     
                         */
                        public void setCertificateText(String value) {
                            this.certificateText = value;
                        }

                        /**
                         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
                         * 
                         * @param _other
                         *     A builder instance to which the state of this object will be copied.
                         */
                        public<_B >void copyTo(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<_B> _other) {
                            _other.name = this.name;
                            _other.certificateText = this.certificateText;
                        }

                        public<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
                            return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<_B>(_parentBuilder, this, true);
                        }

                        public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<Void> newCopyBuilder() {
                            return newCopyBuilder(null);
                        }

                        public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<Void> builder() {
                            return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<Void>(null, null, false);
                        }

                        public static<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<_B> copyOf(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd _other) {
                            final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<_B> _newBuilder = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<_B>(null, null, false);
                            _other.copyTo(_newBuilder);
                            return _newBuilder;
                        }

                        /**
                         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
                         * 
                         * @param _other
                         *     A builder instance to which the state of this object will be copied.
                         */
                        public<_B >void copyTo(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                            final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
                            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
                                _other.name = this.name;
                            }
                            final PropertyTree certificateTextPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("certificateText"));
                            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(certificateTextPropertyTree!= null):((certificateTextPropertyTree == null)||(!certificateTextPropertyTree.isLeaf())))) {
                                _other.certificateText = this.certificateText;
                            }
                        }

                        public<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                            return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
                        }

                        public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                            return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
                        }

                        public static<_B >ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<_B> copyOf(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                            final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<_B> _newBuilder = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<_B>(null, null, false);
                            _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
                            return _newBuilder;
                        }

                        public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<Void> copyExcept(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd _other, final PropertyTree _propertyTree) {
                            return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
                        }

                        public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<Void> copyOnly(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd _other, final PropertyTree _propertyTree) {
                            return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
                        }

                        public static class Builder<_B >implements Buildable
                        {

                            protected final _B _parentBuilder;
                            protected final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd _storedValue;
                            private String name;
                            private String certificateText;

                            public Builder(final _B _parentBuilder, final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd _other, final boolean _copy) {
                                this._parentBuilder = _parentBuilder;
                                if (_other!= null) {
                                    if (_copy) {
                                        _storedValue = null;
                                        this.name = _other.name;
                                        this.certificateText = _other.certificateText;
                                    } else {
                                        _storedValue = _other;
                                    }
                                } else {
                                    _storedValue = null;
                                }
                            }

                            public Builder(final _B _parentBuilder, final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                                this._parentBuilder = _parentBuilder;
                                if (_other!= null) {
                                    if (_copy) {
                                        _storedValue = null;
                                        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
                                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
                                            this.name = _other.name;
                                        }
                                        final PropertyTree certificateTextPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("certificateText"));
                                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(certificateTextPropertyTree!= null):((certificateTextPropertyTree == null)||(!certificateTextPropertyTree.isLeaf())))) {
                                            this.certificateText = _other.certificateText;
                                        }
                                    } else {
                                        _storedValue = _other;
                                    }
                                } else {
                                    _storedValue = null;
                                }
                            }

                            public _B end() {
                                return this._parentBuilder;
                            }

                            protected<_P extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd >_P init(final _P _product) {
                                _product.name = this.name;
                                _product.certificateText = this.certificateText;
                                return _product;
                            }

                            /**
                             * Sets the new value of "name" (any previous value will be replaced)
                             * 
                             * @param name
                             *     New value of the "name" property.
                             */
                            public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<_B> withName(final String name) {
                                this.name = name;
                                return this;
                            }

                            /**
                             * Sets the new value of "certificateText" (any previous value will be replaced)
                             * 
                             * @param certificateText
                             *     New value of the "certificateText" property.
                             */
                            public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Builder<_B> withCertificateText(final String certificateText) {
                                this.certificateText = certificateText;
                                return this;
                            }

                            @Override
                            public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd build() {
                                if (_storedValue == null) {
                                    return this.init(new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd());
                                } else {
                                    return ((ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd) _storedValue);
                                }
                            }

                        }

                        public static class Select
                            extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Selector<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Select, Void>
                        {


                            Select() {
                                super(null, null, null);
                            }

                            public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Select _root() {
                                return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Select();
                            }

                        }

                        public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
                            extends com.kscs.util.jaxb.Selector<TRoot, TParent>
                        {

                            private com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Selector<TRoot, TParent>> name = null;
                            private com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Selector<TRoot, TParent>> certificateText = null;

                            public Selector(final TRoot root, final TParent parent, final String propertyName) {
                                super(root, parent, propertyName);
                            }

                            @Override
                            public Map<String, PropertyTree> buildChildren() {
                                final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                                products.putAll(super.buildChildren());
                                if (this.name!= null) {
                                    products.put("name", this.name.init());
                                }
                                if (this.certificateText!= null) {
                                    products.put("certificateText", this.certificateText.init());
                                }
                                return products;
                            }

                            public com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Selector<TRoot, TParent>> name() {
                                return ((this.name == null)?this.name = new com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Selector<TRoot, TParent>>(this._root, this, "name"):this.name);
                            }

                            public com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Selector<TRoot, TParent>> certificateText() {
                                return ((this.certificateText == null)?this.certificateText = new com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.UsrPwd.Selector<TRoot, TParent>>(this._root, this, "certificateText"):this.certificateText);
                            }

                        }

                    }

                }

                public static class Builder<_B >implements Buildable
                {

                    protected final _B _parentBuilder;
                    protected final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod _storedValue;
                    private CD.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B>> networkAccessMethod;
                    private ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B>> authenticationMethod;

                    public Builder(final _B _parentBuilder, final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod _other, final boolean _copy) {
                        this._parentBuilder = _parentBuilder;
                        if (_other!= null) {
                            if (_copy) {
                                _storedValue = null;
                                this.networkAccessMethod = ((_other.networkAccessMethod == null)?null:_other.networkAccessMethod.newCopyBuilder(this));
                                this.authenticationMethod = ((_other.authenticationMethod == null)?null:_other.authenticationMethod.newCopyBuilder(this));
                            } else {
                                _storedValue = _other;
                            }
                        } else {
                            _storedValue = null;
                        }
                    }

                    public Builder(final _B _parentBuilder, final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                        this._parentBuilder = _parentBuilder;
                        if (_other!= null) {
                            if (_copy) {
                                _storedValue = null;
                                final PropertyTree networkAccessMethodPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("networkAccessMethod"));
                                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(networkAccessMethodPropertyTree!= null):((networkAccessMethodPropertyTree == null)||(!networkAccessMethodPropertyTree.isLeaf())))) {
                                    this.networkAccessMethod = ((_other.networkAccessMethod == null)?null:_other.networkAccessMethod.newCopyBuilder(this, networkAccessMethodPropertyTree, _propertyTreeUse));
                                }
                                final PropertyTree authenticationMethodPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("authenticationMethod"));
                                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(authenticationMethodPropertyTree!= null):((authenticationMethodPropertyTree == null)||(!authenticationMethodPropertyTree.isLeaf())))) {
                                    this.authenticationMethod = ((_other.authenticationMethod == null)?null:_other.authenticationMethod.newCopyBuilder(this, authenticationMethodPropertyTree, _propertyTreeUse));
                                }
                            } else {
                                _storedValue = _other;
                            }
                        } else {
                            _storedValue = null;
                        }
                    }

                    public _B end() {
                        return this._parentBuilder;
                    }

                    protected<_P extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod >_P init(final _P _product) {
                        _product.networkAccessMethod = ((this.networkAccessMethod == null)?null:this.networkAccessMethod.build());
                        _product.authenticationMethod = ((this.authenticationMethod == null)?null:this.authenticationMethod.build());
                        return _product;
                    }

                    /**
                     * Sets the new value of "networkAccessMethod" (any previous value will be replaced)
                     * 
                     * @param networkAccessMethod
                     *     New value of the "networkAccessMethod" property.
                     */
                    public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B> withNetworkAccessMethod(final CD networkAccessMethod) {
                        this.networkAccessMethod = ((networkAccessMethod == null)?null:new CD.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B>>(this, networkAccessMethod, false));
                        return this;
                    }

                    /**
                     * Returns a new builder to build the value of the "networkAccessMethod" property (replacing previous value).
                     * Use {@link org.openinfobutton.schemas.kb.CD.Builder#end()} to return to the current builder.
                     * 
                     * @return
                     *     A new builder to build the value of the "networkAccessMethod" property.
                     *     Use {@link org.openinfobutton.schemas.kb.CD.Builder#end()} to return to the current builder.
                     */
                    public CD.Builder<? extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B>> withNetworkAccessMethod() {
                        return this.networkAccessMethod = new CD.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B>>(this, null, false);
                    }

                    /**
                     * Sets the new value of "authenticationMethod" (any previous value will be replaced)
                     * 
                     * @param authenticationMethod
                     *     New value of the "authenticationMethod" property.
                     */
                    public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B> withAuthenticationMethod(final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod authenticationMethod) {
                        this.authenticationMethod = ((authenticationMethod == null)?null:new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B>>(this, authenticationMethod, false));
                        return this;
                    }

                    /**
                     * Returns a new builder to build the value of the "authenticationMethod" property (replacing previous value).
                     * Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder#end()} to return to the current builder.
                     * 
                     * @return
                     *     A new builder to build the value of the "authenticationMethod" property.
                     *     Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder#end()} to return to the current builder.
                     */
                    public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<? extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B>> withAuthenticationMethod() {
                        return this.authenticationMethod = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<_B>>(this, null, false);
                    }

                    @Override
                    public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod build() {
                        if (_storedValue == null) {
                            return this.init(new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod());
                        } else {
                            return ((ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod) _storedValue);
                        }
                    }

                }

                public static class Select
                    extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Selector<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Select, Void>
                {


                    Select() {
                        super(null, null, null);
                    }

                    public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Select _root() {
                        return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Select();
                    }

                }

                public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
                    extends com.kscs.util.jaxb.Selector<TRoot, TParent>
                {

                    private CD.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Selector<TRoot, TParent>> networkAccessMethod = null;
                    private ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Selector<TRoot, TParent>> authenticationMethod = null;

                    public Selector(final TRoot root, final TParent parent, final String propertyName) {
                        super(root, parent, propertyName);
                    }

                    @Override
                    public Map<String, PropertyTree> buildChildren() {
                        final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                        products.putAll(super.buildChildren());
                        if (this.networkAccessMethod!= null) {
                            products.put("networkAccessMethod", this.networkAccessMethod.init());
                        }
                        if (this.authenticationMethod!= null) {
                            products.put("authenticationMethod", this.authenticationMethod.init());
                        }
                        return products;
                    }

                    public CD.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Selector<TRoot, TParent>> networkAccessMethod() {
                        return ((this.networkAccessMethod == null)?this.networkAccessMethod = new CD.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Selector<TRoot, TParent>>(this._root, this, "networkAccessMethod"):this.networkAccessMethod);
                    }

                    public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Selector<TRoot, TParent>> authenticationMethod() {
                        return ((this.authenticationMethod == null)?this.authenticationMethod = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.AuthenticationMethod.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Selector<TRoot, TParent>>(this._root, this, "authenticationMethod"):this.authenticationMethod);
                    }

                }

            }

            public static class Builder<_B >
                extends Id.Builder<_B>
                implements Buildable
            {

                private KnowledgeRequestServiceLocation.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>> knowledgeRequestServiceLocation;
                private List<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>>> accessMethod;
                private Boolean usesAssignedAuthorizedPerson;

                public Builder(final _B _parentBuilder, final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization _other, final boolean _copy) {
                    super(_parentBuilder, _other, _copy);
                    if (_other!= null) {
                        this.knowledgeRequestServiceLocation = ((_other.knowledgeRequestServiceLocation == null)?null:_other.knowledgeRequestServiceLocation.newCopyBuilder(this));
                        if (_other.accessMethod == null) {
                            this.accessMethod = null;
                        } else {
                            this.accessMethod = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>>>();
                            for (ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod _item: _other.accessMethod) {
                                this.accessMethod.add(((_item == null)?null:_item.newCopyBuilder(this)));
                            }
                        }
                        this.usesAssignedAuthorizedPerson = _other.usesAssignedAuthorizedPerson;
                    }
                }

                public Builder(final _B _parentBuilder, final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                    super(_parentBuilder, _other, _copy, _propertyTree, _propertyTreeUse);
                    if (_other!= null) {
                        final PropertyTree knowledgeRequestServiceLocationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("knowledgeRequestServiceLocation"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(knowledgeRequestServiceLocationPropertyTree!= null):((knowledgeRequestServiceLocationPropertyTree == null)||(!knowledgeRequestServiceLocationPropertyTree.isLeaf())))) {
                            this.knowledgeRequestServiceLocation = ((_other.knowledgeRequestServiceLocation == null)?null:_other.knowledgeRequestServiceLocation.newCopyBuilder(this, knowledgeRequestServiceLocationPropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree accessMethodPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("accessMethod"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(accessMethodPropertyTree!= null):((accessMethodPropertyTree == null)||(!accessMethodPropertyTree.isLeaf())))) {
                            if (_other.accessMethod == null) {
                                this.accessMethod = null;
                            } else {
                                this.accessMethod = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>>>();
                                for (ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod _item: _other.accessMethod) {
                                    this.accessMethod.add(((_item == null)?null:_item.newCopyBuilder(this, accessMethodPropertyTree, _propertyTreeUse)));
                                }
                            }
                        }
                        final PropertyTree usesAssignedAuthorizedPersonPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("usesAssignedAuthorizedPerson"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(usesAssignedAuthorizedPersonPropertyTree!= null):((usesAssignedAuthorizedPersonPropertyTree == null)||(!usesAssignedAuthorizedPersonPropertyTree.isLeaf())))) {
                            this.usesAssignedAuthorizedPerson = _other.usesAssignedAuthorizedPerson;
                        }
                    }
                }

                protected<_P extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization >_P init(final _P _product) {
                    _product.knowledgeRequestServiceLocation = ((this.knowledgeRequestServiceLocation == null)?null:this.knowledgeRequestServiceLocation.build());
                    if (this.accessMethod!= null) {
                        final List<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod> accessMethod = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod>(this.accessMethod.size());
                        for (ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>> _item: this.accessMethod) {
                            accessMethod.add(_item.build());
                        }
                        _product.accessMethod = accessMethod;
                    }
                    _product.usesAssignedAuthorizedPerson = this.usesAssignedAuthorizedPerson;
                    return super.init(_product);
                }

                /**
                 * Sets the new value of "knowledgeRequestServiceLocation" (any previous value will be replaced)
                 * 
                 * @param knowledgeRequestServiceLocation
                 *     New value of the "knowledgeRequestServiceLocation" property.
                 */
                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> withKnowledgeRequestServiceLocation(final KnowledgeRequestServiceLocation knowledgeRequestServiceLocation) {
                    this.knowledgeRequestServiceLocation = ((knowledgeRequestServiceLocation == null)?null:new KnowledgeRequestServiceLocation.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>>(this, knowledgeRequestServiceLocation, false));
                    return this;
                }

                /**
                 * Returns a new builder to build the value of the "knowledgeRequestServiceLocation" property (replacing previous value).
                 * Use {@link org.openinfobutton.schemas.kb.KnowledgeRequestServiceLocation.Builder#end()} to return to the current builder.
                 * 
                 * @return
                 *     A new builder to build the value of the "knowledgeRequestServiceLocation" property.
                 *     Use {@link org.openinfobutton.schemas.kb.KnowledgeRequestServiceLocation.Builder#end()} to return to the current builder.
                 */
                public KnowledgeRequestServiceLocation.Builder<? extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>> withKnowledgeRequestServiceLocation() {
                    return this.knowledgeRequestServiceLocation = new KnowledgeRequestServiceLocation.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>>(this, null, false);
                }

                /**
                 * Adds the given items to the value of "accessMethod"
                 * 
                 * @param accessMethod
                 *     Items to add to the value of the "accessMethod" property
                 */
                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> addAccessMethod(final Iterable<? extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod> accessMethod) {
                    if (accessMethod!= null) {
                        if (this.accessMethod == null) {
                            this.accessMethod = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>>>();
                        }
                        for (ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod _item: accessMethod) {
                            this.accessMethod.add(new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>>(this, _item, false));
                        }
                    }
                    return this;
                }

                /**
                 * Sets the new value of "accessMethod" (any previous value will be replaced)
                 * 
                 * @param accessMethod
                 *     New value of the "accessMethod" property.
                 */
                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> withAccessMethod(final Iterable<? extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod> accessMethod) {
                    if (this.accessMethod!= null) {
                        this.accessMethod.clear();
                    }
                    return addAccessMethod(accessMethod);
                }

                /**
                 * Adds the given items to the value of "accessMethod"
                 * 
                 * @param accessMethod
                 *     Items to add to the value of the "accessMethod" property
                 */
                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> addAccessMethod(ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod... accessMethod) {
                    addAccessMethod(Arrays.asList(accessMethod));
                    return this;
                }

                /**
                 * Sets the new value of "accessMethod" (any previous value will be replaced)
                 * 
                 * @param accessMethod
                 *     New value of the "accessMethod" property.
                 */
                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> withAccessMethod(ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod... accessMethod) {
                    withAccessMethod(Arrays.asList(accessMethod));
                    return this;
                }

                /**
                 * Returns a new builder to build an additional value of the "AccessMethod" property.
                 * Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder#end()} to return to the current builder.
                 * 
                 * @return
                 *     a new builder to build an additional value of the "AccessMethod" property.
                 *     Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder#end()} to return to the current builder.
                 */
                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<? extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>> addAccessMethod() {
                    if (this.accessMethod == null) {
                        this.accessMethod = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>>>();
                    }
                    final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>> accessMethod_Builder = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Builder<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B>>(this, null, false);
                    this.accessMethod.add(accessMethod_Builder);
                    return accessMethod_Builder;
                }

                /**
                 * Sets the new value of "usesAssignedAuthorizedPerson" (any previous value will be replaced)
                 * 
                 * @param usesAssignedAuthorizedPerson
                 *     New value of the "usesAssignedAuthorizedPerson" property.
                 */
                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> withUsesAssignedAuthorizedPerson(final Boolean usesAssignedAuthorizedPerson) {
                    this.usesAssignedAuthorizedPerson = usesAssignedAuthorizedPerson;
                    return this;
                }

                /**
                 * Sets the new value of "id" (any previous value will be replaced)
                 * 
                 * @param id
                 *     New value of the "id" property.
                 */
                @Override
                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> withId(final String id) {
                    super.withId(id);
                    return this;
                }

                /**
                 * Sets the new value of "name" (any previous value will be replaced)
                 * 
                 * @param name
                 *     New value of the "name" property.
                 */
                @Override
                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> withName(final String name) {
                    super.withName(name);
                    return this;
                }

                /**
                 * Sets the new value of "namespace" (any previous value will be replaced)
                 * 
                 * @param namespace
                 *     New value of the "namespace" property.
                 */
                @Override
                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<_B> withNamespace(final String namespace) {
                    super.withNamespace(namespace);
                    return this;
                }

                @Override
                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization build() {
                    if (_storedValue == null) {
                        return this.init(new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization());
                    } else {
                        return ((ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization) _storedValue);
                    }
                }

            }

            public static class Select
                extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Selector<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Select, Void>
            {


                Select() {
                    super(null, null, null);
                }

                public static ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Select _root() {
                    return new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Select();
                }

            }

            public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
                extends Id.Selector<TRoot, TParent>
            {

                private KnowledgeRequestServiceLocation.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Selector<TRoot, TParent>> knowledgeRequestServiceLocation = null;
                private ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Selector<TRoot, TParent>> accessMethod = null;
                private com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Selector<TRoot, TParent>> usesAssignedAuthorizedPerson = null;

                public Selector(final TRoot root, final TParent parent, final String propertyName) {
                    super(root, parent, propertyName);
                }

                @Override
                public Map<String, PropertyTree> buildChildren() {
                    final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                    products.putAll(super.buildChildren());
                    if (this.knowledgeRequestServiceLocation!= null) {
                        products.put("knowledgeRequestServiceLocation", this.knowledgeRequestServiceLocation.init());
                    }
                    if (this.accessMethod!= null) {
                        products.put("accessMethod", this.accessMethod.init());
                    }
                    if (this.usesAssignedAuthorizedPerson!= null) {
                        products.put("usesAssignedAuthorizedPerson", this.usesAssignedAuthorizedPerson.init());
                    }
                    return products;
                }

                public KnowledgeRequestServiceLocation.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Selector<TRoot, TParent>> knowledgeRequestServiceLocation() {
                    return ((this.knowledgeRequestServiceLocation == null)?this.knowledgeRequestServiceLocation = new KnowledgeRequestServiceLocation.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Selector<TRoot, TParent>>(this._root, this, "knowledgeRequestServiceLocation"):this.knowledgeRequestServiceLocation);
                }

                public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Selector<TRoot, TParent>> accessMethod() {
                    return ((this.accessMethod == null)?this.accessMethod = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.AccessMethod.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Selector<TRoot, TParent>>(this._root, this, "accessMethod"):this.accessMethod);
                }

                public com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Selector<TRoot, TParent>> usesAssignedAuthorizedPerson() {
                    return ((this.usesAssignedAuthorizedPerson == null)?this.usesAssignedAuthorizedPerson = new com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Selector<TRoot, TParent>>(this._root, this, "usesAssignedAuthorizedPerson"):this.usesAssignedAuthorizedPerson);
                }

            }

        }

        public static class Builder<_B >implements Buildable
        {

            protected final _B _parentBuilder;
            protected final ProfileDefinition.AuthorizedOrganizations _storedValue;
            private List<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<ProfileDefinition.AuthorizedOrganizations.Builder<_B>>> authorizedOrganization;

            public Builder(final _B _parentBuilder, final ProfileDefinition.AuthorizedOrganizations _other, final boolean _copy) {
                this._parentBuilder = _parentBuilder;
                if (_other!= null) {
                    if (_copy) {
                        _storedValue = null;
                        if (_other.authorizedOrganization == null) {
                            this.authorizedOrganization = null;
                        } else {
                            this.authorizedOrganization = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<ProfileDefinition.AuthorizedOrganizations.Builder<_B>>>();
                            for (ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization _item: _other.authorizedOrganization) {
                                this.authorizedOrganization.add(((_item == null)?null:_item.newCopyBuilder(this)));
                            }
                        }
                    } else {
                        _storedValue = _other;
                    }
                } else {
                    _storedValue = null;
                }
            }

            public Builder(final _B _parentBuilder, final ProfileDefinition.AuthorizedOrganizations _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                this._parentBuilder = _parentBuilder;
                if (_other!= null) {
                    if (_copy) {
                        _storedValue = null;
                        final PropertyTree authorizedOrganizationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("authorizedOrganization"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(authorizedOrganizationPropertyTree!= null):((authorizedOrganizationPropertyTree == null)||(!authorizedOrganizationPropertyTree.isLeaf())))) {
                            if (_other.authorizedOrganization == null) {
                                this.authorizedOrganization = null;
                            } else {
                                this.authorizedOrganization = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<ProfileDefinition.AuthorizedOrganizations.Builder<_B>>>();
                                for (ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization _item: _other.authorizedOrganization) {
                                    this.authorizedOrganization.add(((_item == null)?null:_item.newCopyBuilder(this, authorizedOrganizationPropertyTree, _propertyTreeUse)));
                                }
                            }
                        }
                    } else {
                        _storedValue = _other;
                    }
                } else {
                    _storedValue = null;
                }
            }

            public _B end() {
                return this._parentBuilder;
            }

            protected<_P extends ProfileDefinition.AuthorizedOrganizations >_P init(final _P _product) {
                if (this.authorizedOrganization!= null) {
                    final List<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization> authorizedOrganization = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization>(this.authorizedOrganization.size());
                    for (ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<ProfileDefinition.AuthorizedOrganizations.Builder<_B>> _item: this.authorizedOrganization) {
                        authorizedOrganization.add(_item.build());
                    }
                    _product.authorizedOrganization = authorizedOrganization;
                }
                return _product;
            }

            /**
             * Adds the given items to the value of "authorizedOrganization"
             * 
             * @param authorizedOrganization
             *     Items to add to the value of the "authorizedOrganization" property
             */
            public ProfileDefinition.AuthorizedOrganizations.Builder<_B> addAuthorizedOrganization(final Iterable<? extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization> authorizedOrganization) {
                if (authorizedOrganization!= null) {
                    if (this.authorizedOrganization == null) {
                        this.authorizedOrganization = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<ProfileDefinition.AuthorizedOrganizations.Builder<_B>>>();
                    }
                    for (ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization _item: authorizedOrganization) {
                        this.authorizedOrganization.add(new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<ProfileDefinition.AuthorizedOrganizations.Builder<_B>>(this, _item, false));
                    }
                }
                return this;
            }

            /**
             * Sets the new value of "authorizedOrganization" (any previous value will be replaced)
             * 
             * @param authorizedOrganization
             *     New value of the "authorizedOrganization" property.
             */
            public ProfileDefinition.AuthorizedOrganizations.Builder<_B> withAuthorizedOrganization(final Iterable<? extends ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization> authorizedOrganization) {
                if (this.authorizedOrganization!= null) {
                    this.authorizedOrganization.clear();
                }
                return addAuthorizedOrganization(authorizedOrganization);
            }

            /**
             * Adds the given items to the value of "authorizedOrganization"
             * 
             * @param authorizedOrganization
             *     Items to add to the value of the "authorizedOrganization" property
             */
            public ProfileDefinition.AuthorizedOrganizations.Builder<_B> addAuthorizedOrganization(ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization... authorizedOrganization) {
                addAuthorizedOrganization(Arrays.asList(authorizedOrganization));
                return this;
            }

            /**
             * Sets the new value of "authorizedOrganization" (any previous value will be replaced)
             * 
             * @param authorizedOrganization
             *     New value of the "authorizedOrganization" property.
             */
            public ProfileDefinition.AuthorizedOrganizations.Builder<_B> withAuthorizedOrganization(ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization... authorizedOrganization) {
                withAuthorizedOrganization(Arrays.asList(authorizedOrganization));
                return this;
            }

            /**
             * Returns a new builder to build an additional value of the "AuthorizedOrganization" property.
             * Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder#end()} to return to the current builder.
             * 
             * @return
             *     a new builder to build an additional value of the "AuthorizedOrganization" property.
             *     Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder#end()} to return to the current builder.
             */
            public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<? extends ProfileDefinition.AuthorizedOrganizations.Builder<_B>> addAuthorizedOrganization() {
                if (this.authorizedOrganization == null) {
                    this.authorizedOrganization = new ArrayList<ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<ProfileDefinition.AuthorizedOrganizations.Builder<_B>>>();
                }
                final ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<ProfileDefinition.AuthorizedOrganizations.Builder<_B>> authorizedOrganization_Builder = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Builder<ProfileDefinition.AuthorizedOrganizations.Builder<_B>>(this, null, false);
                this.authorizedOrganization.add(authorizedOrganization_Builder);
                return authorizedOrganization_Builder;
            }

            @Override
            public ProfileDefinition.AuthorizedOrganizations build() {
                if (_storedValue == null) {
                    return this.init(new ProfileDefinition.AuthorizedOrganizations());
                } else {
                    return ((ProfileDefinition.AuthorizedOrganizations) _storedValue);
                }
            }

        }

        public static class Select
            extends ProfileDefinition.AuthorizedOrganizations.Selector<ProfileDefinition.AuthorizedOrganizations.Select, Void>
        {


            Select() {
                super(null, null, null);
            }

            public static ProfileDefinition.AuthorizedOrganizations.Select _root() {
                return new ProfileDefinition.AuthorizedOrganizations.Select();
            }

        }

        public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
            extends com.kscs.util.jaxb.Selector<TRoot, TParent>
        {

            private ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.Selector<TRoot, TParent>> authorizedOrganization = null;

            public Selector(final TRoot root, final TParent parent, final String propertyName) {
                super(root, parent, propertyName);
            }

            @Override
            public Map<String, PropertyTree> buildChildren() {
                final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                products.putAll(super.buildChildren());
                if (this.authorizedOrganization!= null) {
                    products.put("authorizedOrganization", this.authorizedOrganization.init());
                }
                return products;
            }

            public ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.Selector<TRoot, TParent>> authorizedOrganization() {
                return ((this.authorizedOrganization == null)?this.authorizedOrganization = new ProfileDefinition.AuthorizedOrganizations.AuthorizedOrganization.Selector<TRoot, ProfileDefinition.AuthorizedOrganizations.Selector<TRoot, TParent>>(this._root, this, "authorizedOrganization"):this.authorizedOrganization);
            }

        }

    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        protected final ProfileDefinition _storedValue;
        private ProfileDefinition.AuthorizedOrganizations.Builder<ProfileDefinition.Builder<_B>> authorizedOrganizations;
        private ProfileDefinition.SupportedTerminologies.Builder<ProfileDefinition.Builder<_B>> supportedTerminologies;
        private ProfileDefinition.Contexts.Builder<ProfileDefinition.Builder<_B>> contexts;
        private boolean hl7URLCompliant;
        private boolean hl7KnowledgeResponseCompliant;
        private String urlStyle;

        public Builder(final _B _parentBuilder, final ProfileDefinition _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    this.authorizedOrganizations = ((_other.authorizedOrganizations == null)?null:_other.authorizedOrganizations.newCopyBuilder(this));
                    this.supportedTerminologies = ((_other.supportedTerminologies == null)?null:_other.supportedTerminologies.newCopyBuilder(this));
                    this.contexts = ((_other.contexts == null)?null:_other.contexts.newCopyBuilder(this));
                    this.hl7URLCompliant = _other.hl7URLCompliant;
                    this.hl7KnowledgeResponseCompliant = _other.hl7KnowledgeResponseCompliant;
                    this.urlStyle = _other.urlStyle;
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public Builder(final _B _parentBuilder, final ProfileDefinition _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    final PropertyTree authorizedOrganizationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("authorizedOrganizations"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(authorizedOrganizationsPropertyTree!= null):((authorizedOrganizationsPropertyTree == null)||(!authorizedOrganizationsPropertyTree.isLeaf())))) {
                        this.authorizedOrganizations = ((_other.authorizedOrganizations == null)?null:_other.authorizedOrganizations.newCopyBuilder(this, authorizedOrganizationsPropertyTree, _propertyTreeUse));
                    }
                    final PropertyTree supportedTerminologiesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("supportedTerminologies"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(supportedTerminologiesPropertyTree!= null):((supportedTerminologiesPropertyTree == null)||(!supportedTerminologiesPropertyTree.isLeaf())))) {
                        this.supportedTerminologies = ((_other.supportedTerminologies == null)?null:_other.supportedTerminologies.newCopyBuilder(this, supportedTerminologiesPropertyTree, _propertyTreeUse));
                    }
                    final PropertyTree contextsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contexts"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contextsPropertyTree!= null):((contextsPropertyTree == null)||(!contextsPropertyTree.isLeaf())))) {
                        this.contexts = ((_other.contexts == null)?null:_other.contexts.newCopyBuilder(this, contextsPropertyTree, _propertyTreeUse));
                    }
                    final PropertyTree hl7URLCompliantPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("hl7URLCompliant"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hl7URLCompliantPropertyTree!= null):((hl7URLCompliantPropertyTree == null)||(!hl7URLCompliantPropertyTree.isLeaf())))) {
                        this.hl7URLCompliant = _other.hl7URLCompliant;
                    }
                    final PropertyTree hl7KnowledgeResponseCompliantPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("hl7KnowledgeResponseCompliant"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hl7KnowledgeResponseCompliantPropertyTree!= null):((hl7KnowledgeResponseCompliantPropertyTree == null)||(!hl7KnowledgeResponseCompliantPropertyTree.isLeaf())))) {
                        this.hl7KnowledgeResponseCompliant = _other.hl7KnowledgeResponseCompliant;
                    }
                    final PropertyTree urlStylePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("urlStyle"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(urlStylePropertyTree!= null):((urlStylePropertyTree == null)||(!urlStylePropertyTree.isLeaf())))) {
                        this.urlStyle = _other.urlStyle;
                    }
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends ProfileDefinition >_P init(final _P _product) {
            _product.authorizedOrganizations = ((this.authorizedOrganizations == null)?null:this.authorizedOrganizations.build());
            _product.supportedTerminologies = ((this.supportedTerminologies == null)?null:this.supportedTerminologies.build());
            _product.contexts = ((this.contexts == null)?null:this.contexts.build());
            _product.hl7URLCompliant = this.hl7URLCompliant;
            _product.hl7KnowledgeResponseCompliant = this.hl7KnowledgeResponseCompliant;
            _product.urlStyle = this.urlStyle;
            return _product;
        }

        /**
         * Sets the new value of "authorizedOrganizations" (any previous value will be replaced)
         * 
         * @param authorizedOrganizations
         *     New value of the "authorizedOrganizations" property.
         */
        public ProfileDefinition.Builder<_B> withAuthorizedOrganizations(final ProfileDefinition.AuthorizedOrganizations authorizedOrganizations) {
            this.authorizedOrganizations = ((authorizedOrganizations == null)?null:new ProfileDefinition.AuthorizedOrganizations.Builder<ProfileDefinition.Builder<_B>>(this, authorizedOrganizations, false));
            return this;
        }

        /**
         * Returns a new builder to build the value of the "authorizedOrganizations" property (replacing previous value).
         * Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.AuthorizedOrganizations.Builder#end()} to return to the current builder.
         * 
         * @return
         *     A new builder to build the value of the "authorizedOrganizations" property.
         *     Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.AuthorizedOrganizations.Builder#end()} to return to the current builder.
         */
        public ProfileDefinition.AuthorizedOrganizations.Builder<? extends ProfileDefinition.Builder<_B>> withAuthorizedOrganizations() {
            return this.authorizedOrganizations = new ProfileDefinition.AuthorizedOrganizations.Builder<ProfileDefinition.Builder<_B>>(this, null, false);
        }

        /**
         * Sets the new value of "supportedTerminologies" (any previous value will be replaced)
         * 
         * @param supportedTerminologies
         *     New value of the "supportedTerminologies" property.
         */
        public ProfileDefinition.Builder<_B> withSupportedTerminologies(final ProfileDefinition.SupportedTerminologies supportedTerminologies) {
            this.supportedTerminologies = ((supportedTerminologies == null)?null:new ProfileDefinition.SupportedTerminologies.Builder<ProfileDefinition.Builder<_B>>(this, supportedTerminologies, false));
            return this;
        }

        /**
         * Returns a new builder to build the value of the "supportedTerminologies" property (replacing previous value).
         * Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.SupportedTerminologies.Builder#end()} to return to the current builder.
         * 
         * @return
         *     A new builder to build the value of the "supportedTerminologies" property.
         *     Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.SupportedTerminologies.Builder#end()} to return to the current builder.
         */
        public ProfileDefinition.SupportedTerminologies.Builder<? extends ProfileDefinition.Builder<_B>> withSupportedTerminologies() {
            return this.supportedTerminologies = new ProfileDefinition.SupportedTerminologies.Builder<ProfileDefinition.Builder<_B>>(this, null, false);
        }

        /**
         * Sets the new value of "contexts" (any previous value will be replaced)
         * 
         * @param contexts
         *     New value of the "contexts" property.
         */
        public ProfileDefinition.Builder<_B> withContexts(final ProfileDefinition.Contexts contexts) {
            this.contexts = ((contexts == null)?null:new ProfileDefinition.Contexts.Builder<ProfileDefinition.Builder<_B>>(this, contexts, false));
            return this;
        }

        /**
         * Returns a new builder to build the value of the "contexts" property (replacing previous value).
         * Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.Contexts.Builder#end()} to return to the current builder.
         * 
         * @return
         *     A new builder to build the value of the "contexts" property.
         *     Use {@link org.openinfobutton.schemas.kb.ProfileDefinition.Contexts.Builder#end()} to return to the current builder.
         */
        public ProfileDefinition.Contexts.Builder<? extends ProfileDefinition.Builder<_B>> withContexts() {
            return this.contexts = new ProfileDefinition.Contexts.Builder<ProfileDefinition.Builder<_B>>(this, null, false);
        }

        /**
         * Sets the new value of "hl7URLCompliant" (any previous value will be replaced)
         * 
         * @param hl7URLCompliant
         *     New value of the "hl7URLCompliant" property.
         */
        public ProfileDefinition.Builder<_B> withHl7URLCompliant(final boolean hl7URLCompliant) {
            this.hl7URLCompliant = hl7URLCompliant;
            return this;
        }

        /**
         * Sets the new value of "hl7KnowledgeResponseCompliant" (any previous value will be replaced)
         * 
         * @param hl7KnowledgeResponseCompliant
         *     New value of the "hl7KnowledgeResponseCompliant" property.
         */
        public ProfileDefinition.Builder<_B> withHl7KnowledgeResponseCompliant(final boolean hl7KnowledgeResponseCompliant) {
            this.hl7KnowledgeResponseCompliant = hl7KnowledgeResponseCompliant;
            return this;
        }

        /**
         * Sets the new value of "urlStyle" (any previous value will be replaced)
         * 
         * @param urlStyle
         *     New value of the "urlStyle" property.
         */
        public ProfileDefinition.Builder<_B> withUrlStyle(final String urlStyle) {
            this.urlStyle = urlStyle;
            return this;
        }

        @Override
        public ProfileDefinition build() {
            if (_storedValue == null) {
                return this.init(new ProfileDefinition());
            } else {
                return ((ProfileDefinition) _storedValue);
            }
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="context" type="{}Context" maxOccurs="unbounded"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "context"
    })
    public static class Contexts {

        @XmlElement(required = true)
        protected List<Context> context;

        /**
         * Gets the value of the context property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the context property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getContext().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Context }
         * 
         * 
         */
        public List<Context> getContext() {
            if (context == null) {
                context = new ArrayList<Context>();
            }
            return this.context;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final ProfileDefinition.Contexts.Builder<_B> _other) {
            if (this.context == null) {
                _other.context = null;
            } else {
                _other.context = new ArrayList<Context.Builder<ProfileDefinition.Contexts.Builder<_B>>>();
                for (Context _item: this.context) {
                    _other.context.add(((_item == null)?null:_item.newCopyBuilder(_other)));
                }
            }
        }

        public<_B >ProfileDefinition.Contexts.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
            return new ProfileDefinition.Contexts.Builder<_B>(_parentBuilder, this, true);
        }

        public ProfileDefinition.Contexts.Builder<Void> newCopyBuilder() {
            return newCopyBuilder(null);
        }

        public static ProfileDefinition.Contexts.Builder<Void> builder() {
            return new ProfileDefinition.Contexts.Builder<Void>(null, null, false);
        }

        public static<_B >ProfileDefinition.Contexts.Builder<_B> copyOf(final ProfileDefinition.Contexts _other) {
            final ProfileDefinition.Contexts.Builder<_B> _newBuilder = new ProfileDefinition.Contexts.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder);
            return _newBuilder;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final ProfileDefinition.Contexts.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final PropertyTree contextPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("context"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contextPropertyTree!= null):((contextPropertyTree == null)||(!contextPropertyTree.isLeaf())))) {
                if (this.context == null) {
                    _other.context = null;
                } else {
                    _other.context = new ArrayList<Context.Builder<ProfileDefinition.Contexts.Builder<_B>>>();
                    for (Context _item: this.context) {
                        _other.context.add(((_item == null)?null:_item.newCopyBuilder(_other, contextPropertyTree, _propertyTreeUse)));
                    }
                }
            }
        }

        public<_B >ProfileDefinition.Contexts.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return new ProfileDefinition.Contexts.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
        }

        public ProfileDefinition.Contexts.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
        }

        public static<_B >ProfileDefinition.Contexts.Builder<_B> copyOf(final ProfileDefinition.Contexts _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final ProfileDefinition.Contexts.Builder<_B> _newBuilder = new ProfileDefinition.Contexts.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
            return _newBuilder;
        }

        public static ProfileDefinition.Contexts.Builder<Void> copyExcept(final ProfileDefinition.Contexts _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
        }

        public static ProfileDefinition.Contexts.Builder<Void> copyOnly(final ProfileDefinition.Contexts _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
        }

        public static class Builder<_B >implements Buildable
        {

            protected final _B _parentBuilder;
            protected final ProfileDefinition.Contexts _storedValue;
            private List<Context.Builder<ProfileDefinition.Contexts.Builder<_B>>> context;

            public Builder(final _B _parentBuilder, final ProfileDefinition.Contexts _other, final boolean _copy) {
                this._parentBuilder = _parentBuilder;
                if (_other!= null) {
                    if (_copy) {
                        _storedValue = null;
                        if (_other.context == null) {
                            this.context = null;
                        } else {
                            this.context = new ArrayList<Context.Builder<ProfileDefinition.Contexts.Builder<_B>>>();
                            for (Context _item: _other.context) {
                                this.context.add(((_item == null)?null:_item.newCopyBuilder(this)));
                            }
                        }
                    } else {
                        _storedValue = _other;
                    }
                } else {
                    _storedValue = null;
                }
            }

            public Builder(final _B _parentBuilder, final ProfileDefinition.Contexts _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                this._parentBuilder = _parentBuilder;
                if (_other!= null) {
                    if (_copy) {
                        _storedValue = null;
                        final PropertyTree contextPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("context"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contextPropertyTree!= null):((contextPropertyTree == null)||(!contextPropertyTree.isLeaf())))) {
                            if (_other.context == null) {
                                this.context = null;
                            } else {
                                this.context = new ArrayList<Context.Builder<ProfileDefinition.Contexts.Builder<_B>>>();
                                for (Context _item: _other.context) {
                                    this.context.add(((_item == null)?null:_item.newCopyBuilder(this, contextPropertyTree, _propertyTreeUse)));
                                }
                            }
                        }
                    } else {
                        _storedValue = _other;
                    }
                } else {
                    _storedValue = null;
                }
            }

            public _B end() {
                return this._parentBuilder;
            }

            protected<_P extends ProfileDefinition.Contexts >_P init(final _P _product) {
                if (this.context!= null) {
                    final List<Context> context = new ArrayList<Context>(this.context.size());
                    for (Context.Builder<ProfileDefinition.Contexts.Builder<_B>> _item: this.context) {
                        context.add(_item.build());
                    }
                    _product.context = context;
                }
                return _product;
            }

            /**
             * Adds the given items to the value of "context"
             * 
             * @param context
             *     Items to add to the value of the "context" property
             */
            public ProfileDefinition.Contexts.Builder<_B> addContext(final Iterable<? extends Context> context) {
                if (context!= null) {
                    if (this.context == null) {
                        this.context = new ArrayList<Context.Builder<ProfileDefinition.Contexts.Builder<_B>>>();
                    }
                    for (Context _item: context) {
                        this.context.add(new Context.Builder<ProfileDefinition.Contexts.Builder<_B>>(this, _item, false));
                    }
                }
                return this;
            }

            /**
             * Sets the new value of "context" (any previous value will be replaced)
             * 
             * @param context
             *     New value of the "context" property.
             */
            public ProfileDefinition.Contexts.Builder<_B> withContext(final Iterable<? extends Context> context) {
                if (this.context!= null) {
                    this.context.clear();
                }
                return addContext(context);
            }

            /**
             * Adds the given items to the value of "context"
             * 
             * @param context
             *     Items to add to the value of the "context" property
             */
            public ProfileDefinition.Contexts.Builder<_B> addContext(Context... context) {
                addContext(Arrays.asList(context));
                return this;
            }

            /**
             * Sets the new value of "context" (any previous value will be replaced)
             * 
             * @param context
             *     New value of the "context" property.
             */
            public ProfileDefinition.Contexts.Builder<_B> withContext(Context... context) {
                withContext(Arrays.asList(context));
                return this;
            }

            /**
             * Returns a new builder to build an additional value of the "Context" property.
             * Use {@link org.openinfobutton.schemas.kb.Context.Builder#end()} to return to the current builder.
             * 
             * @return
             *     a new builder to build an additional value of the "Context" property.
             *     Use {@link org.openinfobutton.schemas.kb.Context.Builder#end()} to return to the current builder.
             */
            public Context.Builder<? extends ProfileDefinition.Contexts.Builder<_B>> addContext() {
                if (this.context == null) {
                    this.context = new ArrayList<Context.Builder<ProfileDefinition.Contexts.Builder<_B>>>();
                }
                final Context.Builder<ProfileDefinition.Contexts.Builder<_B>> context_Builder = new Context.Builder<ProfileDefinition.Contexts.Builder<_B>>(this, null, false);
                this.context.add(context_Builder);
                return context_Builder;
            }

            @Override
            public ProfileDefinition.Contexts build() {
                if (_storedValue == null) {
                    return this.init(new ProfileDefinition.Contexts());
                } else {
                    return ((ProfileDefinition.Contexts) _storedValue);
                }
            }

        }

        public static class Select
            extends ProfileDefinition.Contexts.Selector<ProfileDefinition.Contexts.Select, Void>
        {


            Select() {
                super(null, null, null);
            }

            public static ProfileDefinition.Contexts.Select _root() {
                return new ProfileDefinition.Contexts.Select();
            }

        }

        public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
            extends com.kscs.util.jaxb.Selector<TRoot, TParent>
        {

            private Context.Selector<TRoot, ProfileDefinition.Contexts.Selector<TRoot, TParent>> context = null;

            public Selector(final TRoot root, final TParent parent, final String propertyName) {
                super(root, parent, propertyName);
            }

            @Override
            public Map<String, PropertyTree> buildChildren() {
                final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                products.putAll(super.buildChildren());
                if (this.context!= null) {
                    products.put("context", this.context.init());
                }
                return products;
            }

            public Context.Selector<TRoot, ProfileDefinition.Contexts.Selector<TRoot, TParent>> context() {
                return ((this.context == null)?this.context = new Context.Selector<TRoot, ProfileDefinition.Contexts.Selector<TRoot, TParent>>(this._root, this, "context"):this.context);
            }

        }

    }

    public static class Select
        extends ProfileDefinition.Selector<ProfileDefinition.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static ProfileDefinition.Select _root() {
            return new ProfileDefinition.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private ProfileDefinition.AuthorizedOrganizations.Selector<TRoot, ProfileDefinition.Selector<TRoot, TParent>> authorizedOrganizations = null;
        private ProfileDefinition.SupportedTerminologies.Selector<TRoot, ProfileDefinition.Selector<TRoot, TParent>> supportedTerminologies = null;
        private ProfileDefinition.Contexts.Selector<TRoot, ProfileDefinition.Selector<TRoot, TParent>> contexts = null;
        private com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.Selector<TRoot, TParent>> urlStyle = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.authorizedOrganizations!= null) {
                products.put("authorizedOrganizations", this.authorizedOrganizations.init());
            }
            if (this.supportedTerminologies!= null) {
                products.put("supportedTerminologies", this.supportedTerminologies.init());
            }
            if (this.contexts!= null) {
                products.put("contexts", this.contexts.init());
            }
            if (this.urlStyle!= null) {
                products.put("urlStyle", this.urlStyle.init());
            }
            return products;
        }

        public ProfileDefinition.AuthorizedOrganizations.Selector<TRoot, ProfileDefinition.Selector<TRoot, TParent>> authorizedOrganizations() {
            return ((this.authorizedOrganizations == null)?this.authorizedOrganizations = new ProfileDefinition.AuthorizedOrganizations.Selector<TRoot, ProfileDefinition.Selector<TRoot, TParent>>(this._root, this, "authorizedOrganizations"):this.authorizedOrganizations);
        }

        public ProfileDefinition.SupportedTerminologies.Selector<TRoot, ProfileDefinition.Selector<TRoot, TParent>> supportedTerminologies() {
            return ((this.supportedTerminologies == null)?this.supportedTerminologies = new ProfileDefinition.SupportedTerminologies.Selector<TRoot, ProfileDefinition.Selector<TRoot, TParent>>(this._root, this, "supportedTerminologies"):this.supportedTerminologies);
        }

        public ProfileDefinition.Contexts.Selector<TRoot, ProfileDefinition.Selector<TRoot, TParent>> contexts() {
            return ((this.contexts == null)?this.contexts = new ProfileDefinition.Contexts.Selector<TRoot, ProfileDefinition.Selector<TRoot, TParent>>(this._root, this, "contexts"):this.contexts);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.Selector<TRoot, TParent>> urlStyle() {
            return ((this.urlStyle == null)?this.urlStyle = new com.kscs.util.jaxb.Selector<TRoot, ProfileDefinition.Selector<TRoot, TParent>>(this._root, this, "urlStyle"):this.urlStyle);
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="supportedTerminology" type="{}Id" maxOccurs="unbounded"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "supportedTerminology"
    })
    public static class SupportedTerminologies {

        @XmlElement(required = true)
        protected List<Id> supportedTerminology;

        /**
         * Gets the value of the supportedTerminology property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the supportedTerminology property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getSupportedTerminology().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Id }
         * 
         * 
         */
        public List<Id> getSupportedTerminology() {
            if (supportedTerminology == null) {
                supportedTerminology = new ArrayList<Id>();
            }
            return this.supportedTerminology;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final ProfileDefinition.SupportedTerminologies.Builder<_B> _other) {
            if (this.supportedTerminology == null) {
                _other.supportedTerminology = null;
            } else {
                _other.supportedTerminology = new ArrayList<Id.Builder<ProfileDefinition.SupportedTerminologies.Builder<_B>>>();
                for (Id _item: this.supportedTerminology) {
                    _other.supportedTerminology.add(((_item == null)?null:_item.newCopyBuilder(_other)));
                }
            }
        }

        public<_B >ProfileDefinition.SupportedTerminologies.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
            return new ProfileDefinition.SupportedTerminologies.Builder<_B>(_parentBuilder, this, true);
        }

        public ProfileDefinition.SupportedTerminologies.Builder<Void> newCopyBuilder() {
            return newCopyBuilder(null);
        }

        public static ProfileDefinition.SupportedTerminologies.Builder<Void> builder() {
            return new ProfileDefinition.SupportedTerminologies.Builder<Void>(null, null, false);
        }

        public static<_B >ProfileDefinition.SupportedTerminologies.Builder<_B> copyOf(final ProfileDefinition.SupportedTerminologies _other) {
            final ProfileDefinition.SupportedTerminologies.Builder<_B> _newBuilder = new ProfileDefinition.SupportedTerminologies.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder);
            return _newBuilder;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final ProfileDefinition.SupportedTerminologies.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final PropertyTree supportedTerminologyPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("supportedTerminology"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(supportedTerminologyPropertyTree!= null):((supportedTerminologyPropertyTree == null)||(!supportedTerminologyPropertyTree.isLeaf())))) {
                if (this.supportedTerminology == null) {
                    _other.supportedTerminology = null;
                } else {
                    _other.supportedTerminology = new ArrayList<Id.Builder<ProfileDefinition.SupportedTerminologies.Builder<_B>>>();
                    for (Id _item: this.supportedTerminology) {
                        _other.supportedTerminology.add(((_item == null)?null:_item.newCopyBuilder(_other, supportedTerminologyPropertyTree, _propertyTreeUse)));
                    }
                }
            }
        }

        public<_B >ProfileDefinition.SupportedTerminologies.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return new ProfileDefinition.SupportedTerminologies.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
        }

        public ProfileDefinition.SupportedTerminologies.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
        }

        public static<_B >ProfileDefinition.SupportedTerminologies.Builder<_B> copyOf(final ProfileDefinition.SupportedTerminologies _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final ProfileDefinition.SupportedTerminologies.Builder<_B> _newBuilder = new ProfileDefinition.SupportedTerminologies.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
            return _newBuilder;
        }

        public static ProfileDefinition.SupportedTerminologies.Builder<Void> copyExcept(final ProfileDefinition.SupportedTerminologies _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
        }

        public static ProfileDefinition.SupportedTerminologies.Builder<Void> copyOnly(final ProfileDefinition.SupportedTerminologies _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
        }

        public static class Builder<_B >implements Buildable
        {

            protected final _B _parentBuilder;
            protected final ProfileDefinition.SupportedTerminologies _storedValue;
            private List<Id.Builder<ProfileDefinition.SupportedTerminologies.Builder<_B>>> supportedTerminology;

            public Builder(final _B _parentBuilder, final ProfileDefinition.SupportedTerminologies _other, final boolean _copy) {
                this._parentBuilder = _parentBuilder;
                if (_other!= null) {
                    if (_copy) {
                        _storedValue = null;
                        if (_other.supportedTerminology == null) {
                            this.supportedTerminology = null;
                        } else {
                            this.supportedTerminology = new ArrayList<Id.Builder<ProfileDefinition.SupportedTerminologies.Builder<_B>>>();
                            for (Id _item: _other.supportedTerminology) {
                                this.supportedTerminology.add(((_item == null)?null:_item.newCopyBuilder(this)));
                            }
                        }
                    } else {
                        _storedValue = _other;
                    }
                } else {
                    _storedValue = null;
                }
            }

            public Builder(final _B _parentBuilder, final ProfileDefinition.SupportedTerminologies _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                this._parentBuilder = _parentBuilder;
                if (_other!= null) {
                    if (_copy) {
                        _storedValue = null;
                        final PropertyTree supportedTerminologyPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("supportedTerminology"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(supportedTerminologyPropertyTree!= null):((supportedTerminologyPropertyTree == null)||(!supportedTerminologyPropertyTree.isLeaf())))) {
                            if (_other.supportedTerminology == null) {
                                this.supportedTerminology = null;
                            } else {
                                this.supportedTerminology = new ArrayList<Id.Builder<ProfileDefinition.SupportedTerminologies.Builder<_B>>>();
                                for (Id _item: _other.supportedTerminology) {
                                    this.supportedTerminology.add(((_item == null)?null:_item.newCopyBuilder(this, supportedTerminologyPropertyTree, _propertyTreeUse)));
                                }
                            }
                        }
                    } else {
                        _storedValue = _other;
                    }
                } else {
                    _storedValue = null;
                }
            }

            public _B end() {
                return this._parentBuilder;
            }

            protected<_P extends ProfileDefinition.SupportedTerminologies >_P init(final _P _product) {
                if (this.supportedTerminology!= null) {
                    final List<Id> supportedTerminology = new ArrayList<Id>(this.supportedTerminology.size());
                    for (Id.Builder<ProfileDefinition.SupportedTerminologies.Builder<_B>> _item: this.supportedTerminology) {
                        supportedTerminology.add(_item.build());
                    }
                    _product.supportedTerminology = supportedTerminology;
                }
                return _product;
            }

            /**
             * Adds the given items to the value of "supportedTerminology"
             * 
             * @param supportedTerminology
             *     Items to add to the value of the "supportedTerminology" property
             */
            public ProfileDefinition.SupportedTerminologies.Builder<_B> addSupportedTerminology(final Iterable<? extends Id> supportedTerminology) {
                if (supportedTerminology!= null) {
                    if (this.supportedTerminology == null) {
                        this.supportedTerminology = new ArrayList<Id.Builder<ProfileDefinition.SupportedTerminologies.Builder<_B>>>();
                    }
                    for (Id _item: supportedTerminology) {
                        this.supportedTerminology.add(new Id.Builder<ProfileDefinition.SupportedTerminologies.Builder<_B>>(this, _item, false));
                    }
                }
                return this;
            }

            /**
             * Sets the new value of "supportedTerminology" (any previous value will be replaced)
             * 
             * @param supportedTerminology
             *     New value of the "supportedTerminology" property.
             */
            public ProfileDefinition.SupportedTerminologies.Builder<_B> withSupportedTerminology(final Iterable<? extends Id> supportedTerminology) {
                if (this.supportedTerminology!= null) {
                    this.supportedTerminology.clear();
                }
                return addSupportedTerminology(supportedTerminology);
            }

            /**
             * Adds the given items to the value of "supportedTerminology"
             * 
             * @param supportedTerminology
             *     Items to add to the value of the "supportedTerminology" property
             */
            public ProfileDefinition.SupportedTerminologies.Builder<_B> addSupportedTerminology(Id... supportedTerminology) {
                addSupportedTerminology(Arrays.asList(supportedTerminology));
                return this;
            }

            /**
             * Sets the new value of "supportedTerminology" (any previous value will be replaced)
             * 
             * @param supportedTerminology
             *     New value of the "supportedTerminology" property.
             */
            public ProfileDefinition.SupportedTerminologies.Builder<_B> withSupportedTerminology(Id... supportedTerminology) {
                withSupportedTerminology(Arrays.asList(supportedTerminology));
                return this;
            }

            /**
             * Returns a new builder to build an additional value of the "SupportedTerminology" property.
             * Use {@link org.openinfobutton.schemas.kb.Id.Builder#end()} to return to the current builder.
             * 
             * @return
             *     a new builder to build an additional value of the "SupportedTerminology" property.
             *     Use {@link org.openinfobutton.schemas.kb.Id.Builder#end()} to return to the current builder.
             */
            public Id.Builder<? extends ProfileDefinition.SupportedTerminologies.Builder<_B>> addSupportedTerminology() {
                if (this.supportedTerminology == null) {
                    this.supportedTerminology = new ArrayList<Id.Builder<ProfileDefinition.SupportedTerminologies.Builder<_B>>>();
                }
                final Id.Builder<ProfileDefinition.SupportedTerminologies.Builder<_B>> supportedTerminology_Builder = new Id.Builder<ProfileDefinition.SupportedTerminologies.Builder<_B>>(this, null, false);
                this.supportedTerminology.add(supportedTerminology_Builder);
                return supportedTerminology_Builder;
            }

            @Override
            public ProfileDefinition.SupportedTerminologies build() {
                if (_storedValue == null) {
                    return this.init(new ProfileDefinition.SupportedTerminologies());
                } else {
                    return ((ProfileDefinition.SupportedTerminologies) _storedValue);
                }
            }

        }

        public static class Select
            extends ProfileDefinition.SupportedTerminologies.Selector<ProfileDefinition.SupportedTerminologies.Select, Void>
        {


            Select() {
                super(null, null, null);
            }

            public static ProfileDefinition.SupportedTerminologies.Select _root() {
                return new ProfileDefinition.SupportedTerminologies.Select();
            }

        }

        public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
            extends com.kscs.util.jaxb.Selector<TRoot, TParent>
        {

            private Id.Selector<TRoot, ProfileDefinition.SupportedTerminologies.Selector<TRoot, TParent>> supportedTerminology = null;

            public Selector(final TRoot root, final TParent parent, final String propertyName) {
                super(root, parent, propertyName);
            }

            @Override
            public Map<String, PropertyTree> buildChildren() {
                final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                products.putAll(super.buildChildren());
                if (this.supportedTerminology!= null) {
                    products.put("supportedTerminology", this.supportedTerminology.init());
                }
                return products;
            }

            public Id.Selector<TRoot, ProfileDefinition.SupportedTerminologies.Selector<TRoot, TParent>> supportedTerminology() {
                return ((this.supportedTerminology == null)?this.supportedTerminology = new Id.Selector<TRoot, ProfileDefinition.SupportedTerminologies.Selector<TRoot, TParent>>(this._root, this, "supportedTerminology"):this.supportedTerminology);
            }

        }

    }

}
