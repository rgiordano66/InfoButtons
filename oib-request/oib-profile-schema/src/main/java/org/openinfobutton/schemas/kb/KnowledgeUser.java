//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.10.09 at 08:58:15 PM UTC 
//


package org.openinfobutton.schemas.kb;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;


/**
 * <p>Java class for KnowledgeUser complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="KnowledgeUser"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="knowledgeUserType" type="{}CodedContextElement"/&gt;
 *         &lt;element name="discipline" type="{}CodedContextElement" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "KnowledgeUser", propOrder = {
    "knowledgeUserType",
    "discipline"
})
public class KnowledgeUser {

    @XmlElement(required = true)
    protected CodedContextElement knowledgeUserType;
    protected CodedContextElement discipline;

    /**
     * Gets the value of the knowledgeUserType property.
     * 
     * @return
     *     possible object is
     *     {@link CodedContextElement }
     *     
     */
    public CodedContextElement getKnowledgeUserType() {
        return knowledgeUserType;
    }

    /**
     * Sets the value of the knowledgeUserType property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodedContextElement }
     *     
     */
    public void setKnowledgeUserType(CodedContextElement value) {
        this.knowledgeUserType = value;
    }

    /**
     * Gets the value of the discipline property.
     * 
     * @return
     *     possible object is
     *     {@link CodedContextElement }
     *     
     */
    public CodedContextElement getDiscipline() {
        return discipline;
    }

    /**
     * Sets the value of the discipline property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodedContextElement }
     *     
     */
    public void setDiscipline(CodedContextElement value) {
        this.discipline = value;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final KnowledgeUser.Builder<_B> _other) {
        _other.knowledgeUserType = ((this.knowledgeUserType == null)?null:this.knowledgeUserType.newCopyBuilder(_other));
        _other.discipline = ((this.discipline == null)?null:this.discipline.newCopyBuilder(_other));
    }

    public<_B >KnowledgeUser.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new KnowledgeUser.Builder<_B>(_parentBuilder, this, true);
    }

    public KnowledgeUser.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static KnowledgeUser.Builder<Void> builder() {
        return new KnowledgeUser.Builder<Void>(null, null, false);
    }

    public static<_B >KnowledgeUser.Builder<_B> copyOf(final KnowledgeUser _other) {
        final KnowledgeUser.Builder<_B> _newBuilder = new KnowledgeUser.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final KnowledgeUser.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree knowledgeUserTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("knowledgeUserType"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(knowledgeUserTypePropertyTree!= null):((knowledgeUserTypePropertyTree == null)||(!knowledgeUserTypePropertyTree.isLeaf())))) {
            _other.knowledgeUserType = ((this.knowledgeUserType == null)?null:this.knowledgeUserType.newCopyBuilder(_other, knowledgeUserTypePropertyTree, _propertyTreeUse));
        }
        final PropertyTree disciplinePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("discipline"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(disciplinePropertyTree!= null):((disciplinePropertyTree == null)||(!disciplinePropertyTree.isLeaf())))) {
            _other.discipline = ((this.discipline == null)?null:this.discipline.newCopyBuilder(_other, disciplinePropertyTree, _propertyTreeUse));
        }
    }

    public<_B >KnowledgeUser.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new KnowledgeUser.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public KnowledgeUser.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >KnowledgeUser.Builder<_B> copyOf(final KnowledgeUser _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final KnowledgeUser.Builder<_B> _newBuilder = new KnowledgeUser.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static KnowledgeUser.Builder<Void> copyExcept(final KnowledgeUser _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static KnowledgeUser.Builder<Void> copyOnly(final KnowledgeUser _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        protected final KnowledgeUser _storedValue;
        private CodedContextElement.Builder<KnowledgeUser.Builder<_B>> knowledgeUserType;
        private CodedContextElement.Builder<KnowledgeUser.Builder<_B>> discipline;

        public Builder(final _B _parentBuilder, final KnowledgeUser _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    this.knowledgeUserType = ((_other.knowledgeUserType == null)?null:_other.knowledgeUserType.newCopyBuilder(this));
                    this.discipline = ((_other.discipline == null)?null:_other.discipline.newCopyBuilder(this));
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public Builder(final _B _parentBuilder, final KnowledgeUser _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    final PropertyTree knowledgeUserTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("knowledgeUserType"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(knowledgeUserTypePropertyTree!= null):((knowledgeUserTypePropertyTree == null)||(!knowledgeUserTypePropertyTree.isLeaf())))) {
                        this.knowledgeUserType = ((_other.knowledgeUserType == null)?null:_other.knowledgeUserType.newCopyBuilder(this, knowledgeUserTypePropertyTree, _propertyTreeUse));
                    }
                    final PropertyTree disciplinePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("discipline"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(disciplinePropertyTree!= null):((disciplinePropertyTree == null)||(!disciplinePropertyTree.isLeaf())))) {
                        this.discipline = ((_other.discipline == null)?null:_other.discipline.newCopyBuilder(this, disciplinePropertyTree, _propertyTreeUse));
                    }
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends KnowledgeUser >_P init(final _P _product) {
            _product.knowledgeUserType = ((this.knowledgeUserType == null)?null:this.knowledgeUserType.build());
            _product.discipline = ((this.discipline == null)?null:this.discipline.build());
            return _product;
        }

        /**
         * Sets the new value of "knowledgeUserType" (any previous value will be replaced)
         * 
         * @param knowledgeUserType
         *     New value of the "knowledgeUserType" property.
         */
        public KnowledgeUser.Builder<_B> withKnowledgeUserType(final CodedContextElement knowledgeUserType) {
            this.knowledgeUserType = ((knowledgeUserType == null)?null:new CodedContextElement.Builder<KnowledgeUser.Builder<_B>>(this, knowledgeUserType, false));
            return this;
        }

        /**
         * Returns a new builder to build the value of the "knowledgeUserType" property (replacing previous value).
         * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
         * 
         * @return
         *     A new builder to build the value of the "knowledgeUserType" property.
         *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
         */
        public CodedContextElement.Builder<? extends KnowledgeUser.Builder<_B>> withKnowledgeUserType() {
            return this.knowledgeUserType = new CodedContextElement.Builder<KnowledgeUser.Builder<_B>>(this, null, false);
        }

        /**
         * Sets the new value of "discipline" (any previous value will be replaced)
         * 
         * @param discipline
         *     New value of the "discipline" property.
         */
        public KnowledgeUser.Builder<_B> withDiscipline(final CodedContextElement discipline) {
            this.discipline = ((discipline == null)?null:new CodedContextElement.Builder<KnowledgeUser.Builder<_B>>(this, discipline, false));
            return this;
        }

        /**
         * Returns a new builder to build the value of the "discipline" property (replacing previous value).
         * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
         * 
         * @return
         *     A new builder to build the value of the "discipline" property.
         *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
         */
        public CodedContextElement.Builder<? extends KnowledgeUser.Builder<_B>> withDiscipline() {
            return this.discipline = new CodedContextElement.Builder<KnowledgeUser.Builder<_B>>(this, null, false);
        }

        @Override
        public KnowledgeUser build() {
            if (_storedValue == null) {
                return this.init(new KnowledgeUser());
            } else {
                return ((KnowledgeUser) _storedValue);
            }
        }

    }

    public static class Select
        extends KnowledgeUser.Selector<KnowledgeUser.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static KnowledgeUser.Select _root() {
            return new KnowledgeUser.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private CodedContextElement.Selector<TRoot, KnowledgeUser.Selector<TRoot, TParent>> knowledgeUserType = null;
        private CodedContextElement.Selector<TRoot, KnowledgeUser.Selector<TRoot, TParent>> discipline = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.knowledgeUserType!= null) {
                products.put("knowledgeUserType", this.knowledgeUserType.init());
            }
            if (this.discipline!= null) {
                products.put("discipline", this.discipline.init());
            }
            return products;
        }

        public CodedContextElement.Selector<TRoot, KnowledgeUser.Selector<TRoot, TParent>> knowledgeUserType() {
            return ((this.knowledgeUserType == null)?this.knowledgeUserType = new CodedContextElement.Selector<TRoot, KnowledgeUser.Selector<TRoot, TParent>>(this._root, this, "knowledgeUserType"):this.knowledgeUserType);
        }

        public CodedContextElement.Selector<TRoot, KnowledgeUser.Selector<TRoot, TParent>> discipline() {
            return ((this.discipline == null)?this.discipline = new CodedContextElement.Selector<TRoot, KnowledgeUser.Selector<TRoot, TParent>>(this._root, this, "discipline"):this.discipline);
        }

    }

}
