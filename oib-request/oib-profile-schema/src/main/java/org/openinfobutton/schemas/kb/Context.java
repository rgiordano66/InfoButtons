//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.10.09 at 12:58:47 PM CDT 
//


package org.openinfobutton.schemas.kb;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;


/**
 * <p>Java class for Context complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Context"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="contextDescription" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="contextDefinition"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element ref="{}patientGender" minOccurs="0"/&gt;
 *                   &lt;element ref="{}patientAgeGroup" minOccurs="0"/&gt;
 *                   &lt;element ref="{}task"/&gt;
 *                   &lt;element ref="{}serviceDeliveryLocation" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                   &lt;element ref="{}encounterType" minOccurs="0"/&gt;
 *                   &lt;element ref="{}performerLanguage" minOccurs="0"/&gt;
 *                   &lt;element ref="{}performerDiscipline" minOccurs="0"/&gt;
 *                   &lt;element ref="{}performerKnowledgeUserType" minOccurs="0"/&gt;
 *                   &lt;element ref="{}informationRecipientLanguage" minOccurs="0"/&gt;
 *                   &lt;element ref="{}informationRecipientDiscipline" minOccurs="0"/&gt;
 *                   &lt;element ref="{}informationRecipientUserType" minOccurs="0"/&gt;
 *                   &lt;element ref="{}conceptOfInterest"/&gt;
 *                   &lt;element ref="{}subTopics"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element ref="{}knowledgeRequestService"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Context", propOrder = {
    "contextDescription",
    "contextDefinition",
    "knowledgeRequestService"
})
public class Context {

    protected String contextDescription;
    @XmlElement(required = true)
    protected Context.ContextDefinition contextDefinition;
    @XmlElement(required = true)
    protected KnowledgeRequestService knowledgeRequestService;
    @XmlAttribute(name = "id", required = true)
    protected String id;
    @XmlAttribute(name = "name", required = true)
    protected String name;

    /**
     * Gets the value of the contextDescription property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContextDescription() {
        return contextDescription;
    }

    /**
     * Sets the value of the contextDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContextDescription(String value) {
        this.contextDescription = value;
    }

    /**
     * Gets the value of the contextDefinition property.
     * 
     * @return
     *     possible object is
     *     {@link Context.ContextDefinition }
     *     
     */
    public Context.ContextDefinition getContextDefinition() {
        return contextDefinition;
    }

    /**
     * Sets the value of the contextDefinition property.
     * 
     * @param value
     *     allowed object is
     *     {@link Context.ContextDefinition }
     *     
     */
    public void setContextDefinition(Context.ContextDefinition value) {
        this.contextDefinition = value;
    }

    /**
     * Gets the value of the knowledgeRequestService property.
     * 
     * @return
     *     possible object is
     *     {@link KnowledgeRequestService }
     *     
     */
    public KnowledgeRequestService getKnowledgeRequestService() {
        return knowledgeRequestService;
    }

    /**
     * Sets the value of the knowledgeRequestService property.
     * 
     * @param value
     *     allowed object is
     *     {@link KnowledgeRequestService }
     *     
     */
    public void setKnowledgeRequestService(KnowledgeRequestService value) {
        this.knowledgeRequestService = value;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final Context.Builder<_B> _other) {
        _other.contextDescription = this.contextDescription;
        _other.contextDefinition = ((this.contextDefinition == null)?null:this.contextDefinition.newCopyBuilder(_other));
        _other.knowledgeRequestService = ((this.knowledgeRequestService == null)?null:this.knowledgeRequestService.newCopyBuilder(_other));
        _other.id = this.id;
        _other.name = this.name;
    }

    public<_B >Context.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new Context.Builder<_B>(_parentBuilder, this, true);
    }

    public Context.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static Context.Builder<Void> builder() {
        return new Context.Builder<Void>(null, null, false);
    }

    public static<_B >Context.Builder<_B> copyOf(final Context _other) {
        final Context.Builder<_B> _newBuilder = new Context.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final Context.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree contextDescriptionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contextDescription"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contextDescriptionPropertyTree!= null):((contextDescriptionPropertyTree == null)||(!contextDescriptionPropertyTree.isLeaf())))) {
            _other.contextDescription = this.contextDescription;
        }
        final PropertyTree contextDefinitionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contextDefinition"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contextDefinitionPropertyTree!= null):((contextDefinitionPropertyTree == null)||(!contextDefinitionPropertyTree.isLeaf())))) {
            _other.contextDefinition = ((this.contextDefinition == null)?null:this.contextDefinition.newCopyBuilder(_other, contextDefinitionPropertyTree, _propertyTreeUse));
        }
        final PropertyTree knowledgeRequestServicePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("knowledgeRequestService"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(knowledgeRequestServicePropertyTree!= null):((knowledgeRequestServicePropertyTree == null)||(!knowledgeRequestServicePropertyTree.isLeaf())))) {
            _other.knowledgeRequestService = ((this.knowledgeRequestService == null)?null:this.knowledgeRequestService.newCopyBuilder(_other, knowledgeRequestServicePropertyTree, _propertyTreeUse));
        }
        final PropertyTree idPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("id"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(idPropertyTree!= null):((idPropertyTree == null)||(!idPropertyTree.isLeaf())))) {
            _other.id = this.id;
        }
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            _other.name = this.name;
        }
    }

    public<_B >Context.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new Context.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public Context.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >Context.Builder<_B> copyOf(final Context _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final Context.Builder<_B> _newBuilder = new Context.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static Context.Builder<Void> copyExcept(final Context _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static Context.Builder<Void> copyOnly(final Context _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        protected final Context _storedValue;
        private String contextDescription;
        private Context.ContextDefinition.Builder<Context.Builder<_B>> contextDefinition;
        private KnowledgeRequestService.Builder<Context.Builder<_B>> knowledgeRequestService;
        private String id;
        private String name;

        public Builder(final _B _parentBuilder, final Context _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    this.contextDescription = _other.contextDescription;
                    this.contextDefinition = ((_other.contextDefinition == null)?null:_other.contextDefinition.newCopyBuilder(this));
                    this.knowledgeRequestService = ((_other.knowledgeRequestService == null)?null:_other.knowledgeRequestService.newCopyBuilder(this));
                    this.id = _other.id;
                    this.name = _other.name;
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public Builder(final _B _parentBuilder, final Context _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    final PropertyTree contextDescriptionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contextDescription"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contextDescriptionPropertyTree!= null):((contextDescriptionPropertyTree == null)||(!contextDescriptionPropertyTree.isLeaf())))) {
                        this.contextDescription = _other.contextDescription;
                    }
                    final PropertyTree contextDefinitionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contextDefinition"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contextDefinitionPropertyTree!= null):((contextDefinitionPropertyTree == null)||(!contextDefinitionPropertyTree.isLeaf())))) {
                        this.contextDefinition = ((_other.contextDefinition == null)?null:_other.contextDefinition.newCopyBuilder(this, contextDefinitionPropertyTree, _propertyTreeUse));
                    }
                    final PropertyTree knowledgeRequestServicePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("knowledgeRequestService"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(knowledgeRequestServicePropertyTree!= null):((knowledgeRequestServicePropertyTree == null)||(!knowledgeRequestServicePropertyTree.isLeaf())))) {
                        this.knowledgeRequestService = ((_other.knowledgeRequestService == null)?null:_other.knowledgeRequestService.newCopyBuilder(this, knowledgeRequestServicePropertyTree, _propertyTreeUse));
                    }
                    final PropertyTree idPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("id"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(idPropertyTree!= null):((idPropertyTree == null)||(!idPropertyTree.isLeaf())))) {
                        this.id = _other.id;
                    }
                    final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
                        this.name = _other.name;
                    }
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends Context >_P init(final _P _product) {
            _product.contextDescription = this.contextDescription;
            _product.contextDefinition = ((this.contextDefinition == null)?null:this.contextDefinition.build());
            _product.knowledgeRequestService = ((this.knowledgeRequestService == null)?null:this.knowledgeRequestService.build());
            _product.id = this.id;
            _product.name = this.name;
            return _product;
        }

        /**
         * Sets the new value of "contextDescription" (any previous value will be replaced)
         * 
         * @param contextDescription
         *     New value of the "contextDescription" property.
         */
        public Context.Builder<_B> withContextDescription(final String contextDescription) {
            this.contextDescription = contextDescription;
            return this;
        }

        /**
         * Sets the new value of "contextDefinition" (any previous value will be replaced)
         * 
         * @param contextDefinition
         *     New value of the "contextDefinition" property.
         */
        public Context.Builder<_B> withContextDefinition(final Context.ContextDefinition contextDefinition) {
            this.contextDefinition = ((contextDefinition == null)?null:new Context.ContextDefinition.Builder<Context.Builder<_B>>(this, contextDefinition, false));
            return this;
        }

        /**
         * Returns a new builder to build the value of the "contextDefinition" property (replacing previous value).
         * Use {@link org.openinfobutton.schemas.kb.Context.ContextDefinition.Builder#end()} to return to the current builder.
         * 
         * @return
         *     A new builder to build the value of the "contextDefinition" property.
         *     Use {@link org.openinfobutton.schemas.kb.Context.ContextDefinition.Builder#end()} to return to the current builder.
         */
        public Context.ContextDefinition.Builder<? extends Context.Builder<_B>> withContextDefinition() {
            return this.contextDefinition = new Context.ContextDefinition.Builder<Context.Builder<_B>>(this, null, false);
        }

        /**
         * Sets the new value of "knowledgeRequestService" (any previous value will be replaced)
         * 
         * @param knowledgeRequestService
         *     New value of the "knowledgeRequestService" property.
         */
        public Context.Builder<_B> withKnowledgeRequestService(final KnowledgeRequestService knowledgeRequestService) {
            this.knowledgeRequestService = ((knowledgeRequestService == null)?null:new KnowledgeRequestService.Builder<Context.Builder<_B>>(this, knowledgeRequestService, false));
            return this;
        }

        /**
         * Returns a new builder to build the value of the "knowledgeRequestService" property (replacing previous value).
         * Use {@link org.openinfobutton.schemas.kb.KnowledgeRequestService.Builder#end()} to return to the current builder.
         * 
         * @return
         *     A new builder to build the value of the "knowledgeRequestService" property.
         *     Use {@link org.openinfobutton.schemas.kb.KnowledgeRequestService.Builder#end()} to return to the current builder.
         */
        public KnowledgeRequestService.Builder<? extends Context.Builder<_B>> withKnowledgeRequestService() {
            return this.knowledgeRequestService = new KnowledgeRequestService.Builder<Context.Builder<_B>>(this, null, false);
        }

        /**
         * Sets the new value of "id" (any previous value will be replaced)
         * 
         * @param id
         *     New value of the "id" property.
         */
        public Context.Builder<_B> withId(final String id) {
            this.id = id;
            return this;
        }

        /**
         * Sets the new value of "name" (any previous value will be replaced)
         * 
         * @param name
         *     New value of the "name" property.
         */
        public Context.Builder<_B> withName(final String name) {
            this.name = name;
            return this;
        }

        @Override
        public Context build() {
            if (_storedValue == null) {
                return this.init(new Context());
            } else {
                return ((Context) _storedValue);
            }
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element ref="{}patientGender" minOccurs="0"/&gt;
     *         &lt;element ref="{}patientAgeGroup" minOccurs="0"/&gt;
     *         &lt;element ref="{}task"/&gt;
     *         &lt;element ref="{}serviceDeliveryLocation" maxOccurs="unbounded" minOccurs="0"/&gt;
     *         &lt;element ref="{}encounterType" minOccurs="0"/&gt;
     *         &lt;element ref="{}performerLanguage" minOccurs="0"/&gt;
     *         &lt;element ref="{}performerDiscipline" minOccurs="0"/&gt;
     *         &lt;element ref="{}performerKnowledgeUserType" minOccurs="0"/&gt;
     *         &lt;element ref="{}informationRecipientLanguage" minOccurs="0"/&gt;
     *         &lt;element ref="{}informationRecipientDiscipline" minOccurs="0"/&gt;
     *         &lt;element ref="{}informationRecipientUserType" minOccurs="0"/&gt;
     *         &lt;element ref="{}conceptOfInterest"/&gt;
     *         &lt;element ref="{}subTopics"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "patientGender",
        "patientAgeGroup",
        "task",
        "serviceDeliveryLocation",
        "encounterType",
        "performerLanguage",
        "performerDiscipline",
        "performerKnowledgeUserType",
        "informationRecipientLanguage",
        "informationRecipientDiscipline",
        "informationRecipientUserType",
        "conceptOfInterest",
        "subTopics"
    })
    public static class ContextDefinition {

        protected CodedContextElement patientGender;
        protected CodedContextElement patientAgeGroup;
        @XmlElement(required = true)
        protected CodedContextElement task;
        protected List<Id> serviceDeliveryLocation;
        protected CodedContextElement encounterType;
        protected CodedContextElement performerLanguage;
        protected CodedContextElement performerDiscipline;
        protected CodedContextElement performerKnowledgeUserType;
        protected CodedContextElement informationRecipientLanguage;
        protected CodedContextElement informationRecipientDiscipline;
        protected CodedContextElement informationRecipientUserType;
        @XmlElement(required = true)
        protected CodedContextElement conceptOfInterest;
        @XmlElement(required = true)
        protected SubTopics subTopics;

        /**
         * Gets the value of the patientGender property.
         * 
         * @return
         *     possible object is
         *     {@link CodedContextElement }
         *     
         */
        public CodedContextElement getPatientGender() {
            return patientGender;
        }

        /**
         * Sets the value of the patientGender property.
         * 
         * @param value
         *     allowed object is
         *     {@link CodedContextElement }
         *     
         */
        public void setPatientGender(CodedContextElement value) {
            this.patientGender = value;
        }

        /**
         * Gets the value of the patientAgeGroup property.
         * 
         * @return
         *     possible object is
         *     {@link CodedContextElement }
         *     
         */
        public CodedContextElement getPatientAgeGroup() {
            return patientAgeGroup;
        }

        /**
         * Sets the value of the patientAgeGroup property.
         * 
         * @param value
         *     allowed object is
         *     {@link CodedContextElement }
         *     
         */
        public void setPatientAgeGroup(CodedContextElement value) {
            this.patientAgeGroup = value;
        }

        /**
         * Gets the value of the task property.
         * 
         * @return
         *     possible object is
         *     {@link CodedContextElement }
         *     
         */
        public CodedContextElement getTask() {
            return task;
        }

        /**
         * Sets the value of the task property.
         * 
         * @param value
         *     allowed object is
         *     {@link CodedContextElement }
         *     
         */
        public void setTask(CodedContextElement value) {
            this.task = value;
        }

        /**
         * Gets the value of the serviceDeliveryLocation property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the serviceDeliveryLocation property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getServiceDeliveryLocation().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Id }
         * 
         * 
         */
        public List<Id> getServiceDeliveryLocation() {
            if (serviceDeliveryLocation == null) {
                serviceDeliveryLocation = new ArrayList<Id>();
            }
            return this.serviceDeliveryLocation;
        }

        /**
         * Gets the value of the encounterType property.
         * 
         * @return
         *     possible object is
         *     {@link CodedContextElement }
         *     
         */
        public CodedContextElement getEncounterType() {
            return encounterType;
        }

        /**
         * Sets the value of the encounterType property.
         * 
         * @param value
         *     allowed object is
         *     {@link CodedContextElement }
         *     
         */
        public void setEncounterType(CodedContextElement value) {
            this.encounterType = value;
        }

        /**
         * Gets the value of the performerLanguage property.
         * 
         * @return
         *     possible object is
         *     {@link CodedContextElement }
         *     
         */
        public CodedContextElement getPerformerLanguage() {
            return performerLanguage;
        }

        /**
         * Sets the value of the performerLanguage property.
         * 
         * @param value
         *     allowed object is
         *     {@link CodedContextElement }
         *     
         */
        public void setPerformerLanguage(CodedContextElement value) {
            this.performerLanguage = value;
        }

        /**
         * Gets the value of the performerDiscipline property.
         * 
         * @return
         *     possible object is
         *     {@link CodedContextElement }
         *     
         */
        public CodedContextElement getPerformerDiscipline() {
            return performerDiscipline;
        }

        /**
         * Sets the value of the performerDiscipline property.
         * 
         * @param value
         *     allowed object is
         *     {@link CodedContextElement }
         *     
         */
        public void setPerformerDiscipline(CodedContextElement value) {
            this.performerDiscipline = value;
        }

        /**
         * Gets the value of the performerKnowledgeUserType property.
         * 
         * @return
         *     possible object is
         *     {@link CodedContextElement }
         *     
         */
        public CodedContextElement getPerformerKnowledgeUserType() {
            return performerKnowledgeUserType;
        }

        /**
         * Sets the value of the performerKnowledgeUserType property.
         * 
         * @param value
         *     allowed object is
         *     {@link CodedContextElement }
         *     
         */
        public void setPerformerKnowledgeUserType(CodedContextElement value) {
            this.performerKnowledgeUserType = value;
        }

        /**
         * Gets the value of the informationRecipientLanguage property.
         * 
         * @return
         *     possible object is
         *     {@link CodedContextElement }
         *     
         */
        public CodedContextElement getInformationRecipientLanguage() {
            return informationRecipientLanguage;
        }

        /**
         * Sets the value of the informationRecipientLanguage property.
         * 
         * @param value
         *     allowed object is
         *     {@link CodedContextElement }
         *     
         */
        public void setInformationRecipientLanguage(CodedContextElement value) {
            this.informationRecipientLanguage = value;
        }

        /**
         * Gets the value of the informationRecipientDiscipline property.
         * 
         * @return
         *     possible object is
         *     {@link CodedContextElement }
         *     
         */
        public CodedContextElement getInformationRecipientDiscipline() {
            return informationRecipientDiscipline;
        }

        /**
         * Sets the value of the informationRecipientDiscipline property.
         * 
         * @param value
         *     allowed object is
         *     {@link CodedContextElement }
         *     
         */
        public void setInformationRecipientDiscipline(CodedContextElement value) {
            this.informationRecipientDiscipline = value;
        }

        /**
         * Gets the value of the informationRecipientUserType property.
         * 
         * @return
         *     possible object is
         *     {@link CodedContextElement }
         *     
         */
        public CodedContextElement getInformationRecipientUserType() {
            return informationRecipientUserType;
        }

        /**
         * Sets the value of the informationRecipientUserType property.
         * 
         * @param value
         *     allowed object is
         *     {@link CodedContextElement }
         *     
         */
        public void setInformationRecipientUserType(CodedContextElement value) {
            this.informationRecipientUserType = value;
        }

        /**
         * Gets the value of the conceptOfInterest property.
         * 
         * @return
         *     possible object is
         *     {@link CodedContextElement }
         *     
         */
        public CodedContextElement getConceptOfInterest() {
            return conceptOfInterest;
        }

        /**
         * Sets the value of the conceptOfInterest property.
         * 
         * @param value
         *     allowed object is
         *     {@link CodedContextElement }
         *     
         */
        public void setConceptOfInterest(CodedContextElement value) {
            this.conceptOfInterest = value;
        }

        /**
         * Gets the value of the subTopics property.
         * 
         * @return
         *     possible object is
         *     {@link SubTopics }
         *     
         */
        public SubTopics getSubTopics() {
            return subTopics;
        }

        /**
         * Sets the value of the subTopics property.
         * 
         * @param value
         *     allowed object is
         *     {@link SubTopics }
         *     
         */
        public void setSubTopics(SubTopics value) {
            this.subTopics = value;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final Context.ContextDefinition.Builder<_B> _other) {
            _other.patientGender = ((this.patientGender == null)?null:this.patientGender.newCopyBuilder(_other));
            _other.patientAgeGroup = ((this.patientAgeGroup == null)?null:this.patientAgeGroup.newCopyBuilder(_other));
            _other.task = ((this.task == null)?null:this.task.newCopyBuilder(_other));
            if (this.serviceDeliveryLocation == null) {
                _other.serviceDeliveryLocation = null;
            } else {
                _other.serviceDeliveryLocation = new ArrayList<Id.Builder<Context.ContextDefinition.Builder<_B>>>();
                for (Id _item: this.serviceDeliveryLocation) {
                    _other.serviceDeliveryLocation.add(((_item == null)?null:_item.newCopyBuilder(_other)));
                }
            }
            _other.encounterType = ((this.encounterType == null)?null:this.encounterType.newCopyBuilder(_other));
            _other.performerLanguage = ((this.performerLanguage == null)?null:this.performerLanguage.newCopyBuilder(_other));
            _other.performerDiscipline = ((this.performerDiscipline == null)?null:this.performerDiscipline.newCopyBuilder(_other));
            _other.performerKnowledgeUserType = ((this.performerKnowledgeUserType == null)?null:this.performerKnowledgeUserType.newCopyBuilder(_other));
            _other.informationRecipientLanguage = ((this.informationRecipientLanguage == null)?null:this.informationRecipientLanguage.newCopyBuilder(_other));
            _other.informationRecipientDiscipline = ((this.informationRecipientDiscipline == null)?null:this.informationRecipientDiscipline.newCopyBuilder(_other));
            _other.informationRecipientUserType = ((this.informationRecipientUserType == null)?null:this.informationRecipientUserType.newCopyBuilder(_other));
            _other.conceptOfInterest = ((this.conceptOfInterest == null)?null:this.conceptOfInterest.newCopyBuilder(_other));
            _other.subTopics = ((this.subTopics == null)?null:this.subTopics.newCopyBuilder(_other));
        }

        public<_B >Context.ContextDefinition.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
            return new Context.ContextDefinition.Builder<_B>(_parentBuilder, this, true);
        }

        public Context.ContextDefinition.Builder<Void> newCopyBuilder() {
            return newCopyBuilder(null);
        }

        public static Context.ContextDefinition.Builder<Void> builder() {
            return new Context.ContextDefinition.Builder<Void>(null, null, false);
        }

        public static<_B >Context.ContextDefinition.Builder<_B> copyOf(final Context.ContextDefinition _other) {
            final Context.ContextDefinition.Builder<_B> _newBuilder = new Context.ContextDefinition.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder);
            return _newBuilder;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final Context.ContextDefinition.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final PropertyTree patientGenderPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("patientGender"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(patientGenderPropertyTree!= null):((patientGenderPropertyTree == null)||(!patientGenderPropertyTree.isLeaf())))) {
                _other.patientGender = ((this.patientGender == null)?null:this.patientGender.newCopyBuilder(_other, patientGenderPropertyTree, _propertyTreeUse));
            }
            final PropertyTree patientAgeGroupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("patientAgeGroup"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(patientAgeGroupPropertyTree!= null):((patientAgeGroupPropertyTree == null)||(!patientAgeGroupPropertyTree.isLeaf())))) {
                _other.patientAgeGroup = ((this.patientAgeGroup == null)?null:this.patientAgeGroup.newCopyBuilder(_other, patientAgeGroupPropertyTree, _propertyTreeUse));
            }
            final PropertyTree taskPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("task"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(taskPropertyTree!= null):((taskPropertyTree == null)||(!taskPropertyTree.isLeaf())))) {
                _other.task = ((this.task == null)?null:this.task.newCopyBuilder(_other, taskPropertyTree, _propertyTreeUse));
            }
            final PropertyTree serviceDeliveryLocationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("serviceDeliveryLocation"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(serviceDeliveryLocationPropertyTree!= null):((serviceDeliveryLocationPropertyTree == null)||(!serviceDeliveryLocationPropertyTree.isLeaf())))) {
                if (this.serviceDeliveryLocation == null) {
                    _other.serviceDeliveryLocation = null;
                } else {
                    _other.serviceDeliveryLocation = new ArrayList<Id.Builder<Context.ContextDefinition.Builder<_B>>>();
                    for (Id _item: this.serviceDeliveryLocation) {
                        _other.serviceDeliveryLocation.add(((_item == null)?null:_item.newCopyBuilder(_other, serviceDeliveryLocationPropertyTree, _propertyTreeUse)));
                    }
                }
            }
            final PropertyTree encounterTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("encounterType"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(encounterTypePropertyTree!= null):((encounterTypePropertyTree == null)||(!encounterTypePropertyTree.isLeaf())))) {
                _other.encounterType = ((this.encounterType == null)?null:this.encounterType.newCopyBuilder(_other, encounterTypePropertyTree, _propertyTreeUse));
            }
            final PropertyTree performerLanguagePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("performerLanguage"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(performerLanguagePropertyTree!= null):((performerLanguagePropertyTree == null)||(!performerLanguagePropertyTree.isLeaf())))) {
                _other.performerLanguage = ((this.performerLanguage == null)?null:this.performerLanguage.newCopyBuilder(_other, performerLanguagePropertyTree, _propertyTreeUse));
            }
            final PropertyTree performerDisciplinePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("performerDiscipline"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(performerDisciplinePropertyTree!= null):((performerDisciplinePropertyTree == null)||(!performerDisciplinePropertyTree.isLeaf())))) {
                _other.performerDiscipline = ((this.performerDiscipline == null)?null:this.performerDiscipline.newCopyBuilder(_other, performerDisciplinePropertyTree, _propertyTreeUse));
            }
            final PropertyTree performerKnowledgeUserTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("performerKnowledgeUserType"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(performerKnowledgeUserTypePropertyTree!= null):((performerKnowledgeUserTypePropertyTree == null)||(!performerKnowledgeUserTypePropertyTree.isLeaf())))) {
                _other.performerKnowledgeUserType = ((this.performerKnowledgeUserType == null)?null:this.performerKnowledgeUserType.newCopyBuilder(_other, performerKnowledgeUserTypePropertyTree, _propertyTreeUse));
            }
            final PropertyTree informationRecipientLanguagePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("informationRecipientLanguage"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(informationRecipientLanguagePropertyTree!= null):((informationRecipientLanguagePropertyTree == null)||(!informationRecipientLanguagePropertyTree.isLeaf())))) {
                _other.informationRecipientLanguage = ((this.informationRecipientLanguage == null)?null:this.informationRecipientLanguage.newCopyBuilder(_other, informationRecipientLanguagePropertyTree, _propertyTreeUse));
            }
            final PropertyTree informationRecipientDisciplinePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("informationRecipientDiscipline"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(informationRecipientDisciplinePropertyTree!= null):((informationRecipientDisciplinePropertyTree == null)||(!informationRecipientDisciplinePropertyTree.isLeaf())))) {
                _other.informationRecipientDiscipline = ((this.informationRecipientDiscipline == null)?null:this.informationRecipientDiscipline.newCopyBuilder(_other, informationRecipientDisciplinePropertyTree, _propertyTreeUse));
            }
            final PropertyTree informationRecipientUserTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("informationRecipientUserType"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(informationRecipientUserTypePropertyTree!= null):((informationRecipientUserTypePropertyTree == null)||(!informationRecipientUserTypePropertyTree.isLeaf())))) {
                _other.informationRecipientUserType = ((this.informationRecipientUserType == null)?null:this.informationRecipientUserType.newCopyBuilder(_other, informationRecipientUserTypePropertyTree, _propertyTreeUse));
            }
            final PropertyTree conceptOfInterestPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("conceptOfInterest"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(conceptOfInterestPropertyTree!= null):((conceptOfInterestPropertyTree == null)||(!conceptOfInterestPropertyTree.isLeaf())))) {
                _other.conceptOfInterest = ((this.conceptOfInterest == null)?null:this.conceptOfInterest.newCopyBuilder(_other, conceptOfInterestPropertyTree, _propertyTreeUse));
            }
            final PropertyTree subTopicsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("subTopics"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(subTopicsPropertyTree!= null):((subTopicsPropertyTree == null)||(!subTopicsPropertyTree.isLeaf())))) {
                _other.subTopics = ((this.subTopics == null)?null:this.subTopics.newCopyBuilder(_other, subTopicsPropertyTree, _propertyTreeUse));
            }
        }

        public<_B >Context.ContextDefinition.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return new Context.ContextDefinition.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
        }

        public Context.ContextDefinition.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
        }

        public static<_B >Context.ContextDefinition.Builder<_B> copyOf(final Context.ContextDefinition _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final Context.ContextDefinition.Builder<_B> _newBuilder = new Context.ContextDefinition.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
            return _newBuilder;
        }

        public static Context.ContextDefinition.Builder<Void> copyExcept(final Context.ContextDefinition _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
        }

        public static Context.ContextDefinition.Builder<Void> copyOnly(final Context.ContextDefinition _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
        }

        public static class Builder<_B >implements Buildable
        {

            protected final _B _parentBuilder;
            protected final Context.ContextDefinition _storedValue;
            private CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>> patientGender;
            private CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>> patientAgeGroup;
            private CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>> task;
            private List<Id.Builder<Context.ContextDefinition.Builder<_B>>> serviceDeliveryLocation;
            private CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>> encounterType;
            private CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>> performerLanguage;
            private CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>> performerDiscipline;
            private CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>> performerKnowledgeUserType;
            private CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>> informationRecipientLanguage;
            private CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>> informationRecipientDiscipline;
            private CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>> informationRecipientUserType;
            private CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>> conceptOfInterest;
            private SubTopics.Builder<Context.ContextDefinition.Builder<_B>> subTopics;

            public Builder(final _B _parentBuilder, final Context.ContextDefinition _other, final boolean _copy) {
                this._parentBuilder = _parentBuilder;
                if (_other!= null) {
                    if (_copy) {
                        _storedValue = null;
                        this.patientGender = ((_other.patientGender == null)?null:_other.patientGender.newCopyBuilder(this));
                        this.patientAgeGroup = ((_other.patientAgeGroup == null)?null:_other.patientAgeGroup.newCopyBuilder(this));
                        this.task = ((_other.task == null)?null:_other.task.newCopyBuilder(this));
                        if (_other.serviceDeliveryLocation == null) {
                            this.serviceDeliveryLocation = null;
                        } else {
                            this.serviceDeliveryLocation = new ArrayList<Id.Builder<Context.ContextDefinition.Builder<_B>>>();
                            for (Id _item: _other.serviceDeliveryLocation) {
                                this.serviceDeliveryLocation.add(((_item == null)?null:_item.newCopyBuilder(this)));
                            }
                        }
                        this.encounterType = ((_other.encounterType == null)?null:_other.encounterType.newCopyBuilder(this));
                        this.performerLanguage = ((_other.performerLanguage == null)?null:_other.performerLanguage.newCopyBuilder(this));
                        this.performerDiscipline = ((_other.performerDiscipline == null)?null:_other.performerDiscipline.newCopyBuilder(this));
                        this.performerKnowledgeUserType = ((_other.performerKnowledgeUserType == null)?null:_other.performerKnowledgeUserType.newCopyBuilder(this));
                        this.informationRecipientLanguage = ((_other.informationRecipientLanguage == null)?null:_other.informationRecipientLanguage.newCopyBuilder(this));
                        this.informationRecipientDiscipline = ((_other.informationRecipientDiscipline == null)?null:_other.informationRecipientDiscipline.newCopyBuilder(this));
                        this.informationRecipientUserType = ((_other.informationRecipientUserType == null)?null:_other.informationRecipientUserType.newCopyBuilder(this));
                        this.conceptOfInterest = ((_other.conceptOfInterest == null)?null:_other.conceptOfInterest.newCopyBuilder(this));
                        this.subTopics = ((_other.subTopics == null)?null:_other.subTopics.newCopyBuilder(this));
                    } else {
                        _storedValue = _other;
                    }
                } else {
                    _storedValue = null;
                }
            }

            public Builder(final _B _parentBuilder, final Context.ContextDefinition _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                this._parentBuilder = _parentBuilder;
                if (_other!= null) {
                    if (_copy) {
                        _storedValue = null;
                        final PropertyTree patientGenderPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("patientGender"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(patientGenderPropertyTree!= null):((patientGenderPropertyTree == null)||(!patientGenderPropertyTree.isLeaf())))) {
                            this.patientGender = ((_other.patientGender == null)?null:_other.patientGender.newCopyBuilder(this, patientGenderPropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree patientAgeGroupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("patientAgeGroup"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(patientAgeGroupPropertyTree!= null):((patientAgeGroupPropertyTree == null)||(!patientAgeGroupPropertyTree.isLeaf())))) {
                            this.patientAgeGroup = ((_other.patientAgeGroup == null)?null:_other.patientAgeGroup.newCopyBuilder(this, patientAgeGroupPropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree taskPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("task"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(taskPropertyTree!= null):((taskPropertyTree == null)||(!taskPropertyTree.isLeaf())))) {
                            this.task = ((_other.task == null)?null:_other.task.newCopyBuilder(this, taskPropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree serviceDeliveryLocationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("serviceDeliveryLocation"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(serviceDeliveryLocationPropertyTree!= null):((serviceDeliveryLocationPropertyTree == null)||(!serviceDeliveryLocationPropertyTree.isLeaf())))) {
                            if (_other.serviceDeliveryLocation == null) {
                                this.serviceDeliveryLocation = null;
                            } else {
                                this.serviceDeliveryLocation = new ArrayList<Id.Builder<Context.ContextDefinition.Builder<_B>>>();
                                for (Id _item: _other.serviceDeliveryLocation) {
                                    this.serviceDeliveryLocation.add(((_item == null)?null:_item.newCopyBuilder(this, serviceDeliveryLocationPropertyTree, _propertyTreeUse)));
                                }
                            }
                        }
                        final PropertyTree encounterTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("encounterType"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(encounterTypePropertyTree!= null):((encounterTypePropertyTree == null)||(!encounterTypePropertyTree.isLeaf())))) {
                            this.encounterType = ((_other.encounterType == null)?null:_other.encounterType.newCopyBuilder(this, encounterTypePropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree performerLanguagePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("performerLanguage"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(performerLanguagePropertyTree!= null):((performerLanguagePropertyTree == null)||(!performerLanguagePropertyTree.isLeaf())))) {
                            this.performerLanguage = ((_other.performerLanguage == null)?null:_other.performerLanguage.newCopyBuilder(this, performerLanguagePropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree performerDisciplinePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("performerDiscipline"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(performerDisciplinePropertyTree!= null):((performerDisciplinePropertyTree == null)||(!performerDisciplinePropertyTree.isLeaf())))) {
                            this.performerDiscipline = ((_other.performerDiscipline == null)?null:_other.performerDiscipline.newCopyBuilder(this, performerDisciplinePropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree performerKnowledgeUserTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("performerKnowledgeUserType"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(performerKnowledgeUserTypePropertyTree!= null):((performerKnowledgeUserTypePropertyTree == null)||(!performerKnowledgeUserTypePropertyTree.isLeaf())))) {
                            this.performerKnowledgeUserType = ((_other.performerKnowledgeUserType == null)?null:_other.performerKnowledgeUserType.newCopyBuilder(this, performerKnowledgeUserTypePropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree informationRecipientLanguagePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("informationRecipientLanguage"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(informationRecipientLanguagePropertyTree!= null):((informationRecipientLanguagePropertyTree == null)||(!informationRecipientLanguagePropertyTree.isLeaf())))) {
                            this.informationRecipientLanguage = ((_other.informationRecipientLanguage == null)?null:_other.informationRecipientLanguage.newCopyBuilder(this, informationRecipientLanguagePropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree informationRecipientDisciplinePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("informationRecipientDiscipline"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(informationRecipientDisciplinePropertyTree!= null):((informationRecipientDisciplinePropertyTree == null)||(!informationRecipientDisciplinePropertyTree.isLeaf())))) {
                            this.informationRecipientDiscipline = ((_other.informationRecipientDiscipline == null)?null:_other.informationRecipientDiscipline.newCopyBuilder(this, informationRecipientDisciplinePropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree informationRecipientUserTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("informationRecipientUserType"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(informationRecipientUserTypePropertyTree!= null):((informationRecipientUserTypePropertyTree == null)||(!informationRecipientUserTypePropertyTree.isLeaf())))) {
                            this.informationRecipientUserType = ((_other.informationRecipientUserType == null)?null:_other.informationRecipientUserType.newCopyBuilder(this, informationRecipientUserTypePropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree conceptOfInterestPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("conceptOfInterest"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(conceptOfInterestPropertyTree!= null):((conceptOfInterestPropertyTree == null)||(!conceptOfInterestPropertyTree.isLeaf())))) {
                            this.conceptOfInterest = ((_other.conceptOfInterest == null)?null:_other.conceptOfInterest.newCopyBuilder(this, conceptOfInterestPropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree subTopicsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("subTopics"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(subTopicsPropertyTree!= null):((subTopicsPropertyTree == null)||(!subTopicsPropertyTree.isLeaf())))) {
                            this.subTopics = ((_other.subTopics == null)?null:_other.subTopics.newCopyBuilder(this, subTopicsPropertyTree, _propertyTreeUse));
                        }
                    } else {
                        _storedValue = _other;
                    }
                } else {
                    _storedValue = null;
                }
            }

            public _B end() {
                return this._parentBuilder;
            }

            protected<_P extends Context.ContextDefinition >_P init(final _P _product) {
                _product.patientGender = ((this.patientGender == null)?null:this.patientGender.build());
                _product.patientAgeGroup = ((this.patientAgeGroup == null)?null:this.patientAgeGroup.build());
                _product.task = ((this.task == null)?null:this.task.build());
                if (this.serviceDeliveryLocation!= null) {
                    final List<Id> serviceDeliveryLocation = new ArrayList<Id>(this.serviceDeliveryLocation.size());
                    for (Id.Builder<Context.ContextDefinition.Builder<_B>> _item: this.serviceDeliveryLocation) {
                        serviceDeliveryLocation.add(_item.build());
                    }
                    _product.serviceDeliveryLocation = serviceDeliveryLocation;
                }
                _product.encounterType = ((this.encounterType == null)?null:this.encounterType.build());
                _product.performerLanguage = ((this.performerLanguage == null)?null:this.performerLanguage.build());
                _product.performerDiscipline = ((this.performerDiscipline == null)?null:this.performerDiscipline.build());
                _product.performerKnowledgeUserType = ((this.performerKnowledgeUserType == null)?null:this.performerKnowledgeUserType.build());
                _product.informationRecipientLanguage = ((this.informationRecipientLanguage == null)?null:this.informationRecipientLanguage.build());
                _product.informationRecipientDiscipline = ((this.informationRecipientDiscipline == null)?null:this.informationRecipientDiscipline.build());
                _product.informationRecipientUserType = ((this.informationRecipientUserType == null)?null:this.informationRecipientUserType.build());
                _product.conceptOfInterest = ((this.conceptOfInterest == null)?null:this.conceptOfInterest.build());
                _product.subTopics = ((this.subTopics == null)?null:this.subTopics.build());
                return _product;
            }

            /**
             * Sets the new value of "patientGender" (any previous value will be replaced)
             * 
             * @param patientGender
             *     New value of the "patientGender" property.
             */
            public Context.ContextDefinition.Builder<_B> withPatientGender(final CodedContextElement patientGender) {
                this.patientGender = ((patientGender == null)?null:new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, patientGender, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "patientGender" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "patientGender" property.
             *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             */
            public CodedContextElement.Builder<? extends Context.ContextDefinition.Builder<_B>> withPatientGender() {
                return this.patientGender = new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, null, false);
            }

            /**
             * Sets the new value of "patientAgeGroup" (any previous value will be replaced)
             * 
             * @param patientAgeGroup
             *     New value of the "patientAgeGroup" property.
             */
            public Context.ContextDefinition.Builder<_B> withPatientAgeGroup(final CodedContextElement patientAgeGroup) {
                this.patientAgeGroup = ((patientAgeGroup == null)?null:new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, patientAgeGroup, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "patientAgeGroup" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "patientAgeGroup" property.
             *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             */
            public CodedContextElement.Builder<? extends Context.ContextDefinition.Builder<_B>> withPatientAgeGroup() {
                return this.patientAgeGroup = new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, null, false);
            }

            /**
             * Sets the new value of "task" (any previous value will be replaced)
             * 
             * @param task
             *     New value of the "task" property.
             */
            public Context.ContextDefinition.Builder<_B> withTask(final CodedContextElement task) {
                this.task = ((task == null)?null:new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, task, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "task" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "task" property.
             *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             */
            public CodedContextElement.Builder<? extends Context.ContextDefinition.Builder<_B>> withTask() {
                return this.task = new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, null, false);
            }

            /**
             * Adds the given items to the value of "serviceDeliveryLocation"
             * 
             * @param serviceDeliveryLocation
             *     Items to add to the value of the "serviceDeliveryLocation" property
             */
            public Context.ContextDefinition.Builder<_B> addServiceDeliveryLocation(final Iterable<? extends Id> serviceDeliveryLocation) {
                if (serviceDeliveryLocation!= null) {
                    if (this.serviceDeliveryLocation == null) {
                        this.serviceDeliveryLocation = new ArrayList<Id.Builder<Context.ContextDefinition.Builder<_B>>>();
                    }
                    for (Id _item: serviceDeliveryLocation) {
                        this.serviceDeliveryLocation.add(new Id.Builder<Context.ContextDefinition.Builder<_B>>(this, _item, false));
                    }
                }
                return this;
            }

            /**
             * Sets the new value of "serviceDeliveryLocation" (any previous value will be replaced)
             * 
             * @param serviceDeliveryLocation
             *     New value of the "serviceDeliveryLocation" property.
             */
            public Context.ContextDefinition.Builder<_B> withServiceDeliveryLocation(final Iterable<? extends Id> serviceDeliveryLocation) {
                if (this.serviceDeliveryLocation!= null) {
                    this.serviceDeliveryLocation.clear();
                }
                return addServiceDeliveryLocation(serviceDeliveryLocation);
            }

            /**
             * Adds the given items to the value of "serviceDeliveryLocation"
             * 
             * @param serviceDeliveryLocation
             *     Items to add to the value of the "serviceDeliveryLocation" property
             */
            public Context.ContextDefinition.Builder<_B> addServiceDeliveryLocation(Id... serviceDeliveryLocation) {
                addServiceDeliveryLocation(Arrays.asList(serviceDeliveryLocation));
                return this;
            }

            /**
             * Sets the new value of "serviceDeliveryLocation" (any previous value will be replaced)
             * 
             * @param serviceDeliveryLocation
             *     New value of the "serviceDeliveryLocation" property.
             */
            public Context.ContextDefinition.Builder<_B> withServiceDeliveryLocation(Id... serviceDeliveryLocation) {
                withServiceDeliveryLocation(Arrays.asList(serviceDeliveryLocation));
                return this;
            }

            /**
             * Returns a new builder to build an additional value of the "ServiceDeliveryLocation" property.
             * Use {@link org.openinfobutton.schemas.kb.Id.Builder#end()} to return to the current builder.
             * 
             * @return
             *     a new builder to build an additional value of the "ServiceDeliveryLocation" property.
             *     Use {@link org.openinfobutton.schemas.kb.Id.Builder#end()} to return to the current builder.
             */
            public Id.Builder<? extends Context.ContextDefinition.Builder<_B>> addServiceDeliveryLocation() {
                if (this.serviceDeliveryLocation == null) {
                    this.serviceDeliveryLocation = new ArrayList<Id.Builder<Context.ContextDefinition.Builder<_B>>>();
                }
                final Id.Builder<Context.ContextDefinition.Builder<_B>> serviceDeliveryLocation_Builder = new Id.Builder<Context.ContextDefinition.Builder<_B>>(this, null, false);
                this.serviceDeliveryLocation.add(serviceDeliveryLocation_Builder);
                return serviceDeliveryLocation_Builder;
            }

            /**
             * Sets the new value of "encounterType" (any previous value will be replaced)
             * 
             * @param encounterType
             *     New value of the "encounterType" property.
             */
            public Context.ContextDefinition.Builder<_B> withEncounterType(final CodedContextElement encounterType) {
                this.encounterType = ((encounterType == null)?null:new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, encounterType, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "encounterType" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "encounterType" property.
             *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             */
            public CodedContextElement.Builder<? extends Context.ContextDefinition.Builder<_B>> withEncounterType() {
                return this.encounterType = new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, null, false);
            }

            /**
             * Sets the new value of "performerLanguage" (any previous value will be replaced)
             * 
             * @param performerLanguage
             *     New value of the "performerLanguage" property.
             */
            public Context.ContextDefinition.Builder<_B> withPerformerLanguage(final CodedContextElement performerLanguage) {
                this.performerLanguage = ((performerLanguage == null)?null:new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, performerLanguage, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "performerLanguage" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "performerLanguage" property.
             *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             */
            public CodedContextElement.Builder<? extends Context.ContextDefinition.Builder<_B>> withPerformerLanguage() {
                return this.performerLanguage = new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, null, false);
            }

            /**
             * Sets the new value of "performerDiscipline" (any previous value will be replaced)
             * 
             * @param performerDiscipline
             *     New value of the "performerDiscipline" property.
             */
            public Context.ContextDefinition.Builder<_B> withPerformerDiscipline(final CodedContextElement performerDiscipline) {
                this.performerDiscipline = ((performerDiscipline == null)?null:new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, performerDiscipline, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "performerDiscipline" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "performerDiscipline" property.
             *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             */
            public CodedContextElement.Builder<? extends Context.ContextDefinition.Builder<_B>> withPerformerDiscipline() {
                return this.performerDiscipline = new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, null, false);
            }

            /**
             * Sets the new value of "performerKnowledgeUserType" (any previous value will be replaced)
             * 
             * @param performerKnowledgeUserType
             *     New value of the "performerKnowledgeUserType" property.
             */
            public Context.ContextDefinition.Builder<_B> withPerformerKnowledgeUserType(final CodedContextElement performerKnowledgeUserType) {
                this.performerKnowledgeUserType = ((performerKnowledgeUserType == null)?null:new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, performerKnowledgeUserType, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "performerKnowledgeUserType" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "performerKnowledgeUserType" property.
             *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             */
            public CodedContextElement.Builder<? extends Context.ContextDefinition.Builder<_B>> withPerformerKnowledgeUserType() {
                return this.performerKnowledgeUserType = new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, null, false);
            }

            /**
             * Sets the new value of "informationRecipientLanguage" (any previous value will be replaced)
             * 
             * @param informationRecipientLanguage
             *     New value of the "informationRecipientLanguage" property.
             */
            public Context.ContextDefinition.Builder<_B> withInformationRecipientLanguage(final CodedContextElement informationRecipientLanguage) {
                this.informationRecipientLanguage = ((informationRecipientLanguage == null)?null:new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, informationRecipientLanguage, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "informationRecipientLanguage" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "informationRecipientLanguage" property.
             *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             */
            public CodedContextElement.Builder<? extends Context.ContextDefinition.Builder<_B>> withInformationRecipientLanguage() {
                return this.informationRecipientLanguage = new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, null, false);
            }

            /**
             * Sets the new value of "informationRecipientDiscipline" (any previous value will be replaced)
             * 
             * @param informationRecipientDiscipline
             *     New value of the "informationRecipientDiscipline" property.
             */
            public Context.ContextDefinition.Builder<_B> withInformationRecipientDiscipline(final CodedContextElement informationRecipientDiscipline) {
                this.informationRecipientDiscipline = ((informationRecipientDiscipline == null)?null:new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, informationRecipientDiscipline, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "informationRecipientDiscipline" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "informationRecipientDiscipline" property.
             *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             */
            public CodedContextElement.Builder<? extends Context.ContextDefinition.Builder<_B>> withInformationRecipientDiscipline() {
                return this.informationRecipientDiscipline = new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, null, false);
            }

            /**
             * Sets the new value of "informationRecipientUserType" (any previous value will be replaced)
             * 
             * @param informationRecipientUserType
             *     New value of the "informationRecipientUserType" property.
             */
            public Context.ContextDefinition.Builder<_B> withInformationRecipientUserType(final CodedContextElement informationRecipientUserType) {
                this.informationRecipientUserType = ((informationRecipientUserType == null)?null:new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, informationRecipientUserType, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "informationRecipientUserType" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "informationRecipientUserType" property.
             *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             */
            public CodedContextElement.Builder<? extends Context.ContextDefinition.Builder<_B>> withInformationRecipientUserType() {
                return this.informationRecipientUserType = new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, null, false);
            }

            /**
             * Sets the new value of "conceptOfInterest" (any previous value will be replaced)
             * 
             * @param conceptOfInterest
             *     New value of the "conceptOfInterest" property.
             */
            public Context.ContextDefinition.Builder<_B> withConceptOfInterest(final CodedContextElement conceptOfInterest) {
                this.conceptOfInterest = ((conceptOfInterest == null)?null:new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, conceptOfInterest, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "conceptOfInterest" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "conceptOfInterest" property.
             *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.Builder#end()} to return to the current builder.
             */
            public CodedContextElement.Builder<? extends Context.ContextDefinition.Builder<_B>> withConceptOfInterest() {
                return this.conceptOfInterest = new CodedContextElement.Builder<Context.ContextDefinition.Builder<_B>>(this, null, false);
            }

            /**
             * Sets the new value of "subTopics" (any previous value will be replaced)
             * 
             * @param subTopics
             *     New value of the "subTopics" property.
             */
            public Context.ContextDefinition.Builder<_B> withSubTopics(final SubTopics subTopics) {
                this.subTopics = ((subTopics == null)?null:new SubTopics.Builder<Context.ContextDefinition.Builder<_B>>(this, subTopics, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "subTopics" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.SubTopics.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "subTopics" property.
             *     Use {@link org.openinfobutton.schemas.kb.SubTopics.Builder#end()} to return to the current builder.
             */
            public SubTopics.Builder<? extends Context.ContextDefinition.Builder<_B>> withSubTopics() {
                return this.subTopics = new SubTopics.Builder<Context.ContextDefinition.Builder<_B>>(this, null, false);
            }

            @Override
            public Context.ContextDefinition build() {
                if (_storedValue == null) {
                    return this.init(new Context.ContextDefinition());
                } else {
                    return ((Context.ContextDefinition) _storedValue);
                }
            }

        }

        public static class Select
            extends Context.ContextDefinition.Selector<Context.ContextDefinition.Select, Void>
        {


            Select() {
                super(null, null, null);
            }

            public static Context.ContextDefinition.Select _root() {
                return new Context.ContextDefinition.Select();
            }

        }

        public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
            extends com.kscs.util.jaxb.Selector<TRoot, TParent>
        {

            private CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> patientGender = null;
            private CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> patientAgeGroup = null;
            private CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> task = null;
            private Id.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> serviceDeliveryLocation = null;
            private CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> encounterType = null;
            private CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> performerLanguage = null;
            private CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> performerDiscipline = null;
            private CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> performerKnowledgeUserType = null;
            private CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> informationRecipientLanguage = null;
            private CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> informationRecipientDiscipline = null;
            private CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> informationRecipientUserType = null;
            private CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> conceptOfInterest = null;
            private SubTopics.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> subTopics = null;

            public Selector(final TRoot root, final TParent parent, final String propertyName) {
                super(root, parent, propertyName);
            }

            @Override
            public Map<String, PropertyTree> buildChildren() {
                final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                products.putAll(super.buildChildren());
                if (this.patientGender!= null) {
                    products.put("patientGender", this.patientGender.init());
                }
                if (this.patientAgeGroup!= null) {
                    products.put("patientAgeGroup", this.patientAgeGroup.init());
                }
                if (this.task!= null) {
                    products.put("task", this.task.init());
                }
                if (this.serviceDeliveryLocation!= null) {
                    products.put("serviceDeliveryLocation", this.serviceDeliveryLocation.init());
                }
                if (this.encounterType!= null) {
                    products.put("encounterType", this.encounterType.init());
                }
                if (this.performerLanguage!= null) {
                    products.put("performerLanguage", this.performerLanguage.init());
                }
                if (this.performerDiscipline!= null) {
                    products.put("performerDiscipline", this.performerDiscipline.init());
                }
                if (this.performerKnowledgeUserType!= null) {
                    products.put("performerKnowledgeUserType", this.performerKnowledgeUserType.init());
                }
                if (this.informationRecipientLanguage!= null) {
                    products.put("informationRecipientLanguage", this.informationRecipientLanguage.init());
                }
                if (this.informationRecipientDiscipline!= null) {
                    products.put("informationRecipientDiscipline", this.informationRecipientDiscipline.init());
                }
                if (this.informationRecipientUserType!= null) {
                    products.put("informationRecipientUserType", this.informationRecipientUserType.init());
                }
                if (this.conceptOfInterest!= null) {
                    products.put("conceptOfInterest", this.conceptOfInterest.init());
                }
                if (this.subTopics!= null) {
                    products.put("subTopics", this.subTopics.init());
                }
                return products;
            }

            public CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> patientGender() {
                return ((this.patientGender == null)?this.patientGender = new CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>>(this._root, this, "patientGender"):this.patientGender);
            }

            public CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> patientAgeGroup() {
                return ((this.patientAgeGroup == null)?this.patientAgeGroup = new CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>>(this._root, this, "patientAgeGroup"):this.patientAgeGroup);
            }

            public CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> task() {
                return ((this.task == null)?this.task = new CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>>(this._root, this, "task"):this.task);
            }

            public Id.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> serviceDeliveryLocation() {
                return ((this.serviceDeliveryLocation == null)?this.serviceDeliveryLocation = new Id.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>>(this._root, this, "serviceDeliveryLocation"):this.serviceDeliveryLocation);
            }

            public CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> encounterType() {
                return ((this.encounterType == null)?this.encounterType = new CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>>(this._root, this, "encounterType"):this.encounterType);
            }

            public CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> performerLanguage() {
                return ((this.performerLanguage == null)?this.performerLanguage = new CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>>(this._root, this, "performerLanguage"):this.performerLanguage);
            }

            public CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> performerDiscipline() {
                return ((this.performerDiscipline == null)?this.performerDiscipline = new CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>>(this._root, this, "performerDiscipline"):this.performerDiscipline);
            }

            public CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> performerKnowledgeUserType() {
                return ((this.performerKnowledgeUserType == null)?this.performerKnowledgeUserType = new CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>>(this._root, this, "performerKnowledgeUserType"):this.performerKnowledgeUserType);
            }

            public CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> informationRecipientLanguage() {
                return ((this.informationRecipientLanguage == null)?this.informationRecipientLanguage = new CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>>(this._root, this, "informationRecipientLanguage"):this.informationRecipientLanguage);
            }

            public CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> informationRecipientDiscipline() {
                return ((this.informationRecipientDiscipline == null)?this.informationRecipientDiscipline = new CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>>(this._root, this, "informationRecipientDiscipline"):this.informationRecipientDiscipline);
            }

            public CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> informationRecipientUserType() {
                return ((this.informationRecipientUserType == null)?this.informationRecipientUserType = new CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>>(this._root, this, "informationRecipientUserType"):this.informationRecipientUserType);
            }

            public CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> conceptOfInterest() {
                return ((this.conceptOfInterest == null)?this.conceptOfInterest = new CodedContextElement.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>>(this._root, this, "conceptOfInterest"):this.conceptOfInterest);
            }

            public SubTopics.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>> subTopics() {
                return ((this.subTopics == null)?this.subTopics = new SubTopics.Selector<TRoot, Context.ContextDefinition.Selector<TRoot, TParent>>(this._root, this, "subTopics"):this.subTopics);
            }

        }

    }

    public static class Select
        extends Context.Selector<Context.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static Context.Select _root() {
            return new Context.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, Context.Selector<TRoot, TParent>> contextDescription = null;
        private Context.ContextDefinition.Selector<TRoot, Context.Selector<TRoot, TParent>> contextDefinition = null;
        private KnowledgeRequestService.Selector<TRoot, Context.Selector<TRoot, TParent>> knowledgeRequestService = null;
        private com.kscs.util.jaxb.Selector<TRoot, Context.Selector<TRoot, TParent>> id = null;
        private com.kscs.util.jaxb.Selector<TRoot, Context.Selector<TRoot, TParent>> name = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.contextDescription!= null) {
                products.put("contextDescription", this.contextDescription.init());
            }
            if (this.contextDefinition!= null) {
                products.put("contextDefinition", this.contextDefinition.init());
            }
            if (this.knowledgeRequestService!= null) {
                products.put("knowledgeRequestService", this.knowledgeRequestService.init());
            }
            if (this.id!= null) {
                products.put("id", this.id.init());
            }
            if (this.name!= null) {
                products.put("name", this.name.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, Context.Selector<TRoot, TParent>> contextDescription() {
            return ((this.contextDescription == null)?this.contextDescription = new com.kscs.util.jaxb.Selector<TRoot, Context.Selector<TRoot, TParent>>(this._root, this, "contextDescription"):this.contextDescription);
        }

        public Context.ContextDefinition.Selector<TRoot, Context.Selector<TRoot, TParent>> contextDefinition() {
            return ((this.contextDefinition == null)?this.contextDefinition = new Context.ContextDefinition.Selector<TRoot, Context.Selector<TRoot, TParent>>(this._root, this, "contextDefinition"):this.contextDefinition);
        }

        public KnowledgeRequestService.Selector<TRoot, Context.Selector<TRoot, TParent>> knowledgeRequestService() {
            return ((this.knowledgeRequestService == null)?this.knowledgeRequestService = new KnowledgeRequestService.Selector<TRoot, Context.Selector<TRoot, TParent>>(this._root, this, "knowledgeRequestService"):this.knowledgeRequestService);
        }

        public com.kscs.util.jaxb.Selector<TRoot, Context.Selector<TRoot, TParent>> id() {
            return ((this.id == null)?this.id = new com.kscs.util.jaxb.Selector<TRoot, Context.Selector<TRoot, TParent>>(this._root, this, "id"):this.id);
        }

        public com.kscs.util.jaxb.Selector<TRoot, Context.Selector<TRoot, TParent>> name() {
            return ((this.name == null)?this.name = new com.kscs.util.jaxb.Selector<TRoot, Context.Selector<TRoot, TParent>>(this._root, this, "name"):this.name);
        }

    }

}
