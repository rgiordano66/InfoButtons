//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.10.09 at 12:58:47 PM CDT 
//


package org.openinfobutton.schemas.kb;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;


/**
 * <p>Java class for CD complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CD"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{}code"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CD", propOrder = {
    "code"
})
@XmlSeeAlso({
    org.openinfobutton.schemas.kb.TerminologyInference.CodeInference.InferenceDefinition.ExternalDefinition.TraverseAssociation.class
})
public class CD {

    @XmlElement(required = true)
    protected Code code;

    /**
     * Gets the value of the code property.
     * 
     * @return
     *     possible object is
     *     {@link Code }
     *     
     */
    public Code getCode() {
        return code;
    }

    /**
     * Sets the value of the code property.
     * 
     * @param value
     *     allowed object is
     *     {@link Code }
     *     
     */
    public void setCode(Code value) {
        this.code = value;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final CD.Builder<_B> _other) {
        _other.code = ((this.code == null)?null:this.code.newCopyBuilder(_other));
    }

    public<_B >CD.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new CD.Builder<_B>(_parentBuilder, this, true);
    }

    public CD.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static CD.Builder<Void> builder() {
        return new CD.Builder<Void>(null, null, false);
    }

    public static<_B >CD.Builder<_B> copyOf(final CD _other) {
        final CD.Builder<_B> _newBuilder = new CD.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final CD.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree codePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("code"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(codePropertyTree!= null):((codePropertyTree == null)||(!codePropertyTree.isLeaf())))) {
            _other.code = ((this.code == null)?null:this.code.newCopyBuilder(_other, codePropertyTree, _propertyTreeUse));
        }
    }

    public<_B >CD.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new CD.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public CD.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >CD.Builder<_B> copyOf(final CD _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final CD.Builder<_B> _newBuilder = new CD.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static CD.Builder<Void> copyExcept(final CD _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static CD.Builder<Void> copyOnly(final CD _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        protected final CD _storedValue;
        private Code.Builder<CD.Builder<_B>> code;

        public Builder(final _B _parentBuilder, final CD _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    this.code = ((_other.code == null)?null:_other.code.newCopyBuilder(this));
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public Builder(final _B _parentBuilder, final CD _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    final PropertyTree codePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("code"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(codePropertyTree!= null):((codePropertyTree == null)||(!codePropertyTree.isLeaf())))) {
                        this.code = ((_other.code == null)?null:_other.code.newCopyBuilder(this, codePropertyTree, _propertyTreeUse));
                    }
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends CD >_P init(final _P _product) {
            _product.code = ((this.code == null)?null:this.code.build());
            return _product;
        }

        /**
         * Sets the new value of "code" (any previous value will be replaced)
         * 
         * @param code
         *     New value of the "code" property.
         */
        public CD.Builder<_B> withCode(final Code code) {
            this.code = ((code == null)?null:new Code.Builder<CD.Builder<_B>>(this, code, false));
            return this;
        }

        /**
         * Returns a new builder to build the value of the "code" property (replacing previous value).
         * Use {@link org.openinfobutton.schemas.kb.Code.Builder#end()} to return to the current builder.
         * 
         * @return
         *     A new builder to build the value of the "code" property.
         *     Use {@link org.openinfobutton.schemas.kb.Code.Builder#end()} to return to the current builder.
         */
        public Code.Builder<? extends CD.Builder<_B>> withCode() {
            return this.code = new Code.Builder<CD.Builder<_B>>(this, null, false);
        }

        @Override
        public CD build() {
            if (_storedValue == null) {
                return this.init(new CD());
            } else {
                return ((CD) _storedValue);
            }
        }

    }

    public static class Select
        extends CD.Selector<CD.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static CD.Select _root() {
            return new CD.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private Code.Selector<TRoot, CD.Selector<TRoot, TParent>> code = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.code!= null) {
                products.put("code", this.code.init());
            }
            return products;
        }

        public Code.Selector<TRoot, CD.Selector<TRoot, TParent>> code() {
            return ((this.code == null)?this.code = new Code.Selector<TRoot, CD.Selector<TRoot, TParent>>(this._root, this, "code"):this.code);
        }

    }

}
