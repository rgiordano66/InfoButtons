//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.10.09 at 08:58:15 PM UTC 
//


package org.openinfobutton.schemas.kb;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="valuePrefix" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="nonHl7CompliantName" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="valueSuffix" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "")
@XmlRootElement(name = "syntaxOnResource")
public class SyntaxOnResource {

    @XmlAttribute(name = "valuePrefix")
    protected String valuePrefix;
    @XmlAttribute(name = "nonHl7CompliantName", required = true)
    protected String nonHl7CompliantName;
    @XmlAttribute(name = "valueSuffix")
    protected String valueSuffix;

    /**
     * Gets the value of the valuePrefix property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getValuePrefix() {
        return valuePrefix;
    }

    /**
     * Sets the value of the valuePrefix property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setValuePrefix(String value) {
        this.valuePrefix = value;
    }

    /**
     * Gets the value of the nonHl7CompliantName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNonHl7CompliantName() {
        return nonHl7CompliantName;
    }

    /**
     * Sets the value of the nonHl7CompliantName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNonHl7CompliantName(String value) {
        this.nonHl7CompliantName = value;
    }

    /**
     * Gets the value of the valueSuffix property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getValueSuffix() {
        return valueSuffix;
    }

    /**
     * Sets the value of the valueSuffix property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setValueSuffix(String value) {
        this.valueSuffix = value;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final SyntaxOnResource.Builder<_B> _other) {
        _other.valuePrefix = this.valuePrefix;
        _other.nonHl7CompliantName = this.nonHl7CompliantName;
        _other.valueSuffix = this.valueSuffix;
    }

    public<_B >SyntaxOnResource.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new SyntaxOnResource.Builder<_B>(_parentBuilder, this, true);
    }

    public SyntaxOnResource.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static SyntaxOnResource.Builder<Void> builder() {
        return new SyntaxOnResource.Builder<Void>(null, null, false);
    }

    public static<_B >SyntaxOnResource.Builder<_B> copyOf(final SyntaxOnResource _other) {
        final SyntaxOnResource.Builder<_B> _newBuilder = new SyntaxOnResource.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final SyntaxOnResource.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree valuePrefixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("valuePrefix"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(valuePrefixPropertyTree!= null):((valuePrefixPropertyTree == null)||(!valuePrefixPropertyTree.isLeaf())))) {
            _other.valuePrefix = this.valuePrefix;
        }
        final PropertyTree nonHl7CompliantNamePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("nonHl7CompliantName"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(nonHl7CompliantNamePropertyTree!= null):((nonHl7CompliantNamePropertyTree == null)||(!nonHl7CompliantNamePropertyTree.isLeaf())))) {
            _other.nonHl7CompliantName = this.nonHl7CompliantName;
        }
        final PropertyTree valueSuffixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("valueSuffix"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(valueSuffixPropertyTree!= null):((valueSuffixPropertyTree == null)||(!valueSuffixPropertyTree.isLeaf())))) {
            _other.valueSuffix = this.valueSuffix;
        }
    }

    public<_B >SyntaxOnResource.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new SyntaxOnResource.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public SyntaxOnResource.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >SyntaxOnResource.Builder<_B> copyOf(final SyntaxOnResource _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final SyntaxOnResource.Builder<_B> _newBuilder = new SyntaxOnResource.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static SyntaxOnResource.Builder<Void> copyExcept(final SyntaxOnResource _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static SyntaxOnResource.Builder<Void> copyOnly(final SyntaxOnResource _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        protected final SyntaxOnResource _storedValue;
        private String valuePrefix;
        private String nonHl7CompliantName;
        private String valueSuffix;

        public Builder(final _B _parentBuilder, final SyntaxOnResource _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    this.valuePrefix = _other.valuePrefix;
                    this.nonHl7CompliantName = _other.nonHl7CompliantName;
                    this.valueSuffix = _other.valueSuffix;
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public Builder(final _B _parentBuilder, final SyntaxOnResource _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    final PropertyTree valuePrefixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("valuePrefix"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(valuePrefixPropertyTree!= null):((valuePrefixPropertyTree == null)||(!valuePrefixPropertyTree.isLeaf())))) {
                        this.valuePrefix = _other.valuePrefix;
                    }
                    final PropertyTree nonHl7CompliantNamePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("nonHl7CompliantName"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(nonHl7CompliantNamePropertyTree!= null):((nonHl7CompliantNamePropertyTree == null)||(!nonHl7CompliantNamePropertyTree.isLeaf())))) {
                        this.nonHl7CompliantName = _other.nonHl7CompliantName;
                    }
                    final PropertyTree valueSuffixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("valueSuffix"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(valueSuffixPropertyTree!= null):((valueSuffixPropertyTree == null)||(!valueSuffixPropertyTree.isLeaf())))) {
                        this.valueSuffix = _other.valueSuffix;
                    }
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends SyntaxOnResource >_P init(final _P _product) {
            _product.valuePrefix = this.valuePrefix;
            _product.nonHl7CompliantName = this.nonHl7CompliantName;
            _product.valueSuffix = this.valueSuffix;
            return _product;
        }

        /**
         * Sets the new value of "valuePrefix" (any previous value will be replaced)
         * 
         * @param valuePrefix
         *     New value of the "valuePrefix" property.
         */
        public SyntaxOnResource.Builder<_B> withValuePrefix(final String valuePrefix) {
            this.valuePrefix = valuePrefix;
            return this;
        }

        /**
         * Sets the new value of "nonHl7CompliantName" (any previous value will be replaced)
         * 
         * @param nonHl7CompliantName
         *     New value of the "nonHl7CompliantName" property.
         */
        public SyntaxOnResource.Builder<_B> withNonHl7CompliantName(final String nonHl7CompliantName) {
            this.nonHl7CompliantName = nonHl7CompliantName;
            return this;
        }

        /**
         * Sets the new value of "valueSuffix" (any previous value will be replaced)
         * 
         * @param valueSuffix
         *     New value of the "valueSuffix" property.
         */
        public SyntaxOnResource.Builder<_B> withValueSuffix(final String valueSuffix) {
            this.valueSuffix = valueSuffix;
            return this;
        }

        @Override
        public SyntaxOnResource build() {
            if (_storedValue == null) {
                return this.init(new SyntaxOnResource());
            } else {
                return ((SyntaxOnResource) _storedValue);
            }
        }

    }

    public static class Select
        extends SyntaxOnResource.Selector<SyntaxOnResource.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static SyntaxOnResource.Select _root() {
            return new SyntaxOnResource.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, SyntaxOnResource.Selector<TRoot, TParent>> valuePrefix = null;
        private com.kscs.util.jaxb.Selector<TRoot, SyntaxOnResource.Selector<TRoot, TParent>> nonHl7CompliantName = null;
        private com.kscs.util.jaxb.Selector<TRoot, SyntaxOnResource.Selector<TRoot, TParent>> valueSuffix = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.valuePrefix!= null) {
                products.put("valuePrefix", this.valuePrefix.init());
            }
            if (this.nonHl7CompliantName!= null) {
                products.put("nonHl7CompliantName", this.nonHl7CompliantName.init());
            }
            if (this.valueSuffix!= null) {
                products.put("valueSuffix", this.valueSuffix.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, SyntaxOnResource.Selector<TRoot, TParent>> valuePrefix() {
            return ((this.valuePrefix == null)?this.valuePrefix = new com.kscs.util.jaxb.Selector<TRoot, SyntaxOnResource.Selector<TRoot, TParent>>(this._root, this, "valuePrefix"):this.valuePrefix);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SyntaxOnResource.Selector<TRoot, TParent>> nonHl7CompliantName() {
            return ((this.nonHl7CompliantName == null)?this.nonHl7CompliantName = new com.kscs.util.jaxb.Selector<TRoot, SyntaxOnResource.Selector<TRoot, TParent>>(this._root, this, "nonHl7CompliantName"):this.nonHl7CompliantName);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SyntaxOnResource.Selector<TRoot, TParent>> valueSuffix() {
            return ((this.valueSuffix == null)?this.valueSuffix = new com.kscs.util.jaxb.Selector<TRoot, SyntaxOnResource.Selector<TRoot, TParent>>(this._root, this, "valueSuffix"):this.valueSuffix);
        }

    }

}
