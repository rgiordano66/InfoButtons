//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.10.09 at 12:58:47 PM CDT 
//


package org.openinfobutton.schemas.kb;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;


/**
 * <p>Java class for CodedContextElement complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CodedContextElement"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="matchingDomain" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;choice&gt;
 *                   &lt;element name="enumeration"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;extension base="{}CDset"&gt;
 *                           &lt;attribute name="includeDescendants" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *                         &lt;/extension&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element name="externalValueSet" type="{}Id" maxOccurs="unbounded"/&gt;
 *                 &lt;/choice&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="searchParameter" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element ref="{}syntaxOnResource"/&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attribute name="source" use="required"&gt;
 *                   &lt;simpleType&gt;
 *                     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *                       &lt;enumeration value="code"/&gt;
 *                       &lt;enumeration value="displayName"/&gt;
 *                     &lt;/restriction&gt;
 *                   &lt;/simpleType&gt;
 *                 &lt;/attribute&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="outputCodeTransformation" type="{}Id" minOccurs="0"/&gt;
 *         &lt;element name="outputDisplayNameTransformation" type="{}Id" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="match" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="search" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CodedContextElement", propOrder = {
    "matchingDomain",
    "searchParameter",
    "outputCodeTransformation",
    "outputDisplayNameTransformation"
})
public class CodedContextElement {

    protected CodedContextElement.MatchingDomain matchingDomain;
    protected CodedContextElement.SearchParameter searchParameter;
    protected Id outputCodeTransformation;
    protected Id outputDisplayNameTransformation;
    @XmlAttribute(name = "match", required = true)
    protected boolean match;
    @XmlAttribute(name = "search", required = true)
    protected boolean search;

    /**
     * Gets the value of the matchingDomain property.
     * 
     * @return
     *     possible object is
     *     {@link CodedContextElement.MatchingDomain }
     *     
     */
    public CodedContextElement.MatchingDomain getMatchingDomain() {
        return matchingDomain;
    }

    /**
     * Sets the value of the matchingDomain property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodedContextElement.MatchingDomain }
     *     
     */
    public void setMatchingDomain(CodedContextElement.MatchingDomain value) {
        this.matchingDomain = value;
    }

    /**
     * Gets the value of the searchParameter property.
     * 
     * @return
     *     possible object is
     *     {@link CodedContextElement.SearchParameter }
     *     
     */
    public CodedContextElement.SearchParameter getSearchParameter() {
        return searchParameter;
    }

    /**
     * Sets the value of the searchParameter property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodedContextElement.SearchParameter }
     *     
     */
    public void setSearchParameter(CodedContextElement.SearchParameter value) {
        this.searchParameter = value;
    }

    /**
     * Gets the value of the outputCodeTransformation property.
     * 
     * @return
     *     possible object is
     *     {@link Id }
     *     
     */
    public Id getOutputCodeTransformation() {
        return outputCodeTransformation;
    }

    /**
     * Sets the value of the outputCodeTransformation property.
     * 
     * @param value
     *     allowed object is
     *     {@link Id }
     *     
     */
    public void setOutputCodeTransformation(Id value) {
        this.outputCodeTransformation = value;
    }

    /**
     * Gets the value of the outputDisplayNameTransformation property.
     * 
     * @return
     *     possible object is
     *     {@link Id }
     *     
     */
    public Id getOutputDisplayNameTransformation() {
        return outputDisplayNameTransformation;
    }

    /**
     * Sets the value of the outputDisplayNameTransformation property.
     * 
     * @param value
     *     allowed object is
     *     {@link Id }
     *     
     */
    public void setOutputDisplayNameTransformation(Id value) {
        this.outputDisplayNameTransformation = value;
    }

    /**
     * Gets the value of the match property.
     * 
     */
    public boolean isMatch() {
        return match;
    }

    /**
     * Sets the value of the match property.
     * 
     */
    public void setMatch(boolean value) {
        this.match = value;
    }

    /**
     * Gets the value of the search property.
     * 
     */
    public boolean isSearch() {
        return search;
    }

    /**
     * Sets the value of the search property.
     * 
     */
    public void setSearch(boolean value) {
        this.search = value;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final CodedContextElement.Builder<_B> _other) {
        _other.matchingDomain = ((this.matchingDomain == null)?null:this.matchingDomain.newCopyBuilder(_other));
        _other.searchParameter = ((this.searchParameter == null)?null:this.searchParameter.newCopyBuilder(_other));
        _other.outputCodeTransformation = ((this.outputCodeTransformation == null)?null:this.outputCodeTransformation.newCopyBuilder(_other));
        _other.outputDisplayNameTransformation = ((this.outputDisplayNameTransformation == null)?null:this.outputDisplayNameTransformation.newCopyBuilder(_other));
        _other.match = this.match;
        _other.search = this.search;
    }

    public<_B >CodedContextElement.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new CodedContextElement.Builder<_B>(_parentBuilder, this, true);
    }

    public CodedContextElement.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static CodedContextElement.Builder<Void> builder() {
        return new CodedContextElement.Builder<Void>(null, null, false);
    }

    public static<_B >CodedContextElement.Builder<_B> copyOf(final CodedContextElement _other) {
        final CodedContextElement.Builder<_B> _newBuilder = new CodedContextElement.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final CodedContextElement.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree matchingDomainPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("matchingDomain"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(matchingDomainPropertyTree!= null):((matchingDomainPropertyTree == null)||(!matchingDomainPropertyTree.isLeaf())))) {
            _other.matchingDomain = ((this.matchingDomain == null)?null:this.matchingDomain.newCopyBuilder(_other, matchingDomainPropertyTree, _propertyTreeUse));
        }
        final PropertyTree searchParameterPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("searchParameter"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(searchParameterPropertyTree!= null):((searchParameterPropertyTree == null)||(!searchParameterPropertyTree.isLeaf())))) {
            _other.searchParameter = ((this.searchParameter == null)?null:this.searchParameter.newCopyBuilder(_other, searchParameterPropertyTree, _propertyTreeUse));
        }
        final PropertyTree outputCodeTransformationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("outputCodeTransformation"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(outputCodeTransformationPropertyTree!= null):((outputCodeTransformationPropertyTree == null)||(!outputCodeTransformationPropertyTree.isLeaf())))) {
            _other.outputCodeTransformation = ((this.outputCodeTransformation == null)?null:this.outputCodeTransformation.newCopyBuilder(_other, outputCodeTransformationPropertyTree, _propertyTreeUse));
        }
        final PropertyTree outputDisplayNameTransformationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("outputDisplayNameTransformation"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(outputDisplayNameTransformationPropertyTree!= null):((outputDisplayNameTransformationPropertyTree == null)||(!outputDisplayNameTransformationPropertyTree.isLeaf())))) {
            _other.outputDisplayNameTransformation = ((this.outputDisplayNameTransformation == null)?null:this.outputDisplayNameTransformation.newCopyBuilder(_other, outputDisplayNameTransformationPropertyTree, _propertyTreeUse));
        }
        final PropertyTree matchPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("match"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(matchPropertyTree!= null):((matchPropertyTree == null)||(!matchPropertyTree.isLeaf())))) {
            _other.match = this.match;
        }
        final PropertyTree searchPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("search"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(searchPropertyTree!= null):((searchPropertyTree == null)||(!searchPropertyTree.isLeaf())))) {
            _other.search = this.search;
        }
    }

    public<_B >CodedContextElement.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new CodedContextElement.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public CodedContextElement.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >CodedContextElement.Builder<_B> copyOf(final CodedContextElement _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final CodedContextElement.Builder<_B> _newBuilder = new CodedContextElement.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static CodedContextElement.Builder<Void> copyExcept(final CodedContextElement _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static CodedContextElement.Builder<Void> copyOnly(final CodedContextElement _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        protected final CodedContextElement _storedValue;
        private CodedContextElement.MatchingDomain.Builder<CodedContextElement.Builder<_B>> matchingDomain;
        private CodedContextElement.SearchParameter.Builder<CodedContextElement.Builder<_B>> searchParameter;
        private Id.Builder<CodedContextElement.Builder<_B>> outputCodeTransformation;
        private Id.Builder<CodedContextElement.Builder<_B>> outputDisplayNameTransformation;
        private boolean match;
        private boolean search;

        public Builder(final _B _parentBuilder, final CodedContextElement _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    this.matchingDomain = ((_other.matchingDomain == null)?null:_other.matchingDomain.newCopyBuilder(this));
                    this.searchParameter = ((_other.searchParameter == null)?null:_other.searchParameter.newCopyBuilder(this));
                    this.outputCodeTransformation = ((_other.outputCodeTransformation == null)?null:_other.outputCodeTransformation.newCopyBuilder(this));
                    this.outputDisplayNameTransformation = ((_other.outputDisplayNameTransformation == null)?null:_other.outputDisplayNameTransformation.newCopyBuilder(this));
                    this.match = _other.match;
                    this.search = _other.search;
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public Builder(final _B _parentBuilder, final CodedContextElement _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    final PropertyTree matchingDomainPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("matchingDomain"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(matchingDomainPropertyTree!= null):((matchingDomainPropertyTree == null)||(!matchingDomainPropertyTree.isLeaf())))) {
                        this.matchingDomain = ((_other.matchingDomain == null)?null:_other.matchingDomain.newCopyBuilder(this, matchingDomainPropertyTree, _propertyTreeUse));
                    }
                    final PropertyTree searchParameterPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("searchParameter"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(searchParameterPropertyTree!= null):((searchParameterPropertyTree == null)||(!searchParameterPropertyTree.isLeaf())))) {
                        this.searchParameter = ((_other.searchParameter == null)?null:_other.searchParameter.newCopyBuilder(this, searchParameterPropertyTree, _propertyTreeUse));
                    }
                    final PropertyTree outputCodeTransformationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("outputCodeTransformation"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(outputCodeTransformationPropertyTree!= null):((outputCodeTransformationPropertyTree == null)||(!outputCodeTransformationPropertyTree.isLeaf())))) {
                        this.outputCodeTransformation = ((_other.outputCodeTransformation == null)?null:_other.outputCodeTransformation.newCopyBuilder(this, outputCodeTransformationPropertyTree, _propertyTreeUse));
                    }
                    final PropertyTree outputDisplayNameTransformationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("outputDisplayNameTransformation"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(outputDisplayNameTransformationPropertyTree!= null):((outputDisplayNameTransformationPropertyTree == null)||(!outputDisplayNameTransformationPropertyTree.isLeaf())))) {
                        this.outputDisplayNameTransformation = ((_other.outputDisplayNameTransformation == null)?null:_other.outputDisplayNameTransformation.newCopyBuilder(this, outputDisplayNameTransformationPropertyTree, _propertyTreeUse));
                    }
                    final PropertyTree matchPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("match"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(matchPropertyTree!= null):((matchPropertyTree == null)||(!matchPropertyTree.isLeaf())))) {
                        this.match = _other.match;
                    }
                    final PropertyTree searchPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("search"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(searchPropertyTree!= null):((searchPropertyTree == null)||(!searchPropertyTree.isLeaf())))) {
                        this.search = _other.search;
                    }
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends CodedContextElement >_P init(final _P _product) {
            _product.matchingDomain = ((this.matchingDomain == null)?null:this.matchingDomain.build());
            _product.searchParameter = ((this.searchParameter == null)?null:this.searchParameter.build());
            _product.outputCodeTransformation = ((this.outputCodeTransformation == null)?null:this.outputCodeTransformation.build());
            _product.outputDisplayNameTransformation = ((this.outputDisplayNameTransformation == null)?null:this.outputDisplayNameTransformation.build());
            _product.match = this.match;
            _product.search = this.search;
            return _product;
        }

        /**
         * Sets the new value of "matchingDomain" (any previous value will be replaced)
         * 
         * @param matchingDomain
         *     New value of the "matchingDomain" property.
         */
        public CodedContextElement.Builder<_B> withMatchingDomain(final CodedContextElement.MatchingDomain matchingDomain) {
            this.matchingDomain = ((matchingDomain == null)?null:new CodedContextElement.MatchingDomain.Builder<CodedContextElement.Builder<_B>>(this, matchingDomain, false));
            return this;
        }

        /**
         * Returns a new builder to build the value of the "matchingDomain" property (replacing previous value).
         * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.MatchingDomain.Builder#end()} to return to the current builder.
         * 
         * @return
         *     A new builder to build the value of the "matchingDomain" property.
         *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.MatchingDomain.Builder#end()} to return to the current builder.
         */
        public CodedContextElement.MatchingDomain.Builder<? extends CodedContextElement.Builder<_B>> withMatchingDomain() {
            return this.matchingDomain = new CodedContextElement.MatchingDomain.Builder<CodedContextElement.Builder<_B>>(this, null, false);
        }

        /**
         * Sets the new value of "searchParameter" (any previous value will be replaced)
         * 
         * @param searchParameter
         *     New value of the "searchParameter" property.
         */
        public CodedContextElement.Builder<_B> withSearchParameter(final CodedContextElement.SearchParameter searchParameter) {
            this.searchParameter = ((searchParameter == null)?null:new CodedContextElement.SearchParameter.Builder<CodedContextElement.Builder<_B>>(this, searchParameter, false));
            return this;
        }

        /**
         * Returns a new builder to build the value of the "searchParameter" property (replacing previous value).
         * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.SearchParameter.Builder#end()} to return to the current builder.
         * 
         * @return
         *     A new builder to build the value of the "searchParameter" property.
         *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.SearchParameter.Builder#end()} to return to the current builder.
         */
        public CodedContextElement.SearchParameter.Builder<? extends CodedContextElement.Builder<_B>> withSearchParameter() {
            return this.searchParameter = new CodedContextElement.SearchParameter.Builder<CodedContextElement.Builder<_B>>(this, null, false);
        }

        /**
         * Sets the new value of "outputCodeTransformation" (any previous value will be replaced)
         * 
         * @param outputCodeTransformation
         *     New value of the "outputCodeTransformation" property.
         */
        public CodedContextElement.Builder<_B> withOutputCodeTransformation(final Id outputCodeTransformation) {
            this.outputCodeTransformation = ((outputCodeTransformation == null)?null:new Id.Builder<CodedContextElement.Builder<_B>>(this, outputCodeTransformation, false));
            return this;
        }

        /**
         * Returns a new builder to build the value of the "outputCodeTransformation" property (replacing previous value).
         * Use {@link org.openinfobutton.schemas.kb.Id.Builder#end()} to return to the current builder.
         * 
         * @return
         *     A new builder to build the value of the "outputCodeTransformation" property.
         *     Use {@link org.openinfobutton.schemas.kb.Id.Builder#end()} to return to the current builder.
         */
        public Id.Builder<? extends CodedContextElement.Builder<_B>> withOutputCodeTransformation() {
            return this.outputCodeTransformation = new Id.Builder<CodedContextElement.Builder<_B>>(this, null, false);
        }

        /**
         * Sets the new value of "outputDisplayNameTransformation" (any previous value will be replaced)
         * 
         * @param outputDisplayNameTransformation
         *     New value of the "outputDisplayNameTransformation" property.
         */
        public CodedContextElement.Builder<_B> withOutputDisplayNameTransformation(final Id outputDisplayNameTransformation) {
            this.outputDisplayNameTransformation = ((outputDisplayNameTransformation == null)?null:new Id.Builder<CodedContextElement.Builder<_B>>(this, outputDisplayNameTransformation, false));
            return this;
        }

        /**
         * Returns a new builder to build the value of the "outputDisplayNameTransformation" property (replacing previous value).
         * Use {@link org.openinfobutton.schemas.kb.Id.Builder#end()} to return to the current builder.
         * 
         * @return
         *     A new builder to build the value of the "outputDisplayNameTransformation" property.
         *     Use {@link org.openinfobutton.schemas.kb.Id.Builder#end()} to return to the current builder.
         */
        public Id.Builder<? extends CodedContextElement.Builder<_B>> withOutputDisplayNameTransformation() {
            return this.outputDisplayNameTransformation = new Id.Builder<CodedContextElement.Builder<_B>>(this, null, false);
        }

        /**
         * Sets the new value of "match" (any previous value will be replaced)
         * 
         * @param match
         *     New value of the "match" property.
         */
        public CodedContextElement.Builder<_B> withMatch(final boolean match) {
            this.match = match;
            return this;
        }

        /**
         * Sets the new value of "search" (any previous value will be replaced)
         * 
         * @param search
         *     New value of the "search" property.
         */
        public CodedContextElement.Builder<_B> withSearch(final boolean search) {
            this.search = search;
            return this;
        }

        @Override
        public CodedContextElement build() {
            if (_storedValue == null) {
                return this.init(new CodedContextElement());
            } else {
                return ((CodedContextElement) _storedValue);
            }
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;choice&gt;
     *         &lt;element name="enumeration"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;extension base="{}CDset"&gt;
     *                 &lt;attribute name="includeDescendants" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
     *               &lt;/extension&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="externalValueSet" type="{}Id" maxOccurs="unbounded"/&gt;
     *       &lt;/choice&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "enumeration",
        "externalValueSet"
    })
    public static class MatchingDomain {

        protected CodedContextElement.MatchingDomain.Enumeration enumeration;
        protected List<Id> externalValueSet;

        /**
         * Gets the value of the enumeration property.
         * 
         * @return
         *     possible object is
         *     {@link CodedContextElement.MatchingDomain.Enumeration }
         *     
         */
        public CodedContextElement.MatchingDomain.Enumeration getEnumeration() {
            return enumeration;
        }

        /**
         * Sets the value of the enumeration property.
         * 
         * @param value
         *     allowed object is
         *     {@link CodedContextElement.MatchingDomain.Enumeration }
         *     
         */
        public void setEnumeration(CodedContextElement.MatchingDomain.Enumeration value) {
            this.enumeration = value;
        }

        /**
         * Gets the value of the externalValueSet property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the externalValueSet property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getExternalValueSet().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Id }
         * 
         * 
         */
        public List<Id> getExternalValueSet() {
            if (externalValueSet == null) {
                externalValueSet = new ArrayList<Id>();
            }
            return this.externalValueSet;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final CodedContextElement.MatchingDomain.Builder<_B> _other) {
            _other.enumeration = ((this.enumeration == null)?null:this.enumeration.newCopyBuilder(_other));
            if (this.externalValueSet == null) {
                _other.externalValueSet = null;
            } else {
                _other.externalValueSet = new ArrayList<Id.Builder<CodedContextElement.MatchingDomain.Builder<_B>>>();
                for (Id _item: this.externalValueSet) {
                    _other.externalValueSet.add(((_item == null)?null:_item.newCopyBuilder(_other)));
                }
            }
        }

        public<_B >CodedContextElement.MatchingDomain.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
            return new CodedContextElement.MatchingDomain.Builder<_B>(_parentBuilder, this, true);
        }

        public CodedContextElement.MatchingDomain.Builder<Void> newCopyBuilder() {
            return newCopyBuilder(null);
        }

        public static CodedContextElement.MatchingDomain.Builder<Void> builder() {
            return new CodedContextElement.MatchingDomain.Builder<Void>(null, null, false);
        }

        public static<_B >CodedContextElement.MatchingDomain.Builder<_B> copyOf(final CodedContextElement.MatchingDomain _other) {
            final CodedContextElement.MatchingDomain.Builder<_B> _newBuilder = new CodedContextElement.MatchingDomain.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder);
            return _newBuilder;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final CodedContextElement.MatchingDomain.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final PropertyTree enumerationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("enumeration"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(enumerationPropertyTree!= null):((enumerationPropertyTree == null)||(!enumerationPropertyTree.isLeaf())))) {
                _other.enumeration = ((this.enumeration == null)?null:this.enumeration.newCopyBuilder(_other, enumerationPropertyTree, _propertyTreeUse));
            }
            final PropertyTree externalValueSetPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("externalValueSet"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(externalValueSetPropertyTree!= null):((externalValueSetPropertyTree == null)||(!externalValueSetPropertyTree.isLeaf())))) {
                if (this.externalValueSet == null) {
                    _other.externalValueSet = null;
                } else {
                    _other.externalValueSet = new ArrayList<Id.Builder<CodedContextElement.MatchingDomain.Builder<_B>>>();
                    for (Id _item: this.externalValueSet) {
                        _other.externalValueSet.add(((_item == null)?null:_item.newCopyBuilder(_other, externalValueSetPropertyTree, _propertyTreeUse)));
                    }
                }
            }
        }

        public<_B >CodedContextElement.MatchingDomain.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return new CodedContextElement.MatchingDomain.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
        }

        public CodedContextElement.MatchingDomain.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
        }

        public static<_B >CodedContextElement.MatchingDomain.Builder<_B> copyOf(final CodedContextElement.MatchingDomain _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final CodedContextElement.MatchingDomain.Builder<_B> _newBuilder = new CodedContextElement.MatchingDomain.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
            return _newBuilder;
        }

        public static CodedContextElement.MatchingDomain.Builder<Void> copyExcept(final CodedContextElement.MatchingDomain _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
        }

        public static CodedContextElement.MatchingDomain.Builder<Void> copyOnly(final CodedContextElement.MatchingDomain _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
        }

        public static class Builder<_B >implements Buildable
        {

            protected final _B _parentBuilder;
            protected final CodedContextElement.MatchingDomain _storedValue;
            private CodedContextElement.MatchingDomain.Enumeration.Builder<CodedContextElement.MatchingDomain.Builder<_B>> enumeration;
            private List<Id.Builder<CodedContextElement.MatchingDomain.Builder<_B>>> externalValueSet;

            public Builder(final _B _parentBuilder, final CodedContextElement.MatchingDomain _other, final boolean _copy) {
                this._parentBuilder = _parentBuilder;
                if (_other!= null) {
                    if (_copy) {
                        _storedValue = null;
                        this.enumeration = ((_other.enumeration == null)?null:_other.enumeration.newCopyBuilder(this));
                        if (_other.externalValueSet == null) {
                            this.externalValueSet = null;
                        } else {
                            this.externalValueSet = new ArrayList<Id.Builder<CodedContextElement.MatchingDomain.Builder<_B>>>();
                            for (Id _item: _other.externalValueSet) {
                                this.externalValueSet.add(((_item == null)?null:_item.newCopyBuilder(this)));
                            }
                        }
                    } else {
                        _storedValue = _other;
                    }
                } else {
                    _storedValue = null;
                }
            }

            public Builder(final _B _parentBuilder, final CodedContextElement.MatchingDomain _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                this._parentBuilder = _parentBuilder;
                if (_other!= null) {
                    if (_copy) {
                        _storedValue = null;
                        final PropertyTree enumerationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("enumeration"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(enumerationPropertyTree!= null):((enumerationPropertyTree == null)||(!enumerationPropertyTree.isLeaf())))) {
                            this.enumeration = ((_other.enumeration == null)?null:_other.enumeration.newCopyBuilder(this, enumerationPropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree externalValueSetPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("externalValueSet"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(externalValueSetPropertyTree!= null):((externalValueSetPropertyTree == null)||(!externalValueSetPropertyTree.isLeaf())))) {
                            if (_other.externalValueSet == null) {
                                this.externalValueSet = null;
                            } else {
                                this.externalValueSet = new ArrayList<Id.Builder<CodedContextElement.MatchingDomain.Builder<_B>>>();
                                for (Id _item: _other.externalValueSet) {
                                    this.externalValueSet.add(((_item == null)?null:_item.newCopyBuilder(this, externalValueSetPropertyTree, _propertyTreeUse)));
                                }
                            }
                        }
                    } else {
                        _storedValue = _other;
                    }
                } else {
                    _storedValue = null;
                }
            }

            public _B end() {
                return this._parentBuilder;
            }

            protected<_P extends CodedContextElement.MatchingDomain >_P init(final _P _product) {
                _product.enumeration = ((this.enumeration == null)?null:this.enumeration.build());
                if (this.externalValueSet!= null) {
                    final List<Id> externalValueSet = new ArrayList<Id>(this.externalValueSet.size());
                    for (Id.Builder<CodedContextElement.MatchingDomain.Builder<_B>> _item: this.externalValueSet) {
                        externalValueSet.add(_item.build());
                    }
                    _product.externalValueSet = externalValueSet;
                }
                return _product;
            }

            /**
             * Sets the new value of "enumeration" (any previous value will be replaced)
             * 
             * @param enumeration
             *     New value of the "enumeration" property.
             */
            public CodedContextElement.MatchingDomain.Builder<_B> withEnumeration(final CodedContextElement.MatchingDomain.Enumeration enumeration) {
                this.enumeration = ((enumeration == null)?null:new CodedContextElement.MatchingDomain.Enumeration.Builder<CodedContextElement.MatchingDomain.Builder<_B>>(this, enumeration, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "enumeration" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.CodedContextElement.MatchingDomain.Enumeration.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "enumeration" property.
             *     Use {@link org.openinfobutton.schemas.kb.CodedContextElement.MatchingDomain.Enumeration.Builder#end()} to return to the current builder.
             */
            public CodedContextElement.MatchingDomain.Enumeration.Builder<? extends CodedContextElement.MatchingDomain.Builder<_B>> withEnumeration() {
                return this.enumeration = new CodedContextElement.MatchingDomain.Enumeration.Builder<CodedContextElement.MatchingDomain.Builder<_B>>(this, null, false);
            }

            /**
             * Adds the given items to the value of "externalValueSet"
             * 
             * @param externalValueSet
             *     Items to add to the value of the "externalValueSet" property
             */
            public CodedContextElement.MatchingDomain.Builder<_B> addExternalValueSet(final Iterable<? extends Id> externalValueSet) {
                if (externalValueSet!= null) {
                    if (this.externalValueSet == null) {
                        this.externalValueSet = new ArrayList<Id.Builder<CodedContextElement.MatchingDomain.Builder<_B>>>();
                    }
                    for (Id _item: externalValueSet) {
                        this.externalValueSet.add(new Id.Builder<CodedContextElement.MatchingDomain.Builder<_B>>(this, _item, false));
                    }
                }
                return this;
            }

            /**
             * Sets the new value of "externalValueSet" (any previous value will be replaced)
             * 
             * @param externalValueSet
             *     New value of the "externalValueSet" property.
             */
            public CodedContextElement.MatchingDomain.Builder<_B> withExternalValueSet(final Iterable<? extends Id> externalValueSet) {
                if (this.externalValueSet!= null) {
                    this.externalValueSet.clear();
                }
                return addExternalValueSet(externalValueSet);
            }

            /**
             * Adds the given items to the value of "externalValueSet"
             * 
             * @param externalValueSet
             *     Items to add to the value of the "externalValueSet" property
             */
            public CodedContextElement.MatchingDomain.Builder<_B> addExternalValueSet(Id... externalValueSet) {
                addExternalValueSet(Arrays.asList(externalValueSet));
                return this;
            }

            /**
             * Sets the new value of "externalValueSet" (any previous value will be replaced)
             * 
             * @param externalValueSet
             *     New value of the "externalValueSet" property.
             */
            public CodedContextElement.MatchingDomain.Builder<_B> withExternalValueSet(Id... externalValueSet) {
                withExternalValueSet(Arrays.asList(externalValueSet));
                return this;
            }

            /**
             * Returns a new builder to build an additional value of the "ExternalValueSet" property.
             * Use {@link org.openinfobutton.schemas.kb.Id.Builder#end()} to return to the current builder.
             * 
             * @return
             *     a new builder to build an additional value of the "ExternalValueSet" property.
             *     Use {@link org.openinfobutton.schemas.kb.Id.Builder#end()} to return to the current builder.
             */
            public Id.Builder<? extends CodedContextElement.MatchingDomain.Builder<_B>> addExternalValueSet() {
                if (this.externalValueSet == null) {
                    this.externalValueSet = new ArrayList<Id.Builder<CodedContextElement.MatchingDomain.Builder<_B>>>();
                }
                final Id.Builder<CodedContextElement.MatchingDomain.Builder<_B>> externalValueSet_Builder = new Id.Builder<CodedContextElement.MatchingDomain.Builder<_B>>(this, null, false);
                this.externalValueSet.add(externalValueSet_Builder);
                return externalValueSet_Builder;
            }

            @Override
            public CodedContextElement.MatchingDomain build() {
                if (_storedValue == null) {
                    return this.init(new CodedContextElement.MatchingDomain());
                } else {
                    return ((CodedContextElement.MatchingDomain) _storedValue);
                }
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;extension base="{}CDset"&gt;
         *       &lt;attribute name="includeDescendants" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
         *     &lt;/extension&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class Enumeration
            extends CDset
        {

            @XmlAttribute(name = "includeDescendants")
            protected Boolean includeDescendants;

            /**
             * Gets the value of the includeDescendants property.
             * 
             * @return
             *     possible object is
             *     {@link Boolean }
             *     
             */
            public Boolean isIncludeDescendants() {
                return includeDescendants;
            }

            /**
             * Sets the value of the includeDescendants property.
             * 
             * @param value
             *     allowed object is
             *     {@link Boolean }
             *     
             */
            public void setIncludeDescendants(Boolean value) {
                this.includeDescendants = value;
            }

            /**
             * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
             * 
             * @param _other
             *     A builder instance to which the state of this object will be copied.
             */
            public<_B >void copyTo(final CodedContextElement.MatchingDomain.Enumeration.Builder<_B> _other) {
                super.copyTo(_other);
                _other.includeDescendants = this.includeDescendants;
            }

            @Override
            public<_B >CodedContextElement.MatchingDomain.Enumeration.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
                return new CodedContextElement.MatchingDomain.Enumeration.Builder<_B>(_parentBuilder, this, true);
            }

            @Override
            public CodedContextElement.MatchingDomain.Enumeration.Builder<Void> newCopyBuilder() {
                return newCopyBuilder(null);
            }

            public static CodedContextElement.MatchingDomain.Enumeration.Builder<Void> builder() {
                return new CodedContextElement.MatchingDomain.Enumeration.Builder<Void>(null, null, false);
            }

            public static<_B >CodedContextElement.MatchingDomain.Enumeration.Builder<_B> copyOf(final CDset _other) {
                final CodedContextElement.MatchingDomain.Enumeration.Builder<_B> _newBuilder = new CodedContextElement.MatchingDomain.Enumeration.Builder<_B>(null, null, false);
                _other.copyTo(_newBuilder);
                return _newBuilder;
            }

            public static<_B >CodedContextElement.MatchingDomain.Enumeration.Builder<_B> copyOf(final CodedContextElement.MatchingDomain.Enumeration _other) {
                final CodedContextElement.MatchingDomain.Enumeration.Builder<_B> _newBuilder = new CodedContextElement.MatchingDomain.Enumeration.Builder<_B>(null, null, false);
                _other.copyTo(_newBuilder);
                return _newBuilder;
            }

            /**
             * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
             * 
             * @param _other
             *     A builder instance to which the state of this object will be copied.
             */
            public<_B >void copyTo(final CodedContextElement.MatchingDomain.Enumeration.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                super.copyTo(_other, _propertyTree, _propertyTreeUse);
                final PropertyTree includeDescendantsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("includeDescendants"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(includeDescendantsPropertyTree!= null):((includeDescendantsPropertyTree == null)||(!includeDescendantsPropertyTree.isLeaf())))) {
                    _other.includeDescendants = this.includeDescendants;
                }
            }

            @Override
            public<_B >CodedContextElement.MatchingDomain.Enumeration.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                return new CodedContextElement.MatchingDomain.Enumeration.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
            }

            @Override
            public CodedContextElement.MatchingDomain.Enumeration.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
            }

            public static<_B >CodedContextElement.MatchingDomain.Enumeration.Builder<_B> copyOf(final CDset _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                final CodedContextElement.MatchingDomain.Enumeration.Builder<_B> _newBuilder = new CodedContextElement.MatchingDomain.Enumeration.Builder<_B>(null, null, false);
                _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
                return _newBuilder;
            }

            public static<_B >CodedContextElement.MatchingDomain.Enumeration.Builder<_B> copyOf(final CodedContextElement.MatchingDomain.Enumeration _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                final CodedContextElement.MatchingDomain.Enumeration.Builder<_B> _newBuilder = new CodedContextElement.MatchingDomain.Enumeration.Builder<_B>(null, null, false);
                _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
                return _newBuilder;
            }

            public static CodedContextElement.MatchingDomain.Enumeration.Builder<Void> copyExcept(final CDset _other, final PropertyTree _propertyTree) {
                return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
            }

            public static CodedContextElement.MatchingDomain.Enumeration.Builder<Void> copyExcept(final CodedContextElement.MatchingDomain.Enumeration _other, final PropertyTree _propertyTree) {
                return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
            }

            public static CodedContextElement.MatchingDomain.Enumeration.Builder<Void> copyOnly(final CDset _other, final PropertyTree _propertyTree) {
                return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
            }

            public static CodedContextElement.MatchingDomain.Enumeration.Builder<Void> copyOnly(final CodedContextElement.MatchingDomain.Enumeration _other, final PropertyTree _propertyTree) {
                return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
            }

            public static class Builder<_B >
                extends CDset.Builder<_B>
                implements Buildable
            {

                private Boolean includeDescendants;

                public Builder(final _B _parentBuilder, final CodedContextElement.MatchingDomain.Enumeration _other, final boolean _copy) {
                    super(_parentBuilder, _other, _copy);
                    if (_other!= null) {
                        this.includeDescendants = _other.includeDescendants;
                    }
                }

                public Builder(final _B _parentBuilder, final CodedContextElement.MatchingDomain.Enumeration _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                    super(_parentBuilder, _other, _copy, _propertyTree, _propertyTreeUse);
                    if (_other!= null) {
                        final PropertyTree includeDescendantsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("includeDescendants"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(includeDescendantsPropertyTree!= null):((includeDescendantsPropertyTree == null)||(!includeDescendantsPropertyTree.isLeaf())))) {
                            this.includeDescendants = _other.includeDescendants;
                        }
                    }
                }

                protected<_P extends CodedContextElement.MatchingDomain.Enumeration >_P init(final _P _product) {
                    _product.includeDescendants = this.includeDescendants;
                    return super.init(_product);
                }

                /**
                 * Sets the new value of "includeDescendants" (any previous value will be replaced)
                 * 
                 * @param includeDescendants
                 *     New value of the "includeDescendants" property.
                 */
                public CodedContextElement.MatchingDomain.Enumeration.Builder<_B> withIncludeDescendants(final Boolean includeDescendants) {
                    this.includeDescendants = includeDescendants;
                    return this;
                }

                /**
                 * Adds the given items to the value of "code"
                 * 
                 * @param code
                 *     Items to add to the value of the "code" property
                 */
                @Override
                public CodedContextElement.MatchingDomain.Enumeration.Builder<_B> addCode(final Iterable<? extends Code> code) {
                    super.addCode(code);
                    return this;
                }

                /**
                 * Adds the given items to the value of "code"
                 * 
                 * @param code
                 *     Items to add to the value of the "code" property
                 */
                @Override
                public CodedContextElement.MatchingDomain.Enumeration.Builder<_B> addCode(Code... code) {
                    super.addCode(code);
                    return this;
                }

                /**
                 * Sets the new value of "code" (any previous value will be replaced)
                 * 
                 * @param code
                 *     New value of the "code" property.
                 */
                @Override
                public CodedContextElement.MatchingDomain.Enumeration.Builder<_B> withCode(final Iterable<? extends Code> code) {
                    super.withCode(code);
                    return this;
                }

                /**
                 * Sets the new value of "code" (any previous value will be replaced)
                 * 
                 * @param code
                 *     New value of the "code" property.
                 */
                @Override
                public CodedContextElement.MatchingDomain.Enumeration.Builder<_B> withCode(Code... code) {
                    super.withCode(code);
                    return this;
                }

                /**
                 * Returns a new builder to build an additional value of the "code" property.
                 * Use {@link org.openinfobutton.schemas.kb.Code.Builder#end()} to return to the current builder.
                 * 
                 * @return
                 *     a new builder to build an additional value of the "code" property.
                 *     Use {@link org.openinfobutton.schemas.kb.Code.Builder#end()} to return to the current builder.
                 */
                @Override
                public Code.Builder<? extends CodedContextElement.MatchingDomain.Enumeration.Builder<_B>> addCode() {
                    return ((Code.Builder<? extends CodedContextElement.MatchingDomain.Enumeration.Builder<_B>> ) super.addCode());
                }

                @Override
                public CodedContextElement.MatchingDomain.Enumeration build() {
                    if (_storedValue == null) {
                        return this.init(new CodedContextElement.MatchingDomain.Enumeration());
                    } else {
                        return ((CodedContextElement.MatchingDomain.Enumeration) _storedValue);
                    }
                }

            }

            public static class Select
                extends CodedContextElement.MatchingDomain.Enumeration.Selector<CodedContextElement.MatchingDomain.Enumeration.Select, Void>
            {


                Select() {
                    super(null, null, null);
                }

                public static CodedContextElement.MatchingDomain.Enumeration.Select _root() {
                    return new CodedContextElement.MatchingDomain.Enumeration.Select();
                }

            }

            public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
                extends CDset.Selector<TRoot, TParent>
            {

                private com.kscs.util.jaxb.Selector<TRoot, CodedContextElement.MatchingDomain.Enumeration.Selector<TRoot, TParent>> includeDescendants = null;

                public Selector(final TRoot root, final TParent parent, final String propertyName) {
                    super(root, parent, propertyName);
                }

                @Override
                public Map<String, PropertyTree> buildChildren() {
                    final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                    products.putAll(super.buildChildren());
                    if (this.includeDescendants!= null) {
                        products.put("includeDescendants", this.includeDescendants.init());
                    }
                    return products;
                }

                public com.kscs.util.jaxb.Selector<TRoot, CodedContextElement.MatchingDomain.Enumeration.Selector<TRoot, TParent>> includeDescendants() {
                    return ((this.includeDescendants == null)?this.includeDescendants = new com.kscs.util.jaxb.Selector<TRoot, CodedContextElement.MatchingDomain.Enumeration.Selector<TRoot, TParent>>(this._root, this, "includeDescendants"):this.includeDescendants);
                }

            }

        }

        public static class Select
            extends CodedContextElement.MatchingDomain.Selector<CodedContextElement.MatchingDomain.Select, Void>
        {


            Select() {
                super(null, null, null);
            }

            public static CodedContextElement.MatchingDomain.Select _root() {
                return new CodedContextElement.MatchingDomain.Select();
            }

        }

        public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
            extends com.kscs.util.jaxb.Selector<TRoot, TParent>
        {

            private CodedContextElement.MatchingDomain.Enumeration.Selector<TRoot, CodedContextElement.MatchingDomain.Selector<TRoot, TParent>> enumeration = null;
            private Id.Selector<TRoot, CodedContextElement.MatchingDomain.Selector<TRoot, TParent>> externalValueSet = null;

            public Selector(final TRoot root, final TParent parent, final String propertyName) {
                super(root, parent, propertyName);
            }

            @Override
            public Map<String, PropertyTree> buildChildren() {
                final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                products.putAll(super.buildChildren());
                if (this.enumeration!= null) {
                    products.put("enumeration", this.enumeration.init());
                }
                if (this.externalValueSet!= null) {
                    products.put("externalValueSet", this.externalValueSet.init());
                }
                return products;
            }

            public CodedContextElement.MatchingDomain.Enumeration.Selector<TRoot, CodedContextElement.MatchingDomain.Selector<TRoot, TParent>> enumeration() {
                return ((this.enumeration == null)?this.enumeration = new CodedContextElement.MatchingDomain.Enumeration.Selector<TRoot, CodedContextElement.MatchingDomain.Selector<TRoot, TParent>>(this._root, this, "enumeration"):this.enumeration);
            }

            public Id.Selector<TRoot, CodedContextElement.MatchingDomain.Selector<TRoot, TParent>> externalValueSet() {
                return ((this.externalValueSet == null)?this.externalValueSet = new Id.Selector<TRoot, CodedContextElement.MatchingDomain.Selector<TRoot, TParent>>(this._root, this, "externalValueSet"):this.externalValueSet);
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element ref="{}syntaxOnResource"/&gt;
     *       &lt;/sequence&gt;
     *       &lt;attribute name="source" use="required"&gt;
     *         &lt;simpleType&gt;
     *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
     *             &lt;enumeration value="code"/&gt;
     *             &lt;enumeration value="displayName"/&gt;
     *           &lt;/restriction&gt;
     *         &lt;/simpleType&gt;
     *       &lt;/attribute&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "syntaxOnResource"
    })
    public static class SearchParameter {

        @XmlElement(required = true)
        protected SyntaxOnResource syntaxOnResource;
        @XmlAttribute(name = "source", required = true)
        protected String source;

        /**
         * Defines the parameter name  to be used in case the resource is not HL7 compliant for a given context. 
         * 
         * @return
         *     possible object is
         *     {@link SyntaxOnResource }
         *     
         */
        public SyntaxOnResource getSyntaxOnResource() {
            return syntaxOnResource;
        }

        /**
         * Sets the value of the syntaxOnResource property.
         * 
         * @param value
         *     allowed object is
         *     {@link SyntaxOnResource }
         *     
         */
        public void setSyntaxOnResource(SyntaxOnResource value) {
            this.syntaxOnResource = value;
        }

        /**
         * Gets the value of the source property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSource() {
            return source;
        }

        /**
         * Sets the value of the source property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSource(String value) {
            this.source = value;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final CodedContextElement.SearchParameter.Builder<_B> _other) {
            _other.syntaxOnResource = ((this.syntaxOnResource == null)?null:this.syntaxOnResource.newCopyBuilder(_other));
            _other.source = this.source;
        }

        public<_B >CodedContextElement.SearchParameter.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
            return new CodedContextElement.SearchParameter.Builder<_B>(_parentBuilder, this, true);
        }

        public CodedContextElement.SearchParameter.Builder<Void> newCopyBuilder() {
            return newCopyBuilder(null);
        }

        public static CodedContextElement.SearchParameter.Builder<Void> builder() {
            return new CodedContextElement.SearchParameter.Builder<Void>(null, null, false);
        }

        public static<_B >CodedContextElement.SearchParameter.Builder<_B> copyOf(final CodedContextElement.SearchParameter _other) {
            final CodedContextElement.SearchParameter.Builder<_B> _newBuilder = new CodedContextElement.SearchParameter.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder);
            return _newBuilder;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final CodedContextElement.SearchParameter.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final PropertyTree syntaxOnResourcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("syntaxOnResource"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(syntaxOnResourcePropertyTree!= null):((syntaxOnResourcePropertyTree == null)||(!syntaxOnResourcePropertyTree.isLeaf())))) {
                _other.syntaxOnResource = ((this.syntaxOnResource == null)?null:this.syntaxOnResource.newCopyBuilder(_other, syntaxOnResourcePropertyTree, _propertyTreeUse));
            }
            final PropertyTree sourcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("source"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sourcePropertyTree!= null):((sourcePropertyTree == null)||(!sourcePropertyTree.isLeaf())))) {
                _other.source = this.source;
            }
        }

        public<_B >CodedContextElement.SearchParameter.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return new CodedContextElement.SearchParameter.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
        }

        public CodedContextElement.SearchParameter.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
        }

        public static<_B >CodedContextElement.SearchParameter.Builder<_B> copyOf(final CodedContextElement.SearchParameter _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final CodedContextElement.SearchParameter.Builder<_B> _newBuilder = new CodedContextElement.SearchParameter.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
            return _newBuilder;
        }

        public static CodedContextElement.SearchParameter.Builder<Void> copyExcept(final CodedContextElement.SearchParameter _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
        }

        public static CodedContextElement.SearchParameter.Builder<Void> copyOnly(final CodedContextElement.SearchParameter _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
        }

        public static class Builder<_B >implements Buildable
        {

            protected final _B _parentBuilder;
            protected final CodedContextElement.SearchParameter _storedValue;
            private SyntaxOnResource.Builder<CodedContextElement.SearchParameter.Builder<_B>> syntaxOnResource;
            private String source;

            public Builder(final _B _parentBuilder, final CodedContextElement.SearchParameter _other, final boolean _copy) {
                this._parentBuilder = _parentBuilder;
                if (_other!= null) {
                    if (_copy) {
                        _storedValue = null;
                        this.syntaxOnResource = ((_other.syntaxOnResource == null)?null:_other.syntaxOnResource.newCopyBuilder(this));
                        this.source = _other.source;
                    } else {
                        _storedValue = _other;
                    }
                } else {
                    _storedValue = null;
                }
            }

            public Builder(final _B _parentBuilder, final CodedContextElement.SearchParameter _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                this._parentBuilder = _parentBuilder;
                if (_other!= null) {
                    if (_copy) {
                        _storedValue = null;
                        final PropertyTree syntaxOnResourcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("syntaxOnResource"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(syntaxOnResourcePropertyTree!= null):((syntaxOnResourcePropertyTree == null)||(!syntaxOnResourcePropertyTree.isLeaf())))) {
                            this.syntaxOnResource = ((_other.syntaxOnResource == null)?null:_other.syntaxOnResource.newCopyBuilder(this, syntaxOnResourcePropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree sourcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("source"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sourcePropertyTree!= null):((sourcePropertyTree == null)||(!sourcePropertyTree.isLeaf())))) {
                            this.source = _other.source;
                        }
                    } else {
                        _storedValue = _other;
                    }
                } else {
                    _storedValue = null;
                }
            }

            public _B end() {
                return this._parentBuilder;
            }

            protected<_P extends CodedContextElement.SearchParameter >_P init(final _P _product) {
                _product.syntaxOnResource = ((this.syntaxOnResource == null)?null:this.syntaxOnResource.build());
                _product.source = this.source;
                return _product;
            }

            /**
             * Sets the new value of "syntaxOnResource" (any previous value will be replaced)
             * 
             * @param syntaxOnResource
             *     New value of the "syntaxOnResource" property.
             */
            public CodedContextElement.SearchParameter.Builder<_B> withSyntaxOnResource(final SyntaxOnResource syntaxOnResource) {
                this.syntaxOnResource = ((syntaxOnResource == null)?null:new SyntaxOnResource.Builder<CodedContextElement.SearchParameter.Builder<_B>>(this, syntaxOnResource, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "syntaxOnResource" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.SyntaxOnResource.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "syntaxOnResource" property.
             *     Use {@link org.openinfobutton.schemas.kb.SyntaxOnResource.Builder#end()} to return to the current builder.
             */
            public SyntaxOnResource.Builder<? extends CodedContextElement.SearchParameter.Builder<_B>> withSyntaxOnResource() {
                return this.syntaxOnResource = new SyntaxOnResource.Builder<CodedContextElement.SearchParameter.Builder<_B>>(this, null, false);
            }

            /**
             * Sets the new value of "source" (any previous value will be replaced)
             * 
             * @param source
             *     New value of the "source" property.
             */
            public CodedContextElement.SearchParameter.Builder<_B> withSource(final String source) {
                this.source = source;
                return this;
            }

            @Override
            public CodedContextElement.SearchParameter build() {
                if (_storedValue == null) {
                    return this.init(new CodedContextElement.SearchParameter());
                } else {
                    return ((CodedContextElement.SearchParameter) _storedValue);
                }
            }

        }

        public static class Select
            extends CodedContextElement.SearchParameter.Selector<CodedContextElement.SearchParameter.Select, Void>
        {


            Select() {
                super(null, null, null);
            }

            public static CodedContextElement.SearchParameter.Select _root() {
                return new CodedContextElement.SearchParameter.Select();
            }

        }

        public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
            extends com.kscs.util.jaxb.Selector<TRoot, TParent>
        {

            private SyntaxOnResource.Selector<TRoot, CodedContextElement.SearchParameter.Selector<TRoot, TParent>> syntaxOnResource = null;
            private com.kscs.util.jaxb.Selector<TRoot, CodedContextElement.SearchParameter.Selector<TRoot, TParent>> source = null;

            public Selector(final TRoot root, final TParent parent, final String propertyName) {
                super(root, parent, propertyName);
            }

            @Override
            public Map<String, PropertyTree> buildChildren() {
                final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                products.putAll(super.buildChildren());
                if (this.syntaxOnResource!= null) {
                    products.put("syntaxOnResource", this.syntaxOnResource.init());
                }
                if (this.source!= null) {
                    products.put("source", this.source.init());
                }
                return products;
            }

            public SyntaxOnResource.Selector<TRoot, CodedContextElement.SearchParameter.Selector<TRoot, TParent>> syntaxOnResource() {
                return ((this.syntaxOnResource == null)?this.syntaxOnResource = new SyntaxOnResource.Selector<TRoot, CodedContextElement.SearchParameter.Selector<TRoot, TParent>>(this._root, this, "syntaxOnResource"):this.syntaxOnResource);
            }

            public com.kscs.util.jaxb.Selector<TRoot, CodedContextElement.SearchParameter.Selector<TRoot, TParent>> source() {
                return ((this.source == null)?this.source = new com.kscs.util.jaxb.Selector<TRoot, CodedContextElement.SearchParameter.Selector<TRoot, TParent>>(this._root, this, "source"):this.source);
            }

        }

    }

    public static class Select
        extends CodedContextElement.Selector<CodedContextElement.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static CodedContextElement.Select _root() {
            return new CodedContextElement.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private CodedContextElement.MatchingDomain.Selector<TRoot, CodedContextElement.Selector<TRoot, TParent>> matchingDomain = null;
        private CodedContextElement.SearchParameter.Selector<TRoot, CodedContextElement.Selector<TRoot, TParent>> searchParameter = null;
        private Id.Selector<TRoot, CodedContextElement.Selector<TRoot, TParent>> outputCodeTransformation = null;
        private Id.Selector<TRoot, CodedContextElement.Selector<TRoot, TParent>> outputDisplayNameTransformation = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.matchingDomain!= null) {
                products.put("matchingDomain", this.matchingDomain.init());
            }
            if (this.searchParameter!= null) {
                products.put("searchParameter", this.searchParameter.init());
            }
            if (this.outputCodeTransformation!= null) {
                products.put("outputCodeTransformation", this.outputCodeTransformation.init());
            }
            if (this.outputDisplayNameTransformation!= null) {
                products.put("outputDisplayNameTransformation", this.outputDisplayNameTransformation.init());
            }
            return products;
        }

        public CodedContextElement.MatchingDomain.Selector<TRoot, CodedContextElement.Selector<TRoot, TParent>> matchingDomain() {
            return ((this.matchingDomain == null)?this.matchingDomain = new CodedContextElement.MatchingDomain.Selector<TRoot, CodedContextElement.Selector<TRoot, TParent>>(this._root, this, "matchingDomain"):this.matchingDomain);
        }

        public CodedContextElement.SearchParameter.Selector<TRoot, CodedContextElement.Selector<TRoot, TParent>> searchParameter() {
            return ((this.searchParameter == null)?this.searchParameter = new CodedContextElement.SearchParameter.Selector<TRoot, CodedContextElement.Selector<TRoot, TParent>>(this._root, this, "searchParameter"):this.searchParameter);
        }

        public Id.Selector<TRoot, CodedContextElement.Selector<TRoot, TParent>> outputCodeTransformation() {
            return ((this.outputCodeTransformation == null)?this.outputCodeTransformation = new Id.Selector<TRoot, CodedContextElement.Selector<TRoot, TParent>>(this._root, this, "outputCodeTransformation"):this.outputCodeTransformation);
        }

        public Id.Selector<TRoot, CodedContextElement.Selector<TRoot, TParent>> outputDisplayNameTransformation() {
            return ((this.outputDisplayNameTransformation == null)?this.outputDisplayNameTransformation = new Id.Selector<TRoot, CodedContextElement.Selector<TRoot, TParent>>(this._root, this, "outputDisplayNameTransformation"):this.outputDisplayNameTransformation);
        }

    }

}
