//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.10.09 at 12:58:47 PM CDT 
//


package org.openinfobutton.schemas.kb;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{}eMail" maxOccurs="unbounded"/&gt;
 *         &lt;element ref="{}phone" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "eMail",
    "phone"
})
@XmlRootElement(name = "contactInformation")
public class ContactInformation {

    @XmlElement(required = true)
    protected List<String> eMail;
    protected List<String> phone;

    /**
     * Gets the value of the eMail property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the eMail property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEMail().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getEMail() {
        if (eMail == null) {
            eMail = new ArrayList<String>();
        }
        return this.eMail;
    }

    /**
     * Gets the value of the phone property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the phone property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPhone().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getPhone() {
        if (phone == null) {
            phone = new ArrayList<String>();
        }
        return this.phone;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final ContactInformation.Builder<_B> _other) {
        if (this.eMail == null) {
            _other.eMail = null;
        } else {
            _other.eMail = new ArrayList<Buildable>();
            for (String _item: this.eMail) {
                _other.eMail.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
            }
        }
        if (this.phone == null) {
            _other.phone = null;
        } else {
            _other.phone = new ArrayList<Buildable>();
            for (String _item: this.phone) {
                _other.phone.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
            }
        }
    }

    public<_B >ContactInformation.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new ContactInformation.Builder<_B>(_parentBuilder, this, true);
    }

    public ContactInformation.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static ContactInformation.Builder<Void> builder() {
        return new ContactInformation.Builder<Void>(null, null, false);
    }

    public static<_B >ContactInformation.Builder<_B> copyOf(final ContactInformation _other) {
        final ContactInformation.Builder<_B> _newBuilder = new ContactInformation.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final ContactInformation.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree eMailPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("eMail"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eMailPropertyTree!= null):((eMailPropertyTree == null)||(!eMailPropertyTree.isLeaf())))) {
            if (this.eMail == null) {
                _other.eMail = null;
            } else {
                _other.eMail = new ArrayList<Buildable>();
                for (String _item: this.eMail) {
                    _other.eMail.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                }
            }
        }
        final PropertyTree phonePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("phone"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(phonePropertyTree!= null):((phonePropertyTree == null)||(!phonePropertyTree.isLeaf())))) {
            if (this.phone == null) {
                _other.phone = null;
            } else {
                _other.phone = new ArrayList<Buildable>();
                for (String _item: this.phone) {
                    _other.phone.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                }
            }
        }
    }

    public<_B >ContactInformation.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new ContactInformation.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public ContactInformation.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >ContactInformation.Builder<_B> copyOf(final ContactInformation _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final ContactInformation.Builder<_B> _newBuilder = new ContactInformation.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static ContactInformation.Builder<Void> copyExcept(final ContactInformation _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static ContactInformation.Builder<Void> copyOnly(final ContactInformation _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        protected final ContactInformation _storedValue;
        private List<Buildable> eMail;
        private List<Buildable> phone;

        public Builder(final _B _parentBuilder, final ContactInformation _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    if (_other.eMail == null) {
                        this.eMail = null;
                    } else {
                        this.eMail = new ArrayList<Buildable>();
                        for (String _item: _other.eMail) {
                            this.eMail.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                        }
                    }
                    if (_other.phone == null) {
                        this.phone = null;
                    } else {
                        this.phone = new ArrayList<Buildable>();
                        for (String _item: _other.phone) {
                            this.phone.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                        }
                    }
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public Builder(final _B _parentBuilder, final ContactInformation _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    final PropertyTree eMailPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("eMail"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eMailPropertyTree!= null):((eMailPropertyTree == null)||(!eMailPropertyTree.isLeaf())))) {
                        if (_other.eMail == null) {
                            this.eMail = null;
                        } else {
                            this.eMail = new ArrayList<Buildable>();
                            for (String _item: _other.eMail) {
                                this.eMail.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                            }
                        }
                    }
                    final PropertyTree phonePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("phone"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(phonePropertyTree!= null):((phonePropertyTree == null)||(!phonePropertyTree.isLeaf())))) {
                        if (_other.phone == null) {
                            this.phone = null;
                        } else {
                            this.phone = new ArrayList<Buildable>();
                            for (String _item: _other.phone) {
                                this.phone.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                            }
                        }
                    }
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends ContactInformation >_P init(final _P _product) {
            if (this.eMail!= null) {
                final List<String> eMail = new ArrayList<String>(this.eMail.size());
                for (Buildable _item: this.eMail) {
                    eMail.add(((String) _item.build()));
                }
                _product.eMail = eMail;
            }
            if (this.phone!= null) {
                final List<String> phone = new ArrayList<String>(this.phone.size());
                for (Buildable _item: this.phone) {
                    phone.add(((String) _item.build()));
                }
                _product.phone = phone;
            }
            return _product;
        }

        /**
         * Adds the given items to the value of "eMail"
         * 
         * @param eMail
         *     Items to add to the value of the "eMail" property
         */
        public ContactInformation.Builder<_B> addEMail(final Iterable<? extends String> eMail) {
            if (eMail!= null) {
                if (this.eMail == null) {
                    this.eMail = new ArrayList<Buildable>();
                }
                for (String _item: eMail) {
                    this.eMail.add(new Buildable.PrimitiveBuildable(_item));
                }
            }
            return this;
        }

        /**
         * Sets the new value of "eMail" (any previous value will be replaced)
         * 
         * @param eMail
         *     New value of the "eMail" property.
         */
        public ContactInformation.Builder<_B> withEMail(final Iterable<? extends String> eMail) {
            if (this.eMail!= null) {
                this.eMail.clear();
            }
            return addEMail(eMail);
        }

        /**
         * Adds the given items to the value of "eMail"
         * 
         * @param eMail
         *     Items to add to the value of the "eMail" property
         */
        public ContactInformation.Builder<_B> addEMail(String... eMail) {
            addEMail(Arrays.asList(eMail));
            return this;
        }

        /**
         * Sets the new value of "eMail" (any previous value will be replaced)
         * 
         * @param eMail
         *     New value of the "eMail" property.
         */
        public ContactInformation.Builder<_B> withEMail(String... eMail) {
            withEMail(Arrays.asList(eMail));
            return this;
        }

        /**
         * Adds the given items to the value of "phone"
         * 
         * @param phone
         *     Items to add to the value of the "phone" property
         */
        public ContactInformation.Builder<_B> addPhone(final Iterable<? extends String> phone) {
            if (phone!= null) {
                if (this.phone == null) {
                    this.phone = new ArrayList<Buildable>();
                }
                for (String _item: phone) {
                    this.phone.add(new Buildable.PrimitiveBuildable(_item));
                }
            }
            return this;
        }

        /**
         * Sets the new value of "phone" (any previous value will be replaced)
         * 
         * @param phone
         *     New value of the "phone" property.
         */
        public ContactInformation.Builder<_B> withPhone(final Iterable<? extends String> phone) {
            if (this.phone!= null) {
                this.phone.clear();
            }
            return addPhone(phone);
        }

        /**
         * Adds the given items to the value of "phone"
         * 
         * @param phone
         *     Items to add to the value of the "phone" property
         */
        public ContactInformation.Builder<_B> addPhone(String... phone) {
            addPhone(Arrays.asList(phone));
            return this;
        }

        /**
         * Sets the new value of "phone" (any previous value will be replaced)
         * 
         * @param phone
         *     New value of the "phone" property.
         */
        public ContactInformation.Builder<_B> withPhone(String... phone) {
            withPhone(Arrays.asList(phone));
            return this;
        }

        @Override
        public ContactInformation build() {
            if (_storedValue == null) {
                return this.init(new ContactInformation());
            } else {
                return ((ContactInformation) _storedValue);
            }
        }

    }

    public static class Select
        extends ContactInformation.Selector<ContactInformation.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static ContactInformation.Select _root() {
            return new ContactInformation.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, ContactInformation.Selector<TRoot, TParent>> eMail = null;
        private com.kscs.util.jaxb.Selector<TRoot, ContactInformation.Selector<TRoot, TParent>> phone = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.eMail!= null) {
                products.put("eMail", this.eMail.init());
            }
            if (this.phone!= null) {
                products.put("phone", this.phone.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, ContactInformation.Selector<TRoot, TParent>> eMail() {
            return ((this.eMail == null)?this.eMail = new com.kscs.util.jaxb.Selector<TRoot, ContactInformation.Selector<TRoot, TParent>>(this._root, this, "eMail"):this.eMail);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ContactInformation.Selector<TRoot, TParent>> phone() {
            return ((this.phone == null)?this.phone = new com.kscs.util.jaxb.Selector<TRoot, ContactInformation.Selector<TRoot, TParent>>(this._root, this, "phone"):this.phone);
        }

    }

}
