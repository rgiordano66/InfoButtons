//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.10.09 at 12:58:47 PM CDT 
//


package org.openinfobutton.schemas.kb;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;


/**
 * <p>Java class for SubTopic complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SubTopic"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="searchParameter" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="valueSource"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;choice&gt;
 *                             &lt;element name="searchCode" type="{}CD"/&gt;
 *                             &lt;element name="searchTerm" type="{}ST"/&gt;
 *                           &lt;/choice&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;element ref="{}syntaxOnResource" minOccurs="0"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="linkName" use="required" type="{}ST" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SubTopic", propOrder = {
    "searchParameter"
})
public class SubTopic {

    protected SubTopic.SearchParameter searchParameter;
    @XmlAttribute(name = "linkName", required = true)
    protected String linkName;

    /**
     * Gets the value of the searchParameter property.
     * 
     * @return
     *     possible object is
     *     {@link SubTopic.SearchParameter }
     *     
     */
    public SubTopic.SearchParameter getSearchParameter() {
        return searchParameter;
    }

    /**
     * Sets the value of the searchParameter property.
     * 
     * @param value
     *     allowed object is
     *     {@link SubTopic.SearchParameter }
     *     
     */
    public void setSearchParameter(SubTopic.SearchParameter value) {
        this.searchParameter = value;
    }

    /**
     * Gets the value of the linkName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLinkName() {
        return linkName;
    }

    /**
     * Sets the value of the linkName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLinkName(String value) {
        this.linkName = value;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final SubTopic.Builder<_B> _other) {
        _other.searchParameter = ((this.searchParameter == null)?null:this.searchParameter.newCopyBuilder(_other));
        _other.linkName = this.linkName;
    }

    public<_B >SubTopic.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new SubTopic.Builder<_B>(_parentBuilder, this, true);
    }

    public SubTopic.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static SubTopic.Builder<Void> builder() {
        return new SubTopic.Builder<Void>(null, null, false);
    }

    public static<_B >SubTopic.Builder<_B> copyOf(final SubTopic _other) {
        final SubTopic.Builder<_B> _newBuilder = new SubTopic.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final SubTopic.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree searchParameterPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("searchParameter"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(searchParameterPropertyTree!= null):((searchParameterPropertyTree == null)||(!searchParameterPropertyTree.isLeaf())))) {
            _other.searchParameter = ((this.searchParameter == null)?null:this.searchParameter.newCopyBuilder(_other, searchParameterPropertyTree, _propertyTreeUse));
        }
        final PropertyTree linkNamePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("linkName"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(linkNamePropertyTree!= null):((linkNamePropertyTree == null)||(!linkNamePropertyTree.isLeaf())))) {
            _other.linkName = this.linkName;
        }
    }

    public<_B >SubTopic.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new SubTopic.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public SubTopic.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >SubTopic.Builder<_B> copyOf(final SubTopic _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final SubTopic.Builder<_B> _newBuilder = new SubTopic.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static SubTopic.Builder<Void> copyExcept(final SubTopic _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static SubTopic.Builder<Void> copyOnly(final SubTopic _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        protected final SubTopic _storedValue;
        private SubTopic.SearchParameter.Builder<SubTopic.Builder<_B>> searchParameter;
        private String linkName;

        public Builder(final _B _parentBuilder, final SubTopic _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    this.searchParameter = ((_other.searchParameter == null)?null:_other.searchParameter.newCopyBuilder(this));
                    this.linkName = _other.linkName;
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public Builder(final _B _parentBuilder, final SubTopic _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    final PropertyTree searchParameterPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("searchParameter"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(searchParameterPropertyTree!= null):((searchParameterPropertyTree == null)||(!searchParameterPropertyTree.isLeaf())))) {
                        this.searchParameter = ((_other.searchParameter == null)?null:_other.searchParameter.newCopyBuilder(this, searchParameterPropertyTree, _propertyTreeUse));
                    }
                    final PropertyTree linkNamePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("linkName"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(linkNamePropertyTree!= null):((linkNamePropertyTree == null)||(!linkNamePropertyTree.isLeaf())))) {
                        this.linkName = _other.linkName;
                    }
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends SubTopic >_P init(final _P _product) {
            _product.searchParameter = ((this.searchParameter == null)?null:this.searchParameter.build());
            _product.linkName = this.linkName;
            return _product;
        }

        /**
         * Sets the new value of "searchParameter" (any previous value will be replaced)
         * 
         * @param searchParameter
         *     New value of the "searchParameter" property.
         */
        public SubTopic.Builder<_B> withSearchParameter(final SubTopic.SearchParameter searchParameter) {
            this.searchParameter = ((searchParameter == null)?null:new SubTopic.SearchParameter.Builder<SubTopic.Builder<_B>>(this, searchParameter, false));
            return this;
        }

        /**
         * Returns a new builder to build the value of the "searchParameter" property (replacing previous value).
         * Use {@link org.openinfobutton.schemas.kb.SubTopic.SearchParameter.Builder#end()} to return to the current builder.
         * 
         * @return
         *     A new builder to build the value of the "searchParameter" property.
         *     Use {@link org.openinfobutton.schemas.kb.SubTopic.SearchParameter.Builder#end()} to return to the current builder.
         */
        public SubTopic.SearchParameter.Builder<? extends SubTopic.Builder<_B>> withSearchParameter() {
            return this.searchParameter = new SubTopic.SearchParameter.Builder<SubTopic.Builder<_B>>(this, null, false);
        }

        /**
         * Sets the new value of "linkName" (any previous value will be replaced)
         * 
         * @param linkName
         *     New value of the "linkName" property.
         */
        public SubTopic.Builder<_B> withLinkName(final String linkName) {
            this.linkName = linkName;
            return this;
        }

        @Override
        public SubTopic build() {
            if (_storedValue == null) {
                return this.init(new SubTopic());
            } else {
                return ((SubTopic) _storedValue);
            }
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="valueSource"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;choice&gt;
     *                   &lt;element name="searchCode" type="{}CD"/&gt;
     *                   &lt;element name="searchTerm" type="{}ST"/&gt;
     *                 &lt;/choice&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element ref="{}syntaxOnResource" minOccurs="0"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "valueSource",
        "syntaxOnResource"
    })
    public static class SearchParameter {

        @XmlElement(required = true)
        protected SubTopic.SearchParameter.ValueSource valueSource;
        protected SyntaxOnResource syntaxOnResource;

        /**
         * Gets the value of the valueSource property.
         * 
         * @return
         *     possible object is
         *     {@link SubTopic.SearchParameter.ValueSource }
         *     
         */
        public SubTopic.SearchParameter.ValueSource getValueSource() {
            return valueSource;
        }

        /**
         * Sets the value of the valueSource property.
         * 
         * @param value
         *     allowed object is
         *     {@link SubTopic.SearchParameter.ValueSource }
         *     
         */
        public void setValueSource(SubTopic.SearchParameter.ValueSource value) {
            this.valueSource = value;
        }

        /**
         * Gets the value of the syntaxOnResource property.
         * 
         * @return
         *     possible object is
         *     {@link SyntaxOnResource }
         *     
         */
        public SyntaxOnResource getSyntaxOnResource() {
            return syntaxOnResource;
        }

        /**
         * Sets the value of the syntaxOnResource property.
         * 
         * @param value
         *     allowed object is
         *     {@link SyntaxOnResource }
         *     
         */
        public void setSyntaxOnResource(SyntaxOnResource value) {
            this.syntaxOnResource = value;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final SubTopic.SearchParameter.Builder<_B> _other) {
            _other.valueSource = ((this.valueSource == null)?null:this.valueSource.newCopyBuilder(_other));
            _other.syntaxOnResource = ((this.syntaxOnResource == null)?null:this.syntaxOnResource.newCopyBuilder(_other));
        }

        public<_B >SubTopic.SearchParameter.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
            return new SubTopic.SearchParameter.Builder<_B>(_parentBuilder, this, true);
        }

        public SubTopic.SearchParameter.Builder<Void> newCopyBuilder() {
            return newCopyBuilder(null);
        }

        public static SubTopic.SearchParameter.Builder<Void> builder() {
            return new SubTopic.SearchParameter.Builder<Void>(null, null, false);
        }

        public static<_B >SubTopic.SearchParameter.Builder<_B> copyOf(final SubTopic.SearchParameter _other) {
            final SubTopic.SearchParameter.Builder<_B> _newBuilder = new SubTopic.SearchParameter.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder);
            return _newBuilder;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final SubTopic.SearchParameter.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final PropertyTree valueSourcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("valueSource"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(valueSourcePropertyTree!= null):((valueSourcePropertyTree == null)||(!valueSourcePropertyTree.isLeaf())))) {
                _other.valueSource = ((this.valueSource == null)?null:this.valueSource.newCopyBuilder(_other, valueSourcePropertyTree, _propertyTreeUse));
            }
            final PropertyTree syntaxOnResourcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("syntaxOnResource"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(syntaxOnResourcePropertyTree!= null):((syntaxOnResourcePropertyTree == null)||(!syntaxOnResourcePropertyTree.isLeaf())))) {
                _other.syntaxOnResource = ((this.syntaxOnResource == null)?null:this.syntaxOnResource.newCopyBuilder(_other, syntaxOnResourcePropertyTree, _propertyTreeUse));
            }
        }

        public<_B >SubTopic.SearchParameter.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return new SubTopic.SearchParameter.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
        }

        public SubTopic.SearchParameter.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
        }

        public static<_B >SubTopic.SearchParameter.Builder<_B> copyOf(final SubTopic.SearchParameter _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final SubTopic.SearchParameter.Builder<_B> _newBuilder = new SubTopic.SearchParameter.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
            return _newBuilder;
        }

        public static SubTopic.SearchParameter.Builder<Void> copyExcept(final SubTopic.SearchParameter _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
        }

        public static SubTopic.SearchParameter.Builder<Void> copyOnly(final SubTopic.SearchParameter _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
        }

        public static class Builder<_B >implements Buildable
        {

            protected final _B _parentBuilder;
            protected final SubTopic.SearchParameter _storedValue;
            private SubTopic.SearchParameter.ValueSource.Builder<SubTopic.SearchParameter.Builder<_B>> valueSource;
            private SyntaxOnResource.Builder<SubTopic.SearchParameter.Builder<_B>> syntaxOnResource;

            public Builder(final _B _parentBuilder, final SubTopic.SearchParameter _other, final boolean _copy) {
                this._parentBuilder = _parentBuilder;
                if (_other!= null) {
                    if (_copy) {
                        _storedValue = null;
                        this.valueSource = ((_other.valueSource == null)?null:_other.valueSource.newCopyBuilder(this));
                        this.syntaxOnResource = ((_other.syntaxOnResource == null)?null:_other.syntaxOnResource.newCopyBuilder(this));
                    } else {
                        _storedValue = _other;
                    }
                } else {
                    _storedValue = null;
                }
            }

            public Builder(final _B _parentBuilder, final SubTopic.SearchParameter _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                this._parentBuilder = _parentBuilder;
                if (_other!= null) {
                    if (_copy) {
                        _storedValue = null;
                        final PropertyTree valueSourcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("valueSource"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(valueSourcePropertyTree!= null):((valueSourcePropertyTree == null)||(!valueSourcePropertyTree.isLeaf())))) {
                            this.valueSource = ((_other.valueSource == null)?null:_other.valueSource.newCopyBuilder(this, valueSourcePropertyTree, _propertyTreeUse));
                        }
                        final PropertyTree syntaxOnResourcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("syntaxOnResource"));
                        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(syntaxOnResourcePropertyTree!= null):((syntaxOnResourcePropertyTree == null)||(!syntaxOnResourcePropertyTree.isLeaf())))) {
                            this.syntaxOnResource = ((_other.syntaxOnResource == null)?null:_other.syntaxOnResource.newCopyBuilder(this, syntaxOnResourcePropertyTree, _propertyTreeUse));
                        }
                    } else {
                        _storedValue = _other;
                    }
                } else {
                    _storedValue = null;
                }
            }

            public _B end() {
                return this._parentBuilder;
            }

            protected<_P extends SubTopic.SearchParameter >_P init(final _P _product) {
                _product.valueSource = ((this.valueSource == null)?null:this.valueSource.build());
                _product.syntaxOnResource = ((this.syntaxOnResource == null)?null:this.syntaxOnResource.build());
                return _product;
            }

            /**
             * Sets the new value of "valueSource" (any previous value will be replaced)
             * 
             * @param valueSource
             *     New value of the "valueSource" property.
             */
            public SubTopic.SearchParameter.Builder<_B> withValueSource(final SubTopic.SearchParameter.ValueSource valueSource) {
                this.valueSource = ((valueSource == null)?null:new SubTopic.SearchParameter.ValueSource.Builder<SubTopic.SearchParameter.Builder<_B>>(this, valueSource, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "valueSource" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.SubTopic.SearchParameter.ValueSource.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "valueSource" property.
             *     Use {@link org.openinfobutton.schemas.kb.SubTopic.SearchParameter.ValueSource.Builder#end()} to return to the current builder.
             */
            public SubTopic.SearchParameter.ValueSource.Builder<? extends SubTopic.SearchParameter.Builder<_B>> withValueSource() {
                return this.valueSource = new SubTopic.SearchParameter.ValueSource.Builder<SubTopic.SearchParameter.Builder<_B>>(this, null, false);
            }

            /**
             * Sets the new value of "syntaxOnResource" (any previous value will be replaced)
             * 
             * @param syntaxOnResource
             *     New value of the "syntaxOnResource" property.
             */
            public SubTopic.SearchParameter.Builder<_B> withSyntaxOnResource(final SyntaxOnResource syntaxOnResource) {
                this.syntaxOnResource = ((syntaxOnResource == null)?null:new SyntaxOnResource.Builder<SubTopic.SearchParameter.Builder<_B>>(this, syntaxOnResource, false));
                return this;
            }

            /**
             * Returns a new builder to build the value of the "syntaxOnResource" property (replacing previous value).
             * Use {@link org.openinfobutton.schemas.kb.SyntaxOnResource.Builder#end()} to return to the current builder.
             * 
             * @return
             *     A new builder to build the value of the "syntaxOnResource" property.
             *     Use {@link org.openinfobutton.schemas.kb.SyntaxOnResource.Builder#end()} to return to the current builder.
             */
            public SyntaxOnResource.Builder<? extends SubTopic.SearchParameter.Builder<_B>> withSyntaxOnResource() {
                return this.syntaxOnResource = new SyntaxOnResource.Builder<SubTopic.SearchParameter.Builder<_B>>(this, null, false);
            }

            @Override
            public SubTopic.SearchParameter build() {
                if (_storedValue == null) {
                    return this.init(new SubTopic.SearchParameter());
                } else {
                    return ((SubTopic.SearchParameter) _storedValue);
                }
            }

        }

        public static class Select
            extends SubTopic.SearchParameter.Selector<SubTopic.SearchParameter.Select, Void>
        {


            Select() {
                super(null, null, null);
            }

            public static SubTopic.SearchParameter.Select _root() {
                return new SubTopic.SearchParameter.Select();
            }

        }

        public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
            extends com.kscs.util.jaxb.Selector<TRoot, TParent>
        {

            private SubTopic.SearchParameter.ValueSource.Selector<TRoot, SubTopic.SearchParameter.Selector<TRoot, TParent>> valueSource = null;
            private SyntaxOnResource.Selector<TRoot, SubTopic.SearchParameter.Selector<TRoot, TParent>> syntaxOnResource = null;

            public Selector(final TRoot root, final TParent parent, final String propertyName) {
                super(root, parent, propertyName);
            }

            @Override
            public Map<String, PropertyTree> buildChildren() {
                final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                products.putAll(super.buildChildren());
                if (this.valueSource!= null) {
                    products.put("valueSource", this.valueSource.init());
                }
                if (this.syntaxOnResource!= null) {
                    products.put("syntaxOnResource", this.syntaxOnResource.init());
                }
                return products;
            }

            public SubTopic.SearchParameter.ValueSource.Selector<TRoot, SubTopic.SearchParameter.Selector<TRoot, TParent>> valueSource() {
                return ((this.valueSource == null)?this.valueSource = new SubTopic.SearchParameter.ValueSource.Selector<TRoot, SubTopic.SearchParameter.Selector<TRoot, TParent>>(this._root, this, "valueSource"):this.valueSource);
            }

            public SyntaxOnResource.Selector<TRoot, SubTopic.SearchParameter.Selector<TRoot, TParent>> syntaxOnResource() {
                return ((this.syntaxOnResource == null)?this.syntaxOnResource = new SyntaxOnResource.Selector<TRoot, SubTopic.SearchParameter.Selector<TRoot, TParent>>(this._root, this, "syntaxOnResource"):this.syntaxOnResource);
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;choice&gt;
         *         &lt;element name="searchCode" type="{}CD"/&gt;
         *         &lt;element name="searchTerm" type="{}ST"/&gt;
         *       &lt;/choice&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "searchCode",
            "searchTerm"
        })
        public static class ValueSource {

            protected CD searchCode;
            protected String searchTerm;

            /**
             * Gets the value of the searchCode property.
             * 
             * @return
             *     possible object is
             *     {@link CD }
             *     
             */
            public CD getSearchCode() {
                return searchCode;
            }

            /**
             * Sets the value of the searchCode property.
             * 
             * @param value
             *     allowed object is
             *     {@link CD }
             *     
             */
            public void setSearchCode(CD value) {
                this.searchCode = value;
            }

            /**
             * Gets the value of the searchTerm property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getSearchTerm() {
                return searchTerm;
            }

            /**
             * Sets the value of the searchTerm property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setSearchTerm(String value) {
                this.searchTerm = value;
            }

            /**
             * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
             * 
             * @param _other
             *     A builder instance to which the state of this object will be copied.
             */
            public<_B >void copyTo(final SubTopic.SearchParameter.ValueSource.Builder<_B> _other) {
                _other.searchCode = ((this.searchCode == null)?null:this.searchCode.newCopyBuilder(_other));
                _other.searchTerm = this.searchTerm;
            }

            public<_B >SubTopic.SearchParameter.ValueSource.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
                return new SubTopic.SearchParameter.ValueSource.Builder<_B>(_parentBuilder, this, true);
            }

            public SubTopic.SearchParameter.ValueSource.Builder<Void> newCopyBuilder() {
                return newCopyBuilder(null);
            }

            public static SubTopic.SearchParameter.ValueSource.Builder<Void> builder() {
                return new SubTopic.SearchParameter.ValueSource.Builder<Void>(null, null, false);
            }

            public static<_B >SubTopic.SearchParameter.ValueSource.Builder<_B> copyOf(final SubTopic.SearchParameter.ValueSource _other) {
                final SubTopic.SearchParameter.ValueSource.Builder<_B> _newBuilder = new SubTopic.SearchParameter.ValueSource.Builder<_B>(null, null, false);
                _other.copyTo(_newBuilder);
                return _newBuilder;
            }

            /**
             * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
             * 
             * @param _other
             *     A builder instance to which the state of this object will be copied.
             */
            public<_B >void copyTo(final SubTopic.SearchParameter.ValueSource.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                final PropertyTree searchCodePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("searchCode"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(searchCodePropertyTree!= null):((searchCodePropertyTree == null)||(!searchCodePropertyTree.isLeaf())))) {
                    _other.searchCode = ((this.searchCode == null)?null:this.searchCode.newCopyBuilder(_other, searchCodePropertyTree, _propertyTreeUse));
                }
                final PropertyTree searchTermPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("searchTerm"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(searchTermPropertyTree!= null):((searchTermPropertyTree == null)||(!searchTermPropertyTree.isLeaf())))) {
                    _other.searchTerm = this.searchTerm;
                }
            }

            public<_B >SubTopic.SearchParameter.ValueSource.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                return new SubTopic.SearchParameter.ValueSource.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
            }

            public SubTopic.SearchParameter.ValueSource.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
            }

            public static<_B >SubTopic.SearchParameter.ValueSource.Builder<_B> copyOf(final SubTopic.SearchParameter.ValueSource _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                final SubTopic.SearchParameter.ValueSource.Builder<_B> _newBuilder = new SubTopic.SearchParameter.ValueSource.Builder<_B>(null, null, false);
                _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
                return _newBuilder;
            }

            public static SubTopic.SearchParameter.ValueSource.Builder<Void> copyExcept(final SubTopic.SearchParameter.ValueSource _other, final PropertyTree _propertyTree) {
                return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
            }

            public static SubTopic.SearchParameter.ValueSource.Builder<Void> copyOnly(final SubTopic.SearchParameter.ValueSource _other, final PropertyTree _propertyTree) {
                return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
            }

            public static class Builder<_B >implements Buildable
            {

                protected final _B _parentBuilder;
                protected final SubTopic.SearchParameter.ValueSource _storedValue;
                private CD.Builder<SubTopic.SearchParameter.ValueSource.Builder<_B>> searchCode;
                private String searchTerm;

                public Builder(final _B _parentBuilder, final SubTopic.SearchParameter.ValueSource _other, final boolean _copy) {
                    this._parentBuilder = _parentBuilder;
                    if (_other!= null) {
                        if (_copy) {
                            _storedValue = null;
                            this.searchCode = ((_other.searchCode == null)?null:_other.searchCode.newCopyBuilder(this));
                            this.searchTerm = _other.searchTerm;
                        } else {
                            _storedValue = _other;
                        }
                    } else {
                        _storedValue = null;
                    }
                }

                public Builder(final _B _parentBuilder, final SubTopic.SearchParameter.ValueSource _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                    this._parentBuilder = _parentBuilder;
                    if (_other!= null) {
                        if (_copy) {
                            _storedValue = null;
                            final PropertyTree searchCodePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("searchCode"));
                            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(searchCodePropertyTree!= null):((searchCodePropertyTree == null)||(!searchCodePropertyTree.isLeaf())))) {
                                this.searchCode = ((_other.searchCode == null)?null:_other.searchCode.newCopyBuilder(this, searchCodePropertyTree, _propertyTreeUse));
                            }
                            final PropertyTree searchTermPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("searchTerm"));
                            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(searchTermPropertyTree!= null):((searchTermPropertyTree == null)||(!searchTermPropertyTree.isLeaf())))) {
                                this.searchTerm = _other.searchTerm;
                            }
                        } else {
                            _storedValue = _other;
                        }
                    } else {
                        _storedValue = null;
                    }
                }

                public _B end() {
                    return this._parentBuilder;
                }

                protected<_P extends SubTopic.SearchParameter.ValueSource >_P init(final _P _product) {
                    _product.searchCode = ((this.searchCode == null)?null:this.searchCode.build());
                    _product.searchTerm = this.searchTerm;
                    return _product;
                }

                /**
                 * Sets the new value of "searchCode" (any previous value will be replaced)
                 * 
                 * @param searchCode
                 *     New value of the "searchCode" property.
                 */
                public SubTopic.SearchParameter.ValueSource.Builder<_B> withSearchCode(final CD searchCode) {
                    this.searchCode = ((searchCode == null)?null:new CD.Builder<SubTopic.SearchParameter.ValueSource.Builder<_B>>(this, searchCode, false));
                    return this;
                }

                /**
                 * Returns a new builder to build the value of the "searchCode" property (replacing previous value).
                 * Use {@link org.openinfobutton.schemas.kb.CD.Builder#end()} to return to the current builder.
                 * 
                 * @return
                 *     A new builder to build the value of the "searchCode" property.
                 *     Use {@link org.openinfobutton.schemas.kb.CD.Builder#end()} to return to the current builder.
                 */
                public CD.Builder<? extends SubTopic.SearchParameter.ValueSource.Builder<_B>> withSearchCode() {
                    return this.searchCode = new CD.Builder<SubTopic.SearchParameter.ValueSource.Builder<_B>>(this, null, false);
                }

                /**
                 * Sets the new value of "searchTerm" (any previous value will be replaced)
                 * 
                 * @param searchTerm
                 *     New value of the "searchTerm" property.
                 */
                public SubTopic.SearchParameter.ValueSource.Builder<_B> withSearchTerm(final String searchTerm) {
                    this.searchTerm = searchTerm;
                    return this;
                }

                @Override
                public SubTopic.SearchParameter.ValueSource build() {
                    if (_storedValue == null) {
                        return this.init(new SubTopic.SearchParameter.ValueSource());
                    } else {
                        return ((SubTopic.SearchParameter.ValueSource) _storedValue);
                    }
                }

            }

            public static class Select
                extends SubTopic.SearchParameter.ValueSource.Selector<SubTopic.SearchParameter.ValueSource.Select, Void>
            {


                Select() {
                    super(null, null, null);
                }

                public static SubTopic.SearchParameter.ValueSource.Select _root() {
                    return new SubTopic.SearchParameter.ValueSource.Select();
                }

            }

            public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
                extends com.kscs.util.jaxb.Selector<TRoot, TParent>
            {

                private CD.Selector<TRoot, SubTopic.SearchParameter.ValueSource.Selector<TRoot, TParent>> searchCode = null;
                private com.kscs.util.jaxb.Selector<TRoot, SubTopic.SearchParameter.ValueSource.Selector<TRoot, TParent>> searchTerm = null;

                public Selector(final TRoot root, final TParent parent, final String propertyName) {
                    super(root, parent, propertyName);
                }

                @Override
                public Map<String, PropertyTree> buildChildren() {
                    final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                    products.putAll(super.buildChildren());
                    if (this.searchCode!= null) {
                        products.put("searchCode", this.searchCode.init());
                    }
                    if (this.searchTerm!= null) {
                        products.put("searchTerm", this.searchTerm.init());
                    }
                    return products;
                }

                public CD.Selector<TRoot, SubTopic.SearchParameter.ValueSource.Selector<TRoot, TParent>> searchCode() {
                    return ((this.searchCode == null)?this.searchCode = new CD.Selector<TRoot, SubTopic.SearchParameter.ValueSource.Selector<TRoot, TParent>>(this._root, this, "searchCode"):this.searchCode);
                }

                public com.kscs.util.jaxb.Selector<TRoot, SubTopic.SearchParameter.ValueSource.Selector<TRoot, TParent>> searchTerm() {
                    return ((this.searchTerm == null)?this.searchTerm = new com.kscs.util.jaxb.Selector<TRoot, SubTopic.SearchParameter.ValueSource.Selector<TRoot, TParent>>(this._root, this, "searchTerm"):this.searchTerm);
                }

            }

        }

    }

    public static class Select
        extends SubTopic.Selector<SubTopic.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static SubTopic.Select _root() {
            return new SubTopic.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private SubTopic.SearchParameter.Selector<TRoot, SubTopic.Selector<TRoot, TParent>> searchParameter = null;
        private com.kscs.util.jaxb.Selector<TRoot, SubTopic.Selector<TRoot, TParent>> linkName = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.searchParameter!= null) {
                products.put("searchParameter", this.searchParameter.init());
            }
            if (this.linkName!= null) {
                products.put("linkName", this.linkName.init());
            }
            return products;
        }

        public SubTopic.SearchParameter.Selector<TRoot, SubTopic.Selector<TRoot, TParent>> searchParameter() {
            return ((this.searchParameter == null)?this.searchParameter = new SubTopic.SearchParameter.Selector<TRoot, SubTopic.Selector<TRoot, TParent>>(this._root, this, "searchParameter"):this.searchParameter);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SubTopic.Selector<TRoot, TParent>> linkName() {
            return ((this.linkName == null)?this.linkName = new com.kscs.util.jaxb.Selector<TRoot, SubTopic.Selector<TRoot, TParent>>(this._root, this, "linkName"):this.linkName);
        }

    }

}
